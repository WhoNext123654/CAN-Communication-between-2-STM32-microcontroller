
test_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000990c  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08009b58  08009b58  00019b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c20  08009c20  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08009c20  08009c20  00019c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c28  08009c28  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c28  08009c28  00019c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c2c  08009c2c  00019c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08009c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000005c  08009c8c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08009c8c  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011989  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e8c  00000000  00000000  00031a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  000338f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000098a  00000000  00000000  00034558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cdb8  00000000  00000000  00034ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000117ca  00000000  00000000  00061c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011e621  00000000  00000000  00073464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003974  00000000  00000000  00191a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001953fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000005c 	.word	0x2000005c
 8000268:	00000000 	.word	0x00000000
 800026c:	08009b40 	.word	0x08009b40

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000060 	.word	0x20000060
 8000288:	08009b40 	.word	0x08009b40

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b982 	b.w	80005b8 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002d2:	460d      	mov	r5, r1
 80002d4:	4604      	mov	r4, r0
 80002d6:	460f      	mov	r7, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d146      	bne.n	800036a <__udivmoddi4+0x9e>
 80002dc:	428a      	cmp	r2, r1
 80002de:	4694      	mov	ip, r2
 80002e0:	d95e      	bls.n	80003a0 <__udivmoddi4+0xd4>
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	b143      	cbz	r3, 80002fa <__udivmoddi4+0x2e>
 80002e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002ec:	f1c3 0220 	rsb	r2, r3, #32
 80002f0:	409f      	lsls	r7, r3
 80002f2:	409c      	lsls	r4, r3
 80002f4:	fa20 f202 	lsr.w	r2, r0, r2
 80002f8:	4317      	orrs	r7, r2
 80002fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002fe:	fa1f f58c 	uxth.w	r5, ip
 8000302:	0c22      	lsrs	r2, r4, #16
 8000304:	fbb7 f1fe 	udiv	r1, r7, lr
 8000308:	fb0e 7711 	mls	r7, lr, r1, r7
 800030c:	fb01 f005 	mul.w	r0, r1, r5
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x5e>
 8000318:	eb1c 0202 	adds.w	r2, ip, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x5c>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 8134 	bhi.w	8000590 <__udivmoddi4+0x2c4>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	b2a4      	uxth	r4, r4
 800032e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000332:	fb0e 2210 	mls	r2, lr, r0, r2
 8000336:	fb00 f505 	mul.w	r5, r0, r5
 800033a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033e:	42a5      	cmp	r5, r4
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x88>
 8000342:	eb1c 0404 	adds.w	r4, ip, r4
 8000346:	f100 32ff 	add.w	r2, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x86>
 800034c:	42a5      	cmp	r5, r4
 800034e:	f200 8119 	bhi.w	8000584 <__udivmoddi4+0x2b8>
 8000352:	4610      	mov	r0, r2
 8000354:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000358:	1b64      	subs	r4, r4, r5
 800035a:	2100      	movs	r1, #0
 800035c:	b11e      	cbz	r6, 8000366 <__udivmoddi4+0x9a>
 800035e:	40dc      	lsrs	r4, r3
 8000360:	2300      	movs	r3, #0
 8000362:	e9c6 4300 	strd	r4, r3, [r6]
 8000366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0xb4>
 800036e:	2e00      	cmp	r6, #0
 8000370:	f000 80fc 	beq.w	800056c <__udivmoddi4+0x2a0>
 8000374:	2100      	movs	r1, #0
 8000376:	e9c6 0500 	strd	r0, r5, [r6]
 800037a:	4608      	mov	r0, r1
 800037c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14c      	bne.n	8000422 <__udivmoddi4+0x156>
 8000388:	42ab      	cmp	r3, r5
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2a6>
 800038e:	4282      	cmp	r2, r0
 8000390:	f240 80ef 	bls.w	8000572 <__udivmoddi4+0x2a6>
 8000394:	4608      	mov	r0, r1
 8000396:	2e00      	cmp	r6, #0
 8000398:	d0e5      	beq.n	8000366 <__udivmoddi4+0x9a>
 800039a:	e9c6 4700 	strd	r4, r7, [r6]
 800039e:	e7e2      	b.n	8000366 <__udivmoddi4+0x9a>
 80003a0:	b902      	cbnz	r2, 80003a4 <__udivmoddi4+0xd8>
 80003a2:	deff      	udf	#255	; 0xff
 80003a4:	fab2 f382 	clz	r3, r2
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f040 809f 	bne.w	80004ec <__udivmoddi4+0x220>
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b4:	fa1f f78c 	uxth.w	r7, ip
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 f5fe 	udiv	r5, r2, lr
 80003be:	fb0e 2015 	mls	r0, lr, r5, r2
 80003c2:	0c22      	lsrs	r2, r4, #16
 80003c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c8:	fb07 f005 	mul.w	r0, r7, r5
 80003cc:	4290      	cmp	r0, r2
 80003ce:	d90f      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003d0:	eb1c 0202 	adds.w	r2, ip, r2
 80003d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003d8:	bf2c      	ite	cs
 80003da:	f04f 0901 	movcs.w	r9, #1
 80003de:	f04f 0900 	movcc.w	r9, #0
 80003e2:	4290      	cmp	r0, r2
 80003e4:	d903      	bls.n	80003ee <__udivmoddi4+0x122>
 80003e6:	f1b9 0f00 	cmp.w	r9, #0
 80003ea:	f000 80ce 	beq.w	800058a <__udivmoddi4+0x2be>
 80003ee:	4645      	mov	r5, r8
 80003f0:	1a12      	subs	r2, r2, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003f8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003fc:	fb00 f707 	mul.w	r7, r0, r7
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	42a7      	cmp	r7, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x14e>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x14c>
 8000412:	42a7      	cmp	r7, r4
 8000414:	f200 80b3 	bhi.w	800057e <__udivmoddi4+0x2b2>
 8000418:	4610      	mov	r0, r2
 800041a:	1be4      	subs	r4, r4, r7
 800041c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000420:	e79c      	b.n	800035c <__udivmoddi4+0x90>
 8000422:	f1c1 0420 	rsb	r4, r1, #32
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 fc01 	lsl.w	ip, r5, r1
 800042c:	fa22 f704 	lsr.w	r7, r2, r4
 8000430:	40e5      	lsrs	r5, r4
 8000432:	408a      	lsls	r2, r1
 8000434:	431f      	orrs	r7, r3
 8000436:	fa20 f304 	lsr.w	r3, r0, r4
 800043a:	4088      	lsls	r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea43 030c 	orr.w	r3, r3, ip
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fbb5 fef8 	udiv	lr, r5, r8
 8000450:	fb08 551e 	mls	r5, r8, lr, r5
 8000454:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000458:	fb0e f90c 	mul.w	r9, lr, ip
 800045c:	45a9      	cmp	r9, r5
 800045e:	d90e      	bls.n	800047e <__udivmoddi4+0x1b2>
 8000460:	197d      	adds	r5, r7, r5
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	bf2c      	ite	cs
 8000468:	f04f 0b01 	movcs.w	fp, #1
 800046c:	f04f 0b00 	movcc.w	fp, #0
 8000470:	45a9      	cmp	r9, r5
 8000472:	d903      	bls.n	800047c <__udivmoddi4+0x1b0>
 8000474:	f1bb 0f00 	cmp.w	fp, #0
 8000478:	f000 808d 	beq.w	8000596 <__udivmoddi4+0x2ca>
 800047c:	46d6      	mov	lr, sl
 800047e:	eba5 0509 	sub.w	r5, r5, r9
 8000482:	fa1f f983 	uxth.w	r9, r3
 8000486:	fbb5 f3f8 	udiv	r3, r5, r8
 800048a:	fb08 5513 	mls	r5, r8, r3, r5
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000496:	45ac      	cmp	ip, r5
 8000498:	d906      	bls.n	80004a8 <__udivmoddi4+0x1dc>
 800049a:	197d      	adds	r5, r7, r5
 800049c:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a0:	d201      	bcs.n	80004a6 <__udivmoddi4+0x1da>
 80004a2:	45ac      	cmp	ip, r5
 80004a4:	d87e      	bhi.n	80005a4 <__udivmoddi4+0x2d8>
 80004a6:	4643      	mov	r3, r8
 80004a8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004ac:	eba5 050c 	sub.w	r5, r5, ip
 80004b0:	fba3 9802 	umull	r9, r8, r3, r2
 80004b4:	4545      	cmp	r5, r8
 80004b6:	46ce      	mov	lr, r9
 80004b8:	46c4      	mov	ip, r8
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x1f6>
 80004bc:	d106      	bne.n	80004cc <__udivmoddi4+0x200>
 80004be:	4548      	cmp	r0, r9
 80004c0:	d204      	bcs.n	80004cc <__udivmoddi4+0x200>
 80004c2:	3b01      	subs	r3, #1
 80004c4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004cc:	2e00      	cmp	r6, #0
 80004ce:	d06f      	beq.n	80005b0 <__udivmoddi4+0x2e4>
 80004d0:	ebb0 020e 	subs.w	r2, r0, lr
 80004d4:	eb65 050c 	sbc.w	r5, r5, ip
 80004d8:	40ca      	lsrs	r2, r1
 80004da:	fa05 f404 	lsl.w	r4, r5, r4
 80004de:	40cd      	lsrs	r5, r1
 80004e0:	4618      	mov	r0, r3
 80004e2:	4314      	orrs	r4, r2
 80004e4:	2100      	movs	r1, #0
 80004e6:	e9c6 4500 	strd	r4, r5, [r6]
 80004ea:	e73c      	b.n	8000366 <__udivmoddi4+0x9a>
 80004ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f0:	f1c3 0220 	rsb	r2, r3, #32
 80004f4:	4099      	lsls	r1, r3
 80004f6:	409c      	lsls	r4, r3
 80004f8:	40d5      	lsrs	r5, r2
 80004fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000502:	fa1f f78c 	uxth.w	r7, ip
 8000506:	fbb5 f0fe 	udiv	r0, r5, lr
 800050a:	430a      	orrs	r2, r1
 800050c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000510:	0c11      	lsrs	r1, r2, #16
 8000512:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000516:	fb00 f507 	mul.w	r5, r0, r7
 800051a:	428d      	cmp	r5, r1
 800051c:	d90e      	bls.n	800053c <__udivmoddi4+0x270>
 800051e:	eb1c 0101 	adds.w	r1, ip, r1
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	bf2c      	ite	cs
 8000528:	f04f 0901 	movcs.w	r9, #1
 800052c:	f04f 0900 	movcc.w	r9, #0
 8000530:	428d      	cmp	r5, r1
 8000532:	d902      	bls.n	800053a <__udivmoddi4+0x26e>
 8000534:	f1b9 0f00 	cmp.w	r9, #0
 8000538:	d031      	beq.n	800059e <__udivmoddi4+0x2d2>
 800053a:	4640      	mov	r0, r8
 800053c:	1b49      	subs	r1, r1, r5
 800053e:	b292      	uxth	r2, r2
 8000540:	fbb1 f5fe 	udiv	r5, r1, lr
 8000544:	fb0e 1115 	mls	r1, lr, r5, r1
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	fb05 f107 	mul.w	r1, r5, r7
 8000550:	4291      	cmp	r1, r2
 8000552:	d907      	bls.n	8000564 <__udivmoddi4+0x298>
 8000554:	eb1c 0202 	adds.w	r2, ip, r2
 8000558:	f105 38ff 	add.w	r8, r5, #4294967295
 800055c:	d201      	bcs.n	8000562 <__udivmoddi4+0x296>
 800055e:	4291      	cmp	r1, r2
 8000560:	d823      	bhi.n	80005aa <__udivmoddi4+0x2de>
 8000562:	4645      	mov	r5, r8
 8000564:	1a52      	subs	r2, r2, r1
 8000566:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800056a:	e726      	b.n	80003ba <__udivmoddi4+0xee>
 800056c:	4631      	mov	r1, r6
 800056e:	4630      	mov	r0, r6
 8000570:	e6f9      	b.n	8000366 <__udivmoddi4+0x9a>
 8000572:	1a84      	subs	r4, r0, r2
 8000574:	eb65 0203 	sbc.w	r2, r5, r3
 8000578:	2001      	movs	r0, #1
 800057a:	4617      	mov	r7, r2
 800057c:	e70b      	b.n	8000396 <__udivmoddi4+0xca>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14e>
 8000584:	4464      	add	r4, ip
 8000586:	3802      	subs	r0, #2
 8000588:	e6e4      	b.n	8000354 <__udivmoddi4+0x88>
 800058a:	3d02      	subs	r5, #2
 800058c:	4462      	add	r2, ip
 800058e:	e72f      	b.n	80003f0 <__udivmoddi4+0x124>
 8000590:	3902      	subs	r1, #2
 8000592:	4462      	add	r2, ip
 8000594:	e6c9      	b.n	800032a <__udivmoddi4+0x5e>
 8000596:	f1ae 0e02 	sub.w	lr, lr, #2
 800059a:	443d      	add	r5, r7
 800059c:	e76f      	b.n	800047e <__udivmoddi4+0x1b2>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	e7cb      	b.n	800053c <__udivmoddi4+0x270>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443d      	add	r5, r7
 80005a8:	e77e      	b.n	80004a8 <__udivmoddi4+0x1dc>
 80005aa:	3d02      	subs	r5, #2
 80005ac:	4462      	add	r2, ip
 80005ae:	e7d9      	b.n	8000564 <__udivmoddi4+0x298>
 80005b0:	4618      	mov	r0, r3
 80005b2:	4631      	mov	r1, r6
 80005b4:	e6d7      	b.n	8000366 <__udivmoddi4+0x9a>
 80005b6:	bf00      	nop

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <FDCAN_ConfigFilter>:
/* USER CODE BEGIN PV */
FDCAN_RxHeaderTypeDef rx_header;
uint8_t rx_data[8];

void FDCAN_ConfigFilter(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
    FDCAN_FilterTypeDef sFilterConfig;
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80005ce:	2301      	movs	r3, #1
 80005d0:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x000;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x000;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	4619      	mov	r1, r3
 80005de:	4806      	ldr	r0, [pc, #24]	; (80005f8 <FDCAN_ConfigFilter+0x3c>)
 80005e0:	f000 ffa2 	bl	8001528 <HAL_FDCAN_ConfigFilter>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <FDCAN_ConfigFilter+0x32>
    {
        Error_Handler();
 80005ea:	f000 f9b1 	bl	8000950 <Error_Handler>
    }
}
 80005ee:	bf00      	nop
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000078 	.word	0x20000078

080005fc <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09c      	sub	sp, #112	; 0x70
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	2b00      	cmp	r3, #0
 800060e:	d048      	beq.n	80006a2 <HAL_FDCAN_RxFifo0Callback+0xa6>
    {
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_data) != HAL_OK)
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8000612:	4a26      	ldr	r2, [pc, #152]	; (80006ac <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f001 f808 	bl	800162c <HAL_FDCAN_GetRxMessage>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d13e      	bne.n	80006a0 <HAL_FDCAN_RxFifo0Callback+0xa4>
        {
            return;
        }

        char uart_buf[100];
        snprintf(uart_buf, sizeof(uart_buf), "[CAN RX] ID: 0x%03lX | Data: ", (unsigned long)rx_header.Identifier);
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f107 0008 	add.w	r0, r7, #8
 800062a:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 800062c:	2164      	movs	r1, #100	; 0x64
 800062e:	f008 fdc1 	bl	80091b4 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fe28 	bl	800028c <strlen>
 800063c:	4603      	mov	r3, r0
 800063e:	b29a      	uxth	r2, r3
 8000640:	f107 0108 	add.w	r1, r7, #8
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	481a      	ldr	r0, [pc, #104]	; (80006b4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800064a:	f007 fcb7 	bl	8007fbc <HAL_UART_Transmit>

        for (int i = 0; i < 8; i++)
 800064e:	2300      	movs	r3, #0
 8000650:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000652:	e01a      	b.n	800068a <HAL_FDCAN_RxFifo0Callback+0x8e>
        {
            snprintf(uart_buf, sizeof(uart_buf), "%02X ", rx_data[i]);
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8000656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000658:	4413      	add	r3, r2
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f107 0008 	add.w	r0, r7, #8
 8000660:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8000662:	2164      	movs	r1, #100	; 0x64
 8000664:	f008 fda6 	bl	80091b4 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fe0d 	bl	800028c <strlen>
 8000672:	4603      	mov	r3, r0
 8000674:	b29a      	uxth	r2, r3
 8000676:	f107 0108 	add.w	r1, r7, #8
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	480d      	ldr	r0, [pc, #52]	; (80006b4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8000680:	f007 fc9c 	bl	8007fbc <HAL_UART_Transmit>
        for (int i = 0; i < 8; i++)
 8000684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000686:	3301      	adds	r3, #1
 8000688:	66fb      	str	r3, [r7, #108]	; 0x6c
 800068a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800068c:	2b07      	cmp	r3, #7
 800068e:	dde1      	ble.n	8000654 <HAL_FDCAN_RxFifo0Callback+0x58>
        }
        HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	2202      	movs	r2, #2
 8000696:	4909      	ldr	r1, [pc, #36]	; (80006bc <HAL_FDCAN_RxFifo0Callback+0xc0>)
 8000698:	4806      	ldr	r0, [pc, #24]	; (80006b4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800069a:	f007 fc8f 	bl	8007fbc <HAL_UART_Transmit>
 800069e:	e000      	b.n	80006a2 <HAL_FDCAN_RxFifo0Callback+0xa6>
            return;
 80006a0:	bf00      	nop
    }
}
 80006a2:	3770      	adds	r7, #112	; 0x70
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000198 	.word	0x20000198
 80006ac:	20000170 	.word	0x20000170
 80006b0:	08009b58 	.word	0x08009b58
 80006b4:	200000dc 	.word	0x200000dc
 80006b8:	08009b78 	.word	0x08009b78
 80006bc:	08009b80 	.word	0x08009b80

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 fba5 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f83b 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 f925 	bl	800091c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80006d2:	f000 f891 	bl	80007f8 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 80006d6:	f000 f8d5 	bl	8000884 <MX_USART2_UART_Init>

  FDCAN_ConfigFilter();
 80006da:	f7ff ff6f 	bl	80005bc <FDCAN_ConfigFilter>

     if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80006de:	4816      	ldr	r0, [pc, #88]	; (8000738 <main+0x78>)
 80006e0:	f000 ff7c 	bl	80015dc <HAL_FDCAN_Start>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <main+0x2e>
     {
         Error_Handler();
 80006ea:	f000 f931 	bl	8000950 <Error_Handler>
     }

     if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ee:	2200      	movs	r2, #0
 80006f0:	2101      	movs	r1, #1
 80006f2:	4811      	ldr	r0, [pc, #68]	; (8000738 <main+0x78>)
 80006f4:	f001 f8a2 	bl	800183c <HAL_FDCAN_ActivateNotification>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <main+0x42>
     {
         Error_Handler();
 80006fe:	f000 f927 	bl	8000950 <Error_Handler>
     }

     char startMsg[] = "CAN Receiver Started\r\n";
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <main+0x7c>)
 8000704:	463c      	mov	r4, r7
 8000706:	461d      	mov	r5, r3
 8000708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000710:	6020      	str	r0, [r4, #0]
 8000712:	3404      	adds	r4, #4
 8000714:	8021      	strh	r1, [r4, #0]
 8000716:	3402      	adds	r4, #2
 8000718:	0c0b      	lsrs	r3, r1, #16
 800071a:	7023      	strb	r3, [r4, #0]
     HAL_UART_Transmit(&huart2, (uint8_t *)startMsg, strlen(startMsg), HAL_MAX_DELAY);
 800071c:	463b      	mov	r3, r7
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fdb4 	bl	800028c <strlen>
 8000724:	4603      	mov	r3, r0
 8000726:	b29a      	uxth	r2, r3
 8000728:	4639      	mov	r1, r7
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <main+0x80>)
 8000730:	f007 fc44 	bl	8007fbc <HAL_UART_Transmit>

     while (1)
 8000734:	e7fe      	b.n	8000734 <main+0x74>
 8000736:	bf00      	nop
 8000738:	20000078 	.word	0x20000078
 800073c:	08009b84 	.word	0x08009b84
 8000740:	200000dc 	.word	0x200000dc

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b09c      	sub	sp, #112	; 0x70
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2250      	movs	r2, #80	; 0x50
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f008 fd62 	bl	800921c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
 8000768:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800076a:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <SystemClock_Config+0xb0>)
 800076c:	691b      	ldr	r3, [r3, #16]
 800076e:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <SystemClock_Config+0xb0>)
 8000770:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000774:	6113      	str	r3, [r2, #16]
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <SystemClock_Config+0xb0>)
 8000778:	691b      	ldr	r3, [r3, #16]
 800077a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000782:	bf00      	nop
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <SystemClock_Config+0xb0>)
 8000786:	695b      	ldr	r3, [r3, #20]
 8000788:	f003 0308 	and.w	r3, r3, #8
 800078c:	2b08      	cmp	r3, #8
 800078e:	d1f9      	bne.n	8000784 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000790:	2303      	movs	r3, #3
 8000792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800079c:	2308      	movs	r3, #8
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a0:	2340      	movs	r3, #64	; 0x40
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fc61 	bl	8002074 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80007b8:	f000 f8ca 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	231f      	movs	r3, #31
 80007be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	2101      	movs	r1, #1
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 f882 	bl	80028e4 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007e6:	f000 f8b3 	bl	8000950 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3770      	adds	r7, #112	; 0x70
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	44020800 	.word	0x44020800

080007f8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_FDCAN1_Init+0x84>)
 80007fe:	4a20      	ldr	r2, [pc, #128]	; (8000880 <MX_FDCAN1_Init+0x88>)
 8000800:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_FDCAN1_Init+0x84>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_FDCAN1_Init+0x84>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_FDCAN1_Init+0x84>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_FDCAN1_Init+0x84>)
 8000816:	2200      	movs	r2, #0
 8000818:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_FDCAN1_Init+0x84>)
 800081c:	2200      	movs	r2, #0
 800081e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_FDCAN1_Init+0x84>)
 8000822:	2200      	movs	r2, #0
 8000824:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_FDCAN1_Init+0x84>)
 8000828:	2210      	movs	r2, #16
 800082a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_FDCAN1_Init+0x84>)
 800082e:	2201      	movs	r2, #1
 8000830:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_FDCAN1_Init+0x84>)
 8000834:	2202      	movs	r2, #2
 8000836:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_FDCAN1_Init+0x84>)
 800083a:	2202      	movs	r2, #2
 800083c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_FDCAN1_Init+0x84>)
 8000840:	2201      	movs	r2, #1
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_FDCAN1_Init+0x84>)
 8000846:	2201      	movs	r2, #1
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_FDCAN1_Init+0x84>)
 800084c:	2201      	movs	r2, #1
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_FDCAN1_Init+0x84>)
 8000852:	2201      	movs	r2, #1
 8000854:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_FDCAN1_Init+0x84>)
 8000858:	2200      	movs	r2, #0
 800085a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_FDCAN1_Init+0x84>)
 800085e:	2200      	movs	r2, #0
 8000860:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_FDCAN1_Init+0x84>)
 8000864:	2200      	movs	r2, #0
 8000866:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_FDCAN1_Init+0x84>)
 800086a:	f000 fd03 	bl	8001274 <HAL_FDCAN_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000874:	f000 f86c 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000078 	.word	0x20000078
 8000880:	4000a400 	.word	0x4000a400

08000884 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_USART2_UART_Init+0x90>)
 800088a:	4a23      	ldr	r2, [pc, #140]	; (8000918 <MX_USART2_UART_Init+0x94>)
 800088c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_USART2_UART_Init+0x90>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_USART2_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_USART2_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_USART2_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_USART2_UART_Init+0x90>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_USART2_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_USART2_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_USART2_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USART2_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_USART2_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_USART2_UART_Init+0x90>)
 80008ce:	f007 fb25 	bl	8007f1c <HAL_UART_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008d8:	f000 f83a 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_USART2_UART_Init+0x90>)
 80008e0:	f008 fb9d 	bl	800901e <HAL_UARTEx_SetTxFifoThreshold>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ea:	f000 f831 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4808      	ldr	r0, [pc, #32]	; (8000914 <MX_USART2_UART_Init+0x90>)
 80008f2:	f008 fbd2 	bl	800909a <HAL_UARTEx_SetRxFifoThreshold>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008fc:	f000 f828 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_USART2_UART_Init+0x90>)
 8000902:	f008 fb53 	bl	8008fac <HAL_UARTEx_DisableFifoMode>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800090c:	f000 f820 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000dc 	.word	0x200000dc
 8000918:	40004400 	.word	0x40004400

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_GPIO_Init+0x30>)
 8000924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000928:	4a08      	ldr	r2, [pc, #32]	; (800094c <MX_GPIO_Init+0x30>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_GPIO_Init+0x30>)
 8000934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	44020c00 	.word	0x44020c00

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>

0800095a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b0cc      	sub	sp, #304	; 0x130
 800096c:	af00      	add	r7, sp, #0
 800096e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000972:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000976:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800098c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000990:	4618      	mov	r0, r3
 8000992:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000996:	461a      	mov	r2, r3
 8000998:	2100      	movs	r1, #0
 800099a:	f008 fc3f 	bl	800921c <memset>
  if(hfdcan->Instance==FDCAN1)
 800099e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a3b      	ldr	r2, [pc, #236]	; (8000a98 <HAL_FDCAN_MspInit+0x130>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d16e      	bne.n	8000a8e <HAL_FDCAN_MspInit+0x126>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80009b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009b4:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80009b8:	f04f 0200 	mov.w	r2, #0
 80009bc:	f04f 0304 	mov.w	r3, #4
 80009c0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80009c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80009cc:	2200      	movs	r2, #0
 80009ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fac6 	bl	8002f68 <HAL_RCCEx_PeriphCLKConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_FDCAN_MspInit+0x7e>
    {
      Error_Handler();
 80009e2:	f7ff ffb5 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80009e6:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <HAL_FDCAN_MspInit+0x134>)
 80009e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80009ec:	4a2b      	ldr	r2, [pc, #172]	; (8000a9c <HAL_FDCAN_MspInit+0x134>)
 80009ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <HAL_FDCAN_MspInit+0x134>)
 80009f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80009fc:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8000a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a04:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a0e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000a12:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <HAL_FDCAN_MspInit+0x134>)
 8000a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a1a:	4a20      	ldr	r2, [pc, #128]	; (8000a9c <HAL_FDCAN_MspInit+0x134>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <HAL_FDCAN_MspInit+0x134>)
 8000a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a2a:	f003 0201 	and.w	r2, r3, #1
 8000a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a3c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000a40:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a5c:	2309      	movs	r3, #9
 8000a5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000a66:	4619      	mov	r1, r3
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <HAL_FDCAN_MspInit+0x138>)
 8000a6a:	f001 f9b1 	bl	8001dd0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2027      	movs	r0, #39	; 0x27
 8000a74:	f000 fb25 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000a78:	2027      	movs	r0, #39	; 0x27
 8000a7a:	f000 fb3c 	bl	80010f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	2028      	movs	r0, #40	; 0x28
 8000a84:	f000 fb1d 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000a88:	2028      	movs	r0, #40	; 0x28
 8000a8a:	f000 fb34 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000a8e:	bf00      	nop
 8000a90:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	4000a400 	.word	0x4000a400
 8000a9c:	44020c00 	.word	0x44020c00
 8000aa0:	42020000 	.word	0x42020000

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0cc      	sub	sp, #304	; 0x130
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000aae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ab2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ac8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000acc:	4618      	mov	r0, r3
 8000ace:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	f008 fba1 	bl	800921c <memset>
  if(huart->Instance==USART2)
 8000ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ade:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a36      	ldr	r2, [pc, #216]	; (8000bc0 <HAL_UART_MspInit+0x11c>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d164      	bne.n	8000bb6 <HAL_UART_MspInit+0x112>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000af0:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000af4:	f04f 0202 	mov.w	r2, #2
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b04:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000b08:	2200      	movs	r2, #0
 8000b0a:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4618      	mov	r0, r3
 8000b12:	f002 fa29 	bl	8002f68 <HAL_RCCEx_PeriphCLKConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8000b1c:	f7ff ff18 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b20:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <HAL_UART_MspInit+0x120>)
 8000b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000b26:	4a27      	ldr	r2, [pc, #156]	; (8000bc4 <HAL_UART_MspInit+0x120>)
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <HAL_UART_MspInit+0x120>)
 8000b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000b36:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8000b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b3e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b48:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000b4c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_UART_MspInit+0x120>)
 8000b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b54:	4a1b      	ldr	r2, [pc, #108]	; (8000bc4 <HAL_UART_MspInit+0x120>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <HAL_UART_MspInit+0x120>)
 8000b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b64:	f003 0201 	and.w	r2, r3, #1
 8000b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b6c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000b7a:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b94:	2307      	movs	r3, #7
 8000b96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <HAL_UART_MspInit+0x124>)
 8000ba2:	f001 f915 	bl	8001dd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	203b      	movs	r0, #59	; 0x3b
 8000bac:	f000 fa89 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bb0:	203b      	movs	r0, #59	; 0x3b
 8000bb2:	f000 faa0 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	44020c00 	.word	0x44020c00
 8000bc8:	42020000 	.word	0x42020000

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 f958 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <FDCAN1_IT0_IRQHandler+0x10>)
 8000c26:	f000 feef 	bl	8001a08 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000078 	.word	0x20000078

08000c34 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <FDCAN1_IT1_IRQHandler+0x10>)
 8000c3a:	f000 fee5 	bl	8001a08 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000078 	.word	0x20000078

08000c48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <USART2_IRQHandler+0x10>)
 8000c4e:	f007 fa53 	bl	80080f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200000dc 	.word	0x200000dc

08000c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <_sbrk+0x5c>)
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <_sbrk+0x60>)
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <_sbrk+0x64>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <_sbrk+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d207      	bcs.n	8000c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c8c:	f008 face 	bl	800922c <__errno>
 8000c90:	4603      	mov	r3, r0
 8000c92:	220c      	movs	r2, #12
 8000c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	e009      	b.n	8000cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <_sbrk+0x64>)
 8000cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200a0000 	.word	0x200a0000
 8000cbc:	00000400 	.word	0x00000400
 8000cc0:	200001a0 	.word	0x200001a0
 8000cc4:	200002f0 	.word	0x200002f0

08000cc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cce:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <SystemInit+0xdc>)
 8000cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd4:	4a33      	ldr	r2, [pc, #204]	; (8000da4 <SystemInit+0xdc>)
 8000cd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cda:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000cde:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <SystemInit+0xe0>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000ce4:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <SystemInit+0xe0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000cea:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <SystemInit+0xe0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000cf0:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <SystemInit+0xe0>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	492c      	ldr	r1, [pc, #176]	; (8000da8 <SystemInit+0xe0>)
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <SystemInit+0xe4>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <SystemInit+0xe0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000d02:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <SystemInit+0xe0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <SystemInit+0xe0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <SystemInit+0xe0>)
 8000d10:	4a27      	ldr	r2, [pc, #156]	; (8000db0 <SystemInit+0xe8>)
 8000d12:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000d14:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <SystemInit+0xe0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000d1a:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <SystemInit+0xe0>)
 8000d1c:	4a24      	ldr	r2, [pc, #144]	; (8000db0 <SystemInit+0xe8>)
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000d20:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <SystemInit+0xe0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000d26:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <SystemInit+0xe0>)
 8000d28:	4a21      	ldr	r2, [pc, #132]	; (8000db0 <SystemInit+0xe8>)
 8000d2a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000d2c:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <SystemInit+0xe0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <SystemInit+0xe0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1c      	ldr	r2, [pc, #112]	; (8000da8 <SystemInit+0xe0>)
 8000d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <SystemInit+0xe0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <SystemInit+0xdc>)
 8000d46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d4a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <SystemInit+0xec>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000d54:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000d5c:	d003      	beq.n	8000d66 <SystemInit+0x9e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000d64:	d117      	bne.n	8000d96 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <SystemInit+0xec>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d005      	beq.n	8000d7e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <SystemInit+0xec>)
 8000d74:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <SystemInit+0xf0>)
 8000d76:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <SystemInit+0xec>)
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <SystemInit+0xf4>)
 8000d7c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <SystemInit+0xec>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <SystemInit+0xec>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <SystemInit+0xec>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <SystemInit+0xec>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	61d3      	str	r3, [r2, #28]
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00
 8000da8:	44020c00 	.word	0x44020c00
 8000dac:	eae2eae3 	.word	0xeae2eae3
 8000db0:	01010280 	.word	0x01010280
 8000db4:	40022000 	.word	0x40022000
 8000db8:	08192a3b 	.word	0x08192a3b
 8000dbc:	4c5d6e7f 	.word	0x4c5d6e7f

08000dc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000dc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dc6:	e003      	b.n	8000dd0 <LoopCopyDataInit>

08000dc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000dcc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dce:	3104      	adds	r1, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000dd0:	480b      	ldr	r0, [pc, #44]	; (8000e00 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000dd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000dd8:	d3f6      	bcc.n	8000dc8 <CopyDataInit>
	ldr	r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ddc:	e002      	b.n	8000de4 <LoopFillZerobss>

08000dde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000dde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000de0:	f842 3b04 	str.w	r3, [r2], #4

08000de4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <LoopForever+0x16>)
	cmp	r2, r3
 8000de6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000de8:	d3f9      	bcc.n	8000dde <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dea:	f7ff ff6d 	bl	8000cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f008 fa23 	bl	8009238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df2:	f7ff fc65 	bl	80006c0 <main>

08000df6 <LoopForever>:

LoopForever:
    b LoopForever
 8000df6:	e7fe      	b.n	8000df6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000df8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000dfc:	08009c30 	.word	0x08009c30
	ldr	r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e04:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8000e08:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8000e0c:	200002f0 	.word	0x200002f0

08000e10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC1_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 f947 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000e1e:	f001 ff19 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8000e22:	4602      	mov	r2, r0
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_Init+0x40>)
 8000e26:	6a1b      	ldr	r3, [r3, #32]
 8000e28:	f003 030f 	and.w	r3, r3, #15
 8000e2c:	490a      	ldr	r1, [pc, #40]	; (8000e58 <HAL_Init+0x44>)
 8000e2e:	5ccb      	ldrb	r3, [r1, r3]
 8000e30:	fa22 f303 	lsr.w	r3, r2, r3
 8000e34:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <HAL_Init+0x48>)
 8000e36:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e38:	200f      	movs	r0, #15
 8000e3a:	f000 f811 	bl	8000e60 <HAL_InitTick>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e002      	b.n	8000e4e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fd87 	bl	800095a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	44020c00 	.word	0x44020c00
 8000e58:	08009b9c 	.word	0x08009b9c
 8000e5c:	20000000 	.word	0x20000000

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_InitTick+0x60>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e021      	b.n	8000eb8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <HAL_InitTick+0x64>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_InitTick+0x60>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f941 	bl	8001112 <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 f90b 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_InitTick+0x68>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	200001a4 	.word	0x200001a4

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200001a4 	.word	0x200001a4

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <__NVIC_EnableIRQ+0x38>)
 8000f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff29 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff40 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff90 	bl	8001000 <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5f 	bl	8000fac <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff33 	bl	8000f70 <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa4 	bl	8001068 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001132:	f7ff fedf 	bl	8000ef4 <HAL_GetTick>
 8001136:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e06b      	b.n	800121a <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d008      	beq.n	8001160 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2220      	movs	r2, #32
 8001152:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e05c      	b.n	800121a <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	695a      	ldr	r2, [r3, #20]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0204 	orr.w	r2, r2, #4
 800116e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2205      	movs	r2, #5
 8001174:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001178:	e020      	b.n	80011bc <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800117a:	f7ff febb 	bl	8000ef4 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b05      	cmp	r3, #5
 8001186:	d919      	bls.n	80011bc <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118c:	f043 0210 	orr.w	r2, r3, #16
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2203      	movs	r2, #3
 8001198:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ac:	2201      	movs	r2, #1
 80011ae:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e02e      	b.n	800121a <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0d7      	beq.n	800117a <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	695a      	ldr	r2, [r3, #20]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0202 	orr.w	r2, r2, #2
 80011d8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2204      	movs	r2, #4
 80011de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80011ea:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d007      	beq.n	8001210 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001204:	2201      	movs	r2, #1
 8001206:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2200      	movs	r2, #0
 800120e:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e019      	b.n	8001268 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d004      	beq.n	800124a <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2220      	movs	r2, #32
 8001244:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00e      	b.n	8001268 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2204      	movs	r2, #4
 800124e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e147      	b.n	8001516 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d106      	bne.n	80012a0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fb64 	bl	8000968 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699a      	ldr	r2, [r3, #24]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0210 	bic.w	r2, r2, #16
 80012ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b0:	f7ff fe20 	bl	8000ef4 <HAL_GetTick>
 80012b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80012b6:	e012      	b.n	80012de <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80012b8:	f7ff fe1c 	bl	8000ef4 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b0a      	cmp	r3, #10
 80012c4:	d90b      	bls.n	80012de <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ca:	f043 0201 	orr.w	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2203      	movs	r2, #3
 80012d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e11b      	b.n	8001516 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d0e5      	beq.n	80012b8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	699a      	ldr	r2, [r3, #24]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0201 	orr.w	r2, r2, #1
 80012fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012fc:	f7ff fdfa 	bl	8000ef4 <HAL_GetTick>
 8001300:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001302:	e012      	b.n	800132a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001304:	f7ff fdf6 	bl	8000ef4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b0a      	cmp	r3, #10
 8001310:	d90b      	bls.n	800132a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001316:	f043 0201 	orr.w	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2203      	movs	r2, #3
 8001322:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0f5      	b.n	8001516 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0e5      	beq.n	8001304 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	699a      	ldr	r2, [r3, #24]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0202 	orr.w	r2, r2, #2
 8001346:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a74      	ldr	r2, [pc, #464]	; (8001520 <HAL_FDCAN_Init+0x2ac>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d103      	bne.n	800135a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001352:	4a74      	ldr	r2, [pc, #464]	; (8001524 <HAL_FDCAN_Init+0x2b0>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7c1b      	ldrb	r3, [r3, #16]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d108      	bne.n	8001374 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001370:	619a      	str	r2, [r3, #24]
 8001372:	e007      	b.n	8001384 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001382:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7c5b      	ldrb	r3, [r3, #17]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d108      	bne.n	800139e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	699a      	ldr	r2, [r3, #24]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800139a:	619a      	str	r2, [r3, #24]
 800139c:	e007      	b.n	80013ae <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	699a      	ldr	r2, [r3, #24]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7c9b      	ldrb	r3, [r3, #18]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d108      	bne.n	80013c8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	699a      	ldr	r2, [r3, #24]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013c4:	619a      	str	r2, [r3, #24]
 80013c6:	e007      	b.n	80013d8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699a      	ldr	r2, [r3, #24]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013d6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699a      	ldr	r2, [r3, #24]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80013fc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0210 	bic.w	r2, r2, #16
 800140c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d108      	bne.n	8001428 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	699a      	ldr	r2, [r3, #24]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0204 	orr.w	r2, r2, #4
 8001424:	619a      	str	r2, [r3, #24]
 8001426:	e02c      	b.n	8001482 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d028      	beq.n	8001482 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d01c      	beq.n	8001472 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	699a      	ldr	r2, [r3, #24]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001446:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	691a      	ldr	r2, [r3, #16]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0210 	orr.w	r2, r2, #16
 8001456:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d110      	bne.n	8001482 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0220 	orr.w	r2, r2, #32
 800146e:	619a      	str	r2, [r3, #24]
 8001470:	e007      	b.n	8001482 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	699a      	ldr	r2, [r3, #24]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 0220 	orr.w	r2, r2, #32
 8001480:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	3b01      	subs	r3, #1
 8001488:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	3b01      	subs	r3, #1
 8001490:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001492:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800149a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80014aa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014ac:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80014b6:	d115      	bne.n	80014e4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	3b01      	subs	r3, #1
 80014c4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014c6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	3b01      	subs	r3, #1
 80014ce:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80014d0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	3b01      	subs	r3, #1
 80014da:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80014e0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014e2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fc12 	bl	8001d24 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	4000a400 	.word	0x4000a400
 8001524:	4000a500 	.word	0x4000a500

08001528 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001538:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d002      	beq.n	8001546 <HAL_FDCAN_ConfigFilter+0x1e>
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d13d      	bne.n	80015c2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d119      	bne.n	8001582 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800155a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001562:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e01d      	b.n	80015be <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	075a      	lsls	r2, r3, #29
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	079a      	lsls	r2, r3, #30
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	4313      	orrs	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4413      	add	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3304      	adds	r3, #4
 80015b6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e006      	b.n	80015d0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c6:	f043 0202 	orr.w	r2, r3, #2
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
  }
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d110      	bne.n	8001612 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2202      	movs	r2, #2
 80015f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e006      	b.n	8001620 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001616:	f043 0204 	orr.w	r2, r3, #4
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
  }
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800162c:	b480      	push	{r7}
 800162e:	b08b      	sub	sp, #44	; 0x2c
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001644:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001646:	7efb      	ldrb	r3, [r7, #27]
 8001648:	2b02      	cmp	r3, #2
 800164a:	f040 80e8 	bne.w	800181e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	2b40      	cmp	r3, #64	; 0x40
 8001652:	d137      	bne.n	80016c4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	2b00      	cmp	r3, #0
 8001662:	d107      	bne.n	8001674 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001668:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0db      	b.n	800182c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167c:	0e1b      	lsrs	r3, r3, #24
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b01      	cmp	r3, #1
 8001684:	d10a      	bne.n	800169c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800168e:	0a5b      	lsrs	r3, r3, #9
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001698:	2301      	movs	r3, #1
 800169a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	4413      	add	r3, r2
 80016ae:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	4613      	mov	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
 80016c2:	e036      	b.n	8001732 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d107      	bne.n	80016e4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0a3      	b.n	800182c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ec:	0e1b      	lsrs	r3, r3, #24
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d10a      	bne.n	800170c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001708:	2301      	movs	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	4613      	mov	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d107      	bne.n	8001756 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0c9b      	lsrs	r3, r3, #18
 800174c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e005      	b.n	8001762 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	3304      	adds	r3, #4
 800177e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	b29a      	uxth	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	0c1b      	lsrs	r3, r3, #16
 8001790:	f003 020f 	and.w	r2, r3, #15
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0e1b      	lsrs	r3, r3, #24
 80017b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	0fda      	lsrs	r2, r3, #31
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	3304      	adds	r3, #4
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
 80017d6:	e00a      	b.n	80017ee <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	441a      	add	r2, r3
 80017de:	6839      	ldr	r1, [r7, #0]
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	440b      	add	r3, r1
 80017e4:	7812      	ldrb	r2, [r2, #0]
 80017e6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	3301      	adds	r3, #1
 80017ec:	623b      	str	r3, [r7, #32]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	4a11      	ldr	r2, [pc, #68]	; (8001838 <HAL_FDCAN_GetRxMessage+0x20c>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
 80017f6:	461a      	mov	r2, r3
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d3ec      	bcc.n	80017d8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2b40      	cmp	r3, #64	; 0x40
 8001802:	d105      	bne.n	8001810 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800180e:	e004      	b.n	800181a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e006      	b.n	800182c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001822:	f043 0208 	orr.w	r2, r3, #8
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
  }
}
 800182c:	4618      	mov	r0, r3
 800182e:	372c      	adds	r7, #44	; 0x2c
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	08009bb4 	.word	0x08009bb4

0800183c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800184e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001850:	7dfb      	ldrb	r3, [r7, #23]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d003      	beq.n	800185e <HAL_FDCAN_ActivateNotification+0x22>
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	2b02      	cmp	r3, #2
 800185a:	f040 80c8 	bne.w	80019ee <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001864:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d03b      	beq.n	80018f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001880:	2b00      	cmp	r3, #0
 8001882:	d004      	beq.n	800188e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d031      	beq.n	80018f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d027      	beq.n	80018f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d01d      	beq.n	80018f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d004      	beq.n	80018ca <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d013      	beq.n	80018f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00c      	beq.n	8001902 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d107      	bne.n	8001902 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f042 0201 	orr.w	r2, r2, #1
 8001900:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d13b      	bne.n	800198e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800191c:	2b00      	cmp	r3, #0
 800191e:	d004      	beq.n	800192a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d131      	bne.n	800198e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001930:	2b00      	cmp	r3, #0
 8001932:	d004      	beq.n	800193e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b00      	cmp	r3, #0
 800193c:	d127      	bne.n	800198e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001944:	2b00      	cmp	r3, #0
 8001946:	d004      	beq.n	8001952 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d11d      	bne.n	800198e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	d113      	bne.n	800198e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800196c:	2b00      	cmp	r3, #0
 800196e:	d004      	beq.n	800197a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00c      	beq.n	800199e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 0202 	orr.w	r2, r2, #2
 800199c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d009      	beq.n	80019bc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e006      	b.n	80019fc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	f043 0202 	orr.w	r2, r3, #2
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
  }
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a16:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a24:	4013      	ands	r3, r2
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a54:	4013      	ands	r3, r2
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a5e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001a62:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6a:	6a3a      	ldr	r2, [r7, #32]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a76:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a7a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a96:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2240      	movs	r2, #64	; 0x40
 8001ab2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f916 	bl	8001ce6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d019      	beq.n	8001af8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d014      	beq.n	8001af8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ad6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001af0:	6939      	ldr	r1, [r7, #16]
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f8d8 	bl	8001ca8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b04:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8a2 	bl	8001c52 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d007      	beq.n	8001b24 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b1a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe fd6c 	bl	80005fc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d007      	beq.n	8001b3a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b30:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001b32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f897 	bl	8001c68 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00c      	beq.n	8001b5e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b56:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f890 	bl	8001c7e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d018      	beq.n	8001b9a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d013      	beq.n	8001b9a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b7a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4013      	ands	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001b92:	68f9      	ldr	r1, [r7, #12]
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f87c 	bl	8001c92 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00c      	beq.n	8001bbe <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f880 	bl	8001cbe <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00c      	beq.n	8001be2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bda:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f878 	bl	8001cd2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00f      	beq.n	8001c0c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00a      	beq.n	8001c0c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bfe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001c1a:	69f9      	ldr	r1, [r7, #28]
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f876 	bl	8001d0e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d009      	beq.n	8001c3c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6a3a      	ldr	r2, [r7, #32]
 8001c2e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f858 	bl	8001cfa <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3730      	adds	r7, #48	; 0x30
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001d2e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d3e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d46:	041a      	lsls	r2, r3, #16
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d64:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6c:	061a      	lsls	r2, r3, #24
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	e005      	b.n	8001db2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3304      	adds	r3, #4
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d3f3      	bcc.n	8001da6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	4000ac00 	.word	0x4000ac00

08001dd0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001dde:	e136      	b.n	800204e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2101      	movs	r1, #1
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	4013      	ands	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8128 	beq.w	8002048 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x38>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b12      	cmp	r3, #18
 8001e06:	d125      	bne.n	8001e54 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	08da      	lsrs	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3208      	adds	r2, #8
 8001e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e14:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	f003 020f 	and.w	r2, r3, #15
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	6979      	ldr	r1, [r7, #20]
 8001e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0203 	and.w	r2, r3, #3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d00b      	beq.n	8001ea8 <HAL_GPIO_Init+0xd8>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d007      	beq.n	8001ea8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e9c:	2b11      	cmp	r3, #17
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b12      	cmp	r3, #18
 8001ea6:	d130      	bne.n	8001f0a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ede:	2201      	movs	r2, #1
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4013      	ands	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	f003 0201 	and.w	r2, r3, #1
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d017      	beq.n	8001f42 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	4013      	ands	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d07c      	beq.n	8002048 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001f4e:	4a47      	ldr	r2, [pc, #284]	; (800206c <HAL_GPIO_Init+0x29c>)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3318      	adds	r3, #24
 8001f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	220f      	movs	r2, #15
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	0a9a      	lsrs	r2, r3, #10
 8001f76:	4b3e      	ldr	r3, [pc, #248]	; (8002070 <HAL_GPIO_Init+0x2a0>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	f002 0203 	and.w	r2, r2, #3
 8001f80:	00d2      	lsls	r2, r2, #3
 8001f82:	4093      	lsls	r3, r2
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001f8a:	4938      	ldr	r1, [pc, #224]	; (800206c <HAL_GPIO_Init+0x29c>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3318      	adds	r3, #24
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001f98:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_GPIO_Init+0x29c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001fbc:	4a2b      	ldr	r2, [pc, #172]	; (800206c <HAL_GPIO_Init+0x29c>)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_GPIO_Init+0x29c>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001fe6:	4a21      	ldr	r2, [pc, #132]	; (800206c <HAL_GPIO_Init+0x29c>)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <HAL_GPIO_Init+0x29c>)
 8001fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002012:	4a16      	ldr	r2, [pc, #88]	; (800206c <HAL_GPIO_Init+0x29c>)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <HAL_GPIO_Init+0x29c>)
 800201c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002020:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	43db      	mvns	r3, r3
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4013      	ands	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002040:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_GPIO_Init+0x29c>)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	3301      	adds	r3, #1
 800204c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	f47f aec1 	bne.w	8001de0 <HAL_GPIO_Init+0x10>
  }
}
 800205e:	bf00      	nop
 8002060:	bf00      	nop
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	44022000 	.word	0x44022000
 8002070:	002f7f7f 	.word	0x002f7f7f

08002074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	f000 bc28 	b.w	80028d8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002088:	4b94      	ldr	r3, [pc, #592]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f003 0318 	and.w	r3, r3, #24
 8002090:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002092:	4b92      	ldr	r3, [pc, #584]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d05b      	beq.n	8002160 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d005      	beq.n	80020ba <HAL_RCC_OscConfig+0x46>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	2b18      	cmp	r3, #24
 80020b2:	d114      	bne.n	80020de <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d111      	bne.n	80020de <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f000 bc08 	b.w	80028d8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80020c8:	4b84      	ldr	r3, [pc, #528]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	041b      	lsls	r3, r3, #16
 80020d6:	4981      	ldr	r1, [pc, #516]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80020dc:	e040      	b.n	8002160 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d023      	beq.n	800212e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020e6:	4b7d      	ldr	r3, [pc, #500]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7c      	ldr	r2, [pc, #496]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe feff 	bl	8000ef4 <HAL_GetTick>
 80020f6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80020fa:	f7fe fefb 	bl	8000ef4 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e3e5      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800210c:	4b73      	ldr	r3, [pc, #460]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002118:	4b70      	ldr	r3, [pc, #448]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	041b      	lsls	r3, r3, #16
 8002126:	496d      	ldr	r1, [pc, #436]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 8002128:	4313      	orrs	r3, r2
 800212a:	618b      	str	r3, [r1, #24]
 800212c:	e018      	b.n	8002160 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800212e:	4b6b      	ldr	r3, [pc, #428]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6a      	ldr	r2, [pc, #424]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 8002134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7fe fedb 	bl	8000ef4 <HAL_GetTick>
 800213e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002142:	f7fe fed7 	bl	8000ef4 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e3c1      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002154:	4b61      	ldr	r3, [pc, #388]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80a0 	beq.w	80022ae <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	2b10      	cmp	r3, #16
 8002172:	d005      	beq.n	8002180 <HAL_RCC_OscConfig+0x10c>
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b18      	cmp	r3, #24
 8002178:	d109      	bne.n	800218e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	f040 8092 	bne.w	80022ae <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e3a4      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x132>
 8002198:	4b50      	ldr	r3, [pc, #320]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a4f      	ldr	r2, [pc, #316]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 800219e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	e058      	b.n	8002258 <HAL_RCC_OscConfig+0x1e4>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d112      	bne.n	80021d4 <HAL_RCC_OscConfig+0x160>
 80021ae:	4b4b      	ldr	r3, [pc, #300]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a4a      	ldr	r2, [pc, #296]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80021b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b48      	ldr	r3, [pc, #288]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a47      	ldr	r2, [pc, #284]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80021c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b45      	ldr	r3, [pc, #276]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a44      	ldr	r2, [pc, #272]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80021cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e041      	b.n	8002258 <HAL_RCC_OscConfig+0x1e4>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021dc:	d112      	bne.n	8002204 <HAL_RCC_OscConfig+0x190>
 80021de:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a3e      	ldr	r2, [pc, #248]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b3c      	ldr	r3, [pc, #240]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a3b      	ldr	r2, [pc, #236]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80021f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b39      	ldr	r3, [pc, #228]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a38      	ldr	r2, [pc, #224]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e029      	b.n	8002258 <HAL_RCC_OscConfig+0x1e4>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800220c:	d112      	bne.n	8002234 <HAL_RCC_OscConfig+0x1c0>
 800220e:	4b33      	ldr	r3, [pc, #204]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a32      	ldr	r2, [pc, #200]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 8002214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b30      	ldr	r3, [pc, #192]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a2f      	ldr	r2, [pc, #188]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 8002220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2c      	ldr	r2, [pc, #176]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e011      	b.n	8002258 <HAL_RCC_OscConfig+0x1e4>
 8002234:	4b29      	ldr	r3, [pc, #164]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a28      	ldr	r2, [pc, #160]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 800223a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a25      	ldr	r2, [pc, #148]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 8002246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b23      	ldr	r3, [pc, #140]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a22      	ldr	r2, [pc, #136]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 8002252:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7fe fe48 	bl	8000ef4 <HAL_GetTick>
 8002264:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002268:	f7fe fe44 	bl	8000ef4 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e32e      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x1f4>
 8002286:	e012      	b.n	80022ae <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe fe34 	bl	8000ef4 <HAL_GetTick>
 800228c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002290:	f7fe fe30 	bl	8000ef4 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e31a      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_RCC_OscConfig+0x268>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 809a 	beq.w	80023f0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x25a>
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	2b18      	cmp	r3, #24
 80022c6:	d149      	bne.n	800235c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d146      	bne.n	800235c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d104      	bne.n	80022e0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e2fe      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
 80022da:	bf00      	nop
 80022dc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d11c      	bne.n	8002320 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80022e6:	4b9a      	ldr	r3, [pc, #616]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0218 	and.w	r2, r3, #24
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d014      	beq.n	8002320 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80022f6:	4b96      	ldr	r3, [pc, #600]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 0218 	bic.w	r2, r3, #24
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	4993      	ldr	r1, [pc, #588]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002308:	f000 fdd0 	bl	8002eac <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800230c:	4b91      	ldr	r3, [pc, #580]	; (8002554 <HAL_RCC_OscConfig+0x4e0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fda5 	bl	8000e60 <HAL_InitTick>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e2db      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe fde8 	bl	8000ef4 <HAL_GetTick>
 8002324:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002328:	f7fe fde4 	bl	8000ef4 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e2ce      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233a:	4b85      	ldr	r3, [pc, #532]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002346:	4b82      	ldr	r3, [pc, #520]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	041b      	lsls	r3, r3, #16
 8002354:	497e      	ldr	r1, [pc, #504]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002356:	4313      	orrs	r3, r2
 8002358:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800235a:	e049      	b.n	80023f0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d02c      	beq.n	80023be <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002364:	4b7a      	ldr	r3, [pc, #488]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 0218 	bic.w	r2, r3, #24
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	4977      	ldr	r1, [pc, #476]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002376:	4b76      	ldr	r3, [pc, #472]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a75      	ldr	r2, [pc, #468]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7fe fdb7 	bl	8000ef4 <HAL_GetTick>
 8002386:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800238a:	f7fe fdb3 	bl	8000ef4 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e29d      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239c:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80023a8:	4b69      	ldr	r3, [pc, #420]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	4966      	ldr	r1, [pc, #408]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	610b      	str	r3, [r1, #16]
 80023bc:	e018      	b.n	80023f0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023be:	4b64      	ldr	r3, [pc, #400]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a63      	ldr	r2, [pc, #396]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe fd93 	bl	8000ef4 <HAL_GetTick>
 80023ce:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80023d2:	f7fe fd8f 	bl	8000ef4 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e279      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e4:	4b5a      	ldr	r3, [pc, #360]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d03c      	beq.n	8002476 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01c      	beq.n	800243e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002404:	4b52      	ldr	r3, [pc, #328]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800240a:	4a51      	ldr	r2, [pc, #324]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 800240c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002410:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe fd6e 	bl	8000ef4 <HAL_GetTick>
 8002418:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800241c:	f7fe fd6a 	bl	8000ef4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e254      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800242e:	4b48      	ldr	r3, [pc, #288]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ef      	beq.n	800241c <HAL_RCC_OscConfig+0x3a8>
 800243c:	e01b      	b.n	8002476 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243e:	4b44      	ldr	r3, [pc, #272]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002444:	4a42      	ldr	r2, [pc, #264]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002446:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800244a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7fe fd51 	bl	8000ef4 <HAL_GetTick>
 8002452:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002456:	f7fe fd4d 	bl	8000ef4 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e237      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002468:	4b39      	ldr	r3, [pc, #228]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 800246a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800246e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1ef      	bne.n	8002456 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80d2 	beq.w	8002628 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002484:	4b34      	ldr	r3, [pc, #208]	; (8002558 <HAL_RCC_OscConfig+0x4e4>)
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d118      	bne.n	80024c2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002490:	4b31      	ldr	r3, [pc, #196]	; (8002558 <HAL_RCC_OscConfig+0x4e4>)
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	4a30      	ldr	r2, [pc, #192]	; (8002558 <HAL_RCC_OscConfig+0x4e4>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249c:	f7fe fd2a 	bl	8000ef4 <HAL_GetTick>
 80024a0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a4:	f7fe fd26 	bl	8000ef4 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e210      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_RCC_OscConfig+0x4e4>)
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d108      	bne.n	80024dc <HAL_RCC_OscConfig+0x468>
 80024ca:	4b21      	ldr	r3, [pc, #132]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 80024cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024d0:	4a1f      	ldr	r2, [pc, #124]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024da:	e074      	b.n	80025c6 <HAL_RCC_OscConfig+0x552>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d118      	bne.n	8002516 <HAL_RCC_OscConfig+0x4a2>
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 80024e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024ea:	4a19      	ldr	r2, [pc, #100]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 80024f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024fa:	4a15      	ldr	r2, [pc, #84]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 80024fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002500:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800250a:	4a11      	ldr	r2, [pc, #68]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 800250c:	f023 0304 	bic.w	r3, r3, #4
 8002510:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002514:	e057      	b.n	80025c6 <HAL_RCC_OscConfig+0x552>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b05      	cmp	r3, #5
 800251c:	d11e      	bne.n	800255c <HAL_RCC_OscConfig+0x4e8>
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002524:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002534:	4a06      	ldr	r2, [pc, #24]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800253a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002544:	4a02      	ldr	r2, [pc, #8]	; (8002550 <HAL_RCC_OscConfig+0x4dc>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800254e:	e03a      	b.n	80025c6 <HAL_RCC_OscConfig+0x552>
 8002550:	44020c00 	.word	0x44020c00
 8002554:	20000004 	.word	0x20000004
 8002558:	44020800 	.word	0x44020800
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b85      	cmp	r3, #133	; 0x85
 8002562:	d118      	bne.n	8002596 <HAL_RCC_OscConfig+0x522>
 8002564:	4ba2      	ldr	r3, [pc, #648]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800256a:	4aa1      	ldr	r2, [pc, #644]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002574:	4b9e      	ldr	r3, [pc, #632]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800257a:	4a9d      	ldr	r2, [pc, #628]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 800257c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002580:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002584:	4b9a      	ldr	r3, [pc, #616]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800258a:	4a99      	ldr	r2, [pc, #612]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002594:	e017      	b.n	80025c6 <HAL_RCC_OscConfig+0x552>
 8002596:	4b96      	ldr	r3, [pc, #600]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800259c:	4a94      	ldr	r2, [pc, #592]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025a6:	4b92      	ldr	r3, [pc, #584]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 80025a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025ac:	4a90      	ldr	r2, [pc, #576]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025b6:	4b8e      	ldr	r3, [pc, #568]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 80025b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025bc:	4a8c      	ldr	r2, [pc, #560]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 80025be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d016      	beq.n	80025fc <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7fe fc91 	bl	8000ef4 <HAL_GetTick>
 80025d2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe fc8d 	bl	8000ef4 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e175      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ec:	4b80      	ldr	r3, [pc, #512]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 80025ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0ed      	beq.n	80025d6 <HAL_RCC_OscConfig+0x562>
 80025fa:	e015      	b.n	8002628 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fc:	f7fe fc7a 	bl	8000ef4 <HAL_GetTick>
 8002600:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002602:	e00a      	b.n	800261a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe fc76 	bl	8000ef4 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e15e      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800261a:	4b75      	ldr	r3, [pc, #468]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 800261c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ed      	bne.n	8002604 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d036      	beq.n	80026a2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	2b00      	cmp	r3, #0
 800263a:	d019      	beq.n	8002670 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800263c:	4b6c      	ldr	r3, [pc, #432]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a6b      	ldr	r2, [pc, #428]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002642:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002646:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe fc54 	bl	8000ef4 <HAL_GetTick>
 800264c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002650:	f7fe fc50 	bl	8000ef4 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e13a      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002662:	4b63      	ldr	r3, [pc, #396]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x5dc>
 800266e:	e018      	b.n	80026a2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002670:	4b5f      	ldr	r3, [pc, #380]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a5e      	ldr	r2, [pc, #376]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800267a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7fe fc3a 	bl	8000ef4 <HAL_GetTick>
 8002680:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002684:	f7fe fc36 	bl	8000ef4 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e120      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002696:	4b56      	ldr	r3, [pc, #344]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8115 	beq.w	80028d6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b18      	cmp	r3, #24
 80026b0:	f000 80af 	beq.w	8002812 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	f040 8086 	bne.w	80027ca <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80026be:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a4b      	ldr	r2, [pc, #300]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 80026c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe fc13 	bl	8000ef4 <HAL_GetTick>
 80026ce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80026d2:	f7fe fc0f 	bl	8000ef4 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0f9      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026e4:	4b42      	ldr	r3, [pc, #264]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80026f0:	4b3f      	ldr	r3, [pc, #252]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026f8:	f023 0303 	bic.w	r3, r3, #3
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002704:	0212      	lsls	r2, r2, #8
 8002706:	430a      	orrs	r2, r1
 8002708:	4939      	ldr	r1, [pc, #228]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 800270a:	4313      	orrs	r3, r2
 800270c:	628b      	str	r3, [r1, #40]	; 0x28
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002712:	3b01      	subs	r3, #1
 8002714:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271c:	3b01      	subs	r3, #1
 800271e:	025b      	lsls	r3, r3, #9
 8002720:	b29b      	uxth	r3, r3
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002728:	3b01      	subs	r3, #1
 800272a:	041b      	lsls	r3, r3, #16
 800272c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	3b01      	subs	r3, #1
 8002738:	061b      	lsls	r3, r3, #24
 800273a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800273e:	492c      	ldr	r1, [pc, #176]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 800274a:	f023 0310 	bic.w	r3, r3, #16
 800274e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002754:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800275a:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 800275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275e:	4a24      	ldr	r2, [pc, #144]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002760:	f043 0310 	orr.w	r3, r3, #16
 8002764:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002766:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	f023 020c 	bic.w	r2, r3, #12
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	491f      	ldr	r1, [pc, #124]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002774:	4313      	orrs	r3, r2
 8002776:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	f023 0220 	bic.w	r2, r3, #32
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002784:	491a      	ldr	r1, [pc, #104]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002786:	4313      	orrs	r3, r2
 8002788:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002794:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a15      	ldr	r2, [pc, #84]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 800279c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe fba7 	bl	8000ef4 <HAL_GetTick>
 80027a6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80027aa:	f7fe fba3 	bl	8000ef4 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e08d      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x736>
 80027c8:	e085      	b.n	80028d6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a08      	ldr	r2, [pc, #32]	; (80027f0 <HAL_RCC_OscConfig+0x77c>)
 80027d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fb8d 	bl	8000ef4 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80027de:	f7fe fb89 	bl	8000ef4 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d903      	bls.n	80027f4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e073      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
 80027f0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80027f4:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <HAL_RCC_OscConfig+0x86c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1ee      	bne.n	80027de <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002800:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <HAL_RCC_OscConfig+0x86c>)
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	4a36      	ldr	r2, [pc, #216]	; (80028e0 <HAL_RCC_OscConfig+0x86c>)
 8002806:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800280a:	f023 0303 	bic.w	r3, r3, #3
 800280e:	6293      	str	r3, [r2, #40]	; 0x28
 8002810:	e061      	b.n	80028d6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002812:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <HAL_RCC_OscConfig+0x86c>)
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002818:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <HAL_RCC_OscConfig+0x86c>)
 800281a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	2b01      	cmp	r3, #1
 8002824:	d031      	beq.n	800288a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f003 0203 	and.w	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d12a      	bne.n	800288a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d122      	bne.n	800288a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d11a      	bne.n	800288a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	0a5b      	lsrs	r3, r3, #9
 8002858:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d111      	bne.n	800288a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002872:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d108      	bne.n	800288a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	0e1b      	lsrs	r3, r3, #24
 800287c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d001      	beq.n	800288e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e024      	b.n	80028d8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_RCC_OscConfig+0x86c>)
 8002890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800289c:	429a      	cmp	r2, r3
 800289e:	d01a      	beq.n	80028d6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_RCC_OscConfig+0x86c>)
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <HAL_RCC_OscConfig+0x86c>)
 80028a6:	f023 0310 	bic.w	r3, r3, #16
 80028aa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fb22 	bl	8000ef4 <HAL_GetTick>
 80028b0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80028b2:	bf00      	nop
 80028b4:	f7fe fb1e 	bl	8000ef4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	4293      	cmp	r3, r2
 80028be:	d0f9      	beq.n	80028b4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c4:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <HAL_RCC_OscConfig+0x86c>)
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_RCC_OscConfig+0x86c>)
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_RCC_OscConfig+0x86c>)
 80028d0:	f043 0310 	orr.w	r3, r3, #16
 80028d4:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	44020c00 	.word	0x44020c00

080028e4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e19e      	b.n	8002c36 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b83      	ldr	r3, [pc, #524]	; (8002b08 <HAL_RCC_ClockConfig+0x224>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d910      	bls.n	8002928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b80      	ldr	r3, [pc, #512]	; (8002b08 <HAL_RCC_ClockConfig+0x224>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 020f 	bic.w	r2, r3, #15
 800290e:	497e      	ldr	r1, [pc, #504]	; (8002b08 <HAL_RCC_ClockConfig+0x224>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b7c      	ldr	r3, [pc, #496]	; (8002b08 <HAL_RCC_ClockConfig+0x224>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e186      	b.n	8002c36 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	d012      	beq.n	800295a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	4b74      	ldr	r3, [pc, #464]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002942:	429a      	cmp	r2, r3
 8002944:	d909      	bls.n	800295a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002946:	4b71      	ldr	r3, [pc, #452]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	496d      	ldr	r1, [pc, #436]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 8002956:	4313      	orrs	r3, r2
 8002958:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d012      	beq.n	800298c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	4b68      	ldr	r3, [pc, #416]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002974:	429a      	cmp	r2, r3
 8002976:	d909      	bls.n	800298c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002978:	4b64      	ldr	r3, [pc, #400]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	4961      	ldr	r1, [pc, #388]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 8002988:	4313      	orrs	r3, r2
 800298a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d010      	beq.n	80029ba <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	4b5b      	ldr	r3, [pc, #364]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d908      	bls.n	80029ba <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80029a8:	4b58      	ldr	r3, [pc, #352]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4955      	ldr	r1, [pc, #340]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d010      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	4b50      	ldr	r3, [pc, #320]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d908      	bls.n	80029e8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80029d6:	4b4d      	ldr	r3, [pc, #308]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f023 020f 	bic.w	r2, r3, #15
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	494a      	ldr	r1, [pc, #296]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8093 	beq.w	8002b1c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80029fe:	4b43      	ldr	r3, [pc, #268]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d121      	bne.n	8002a4e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e113      	b.n	8002c36 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d115      	bne.n	8002a4e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e107      	b.n	8002c36 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002a2e:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0fb      	b.n	8002c36 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a3e:	4b33      	ldr	r3, [pc, #204]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e0f3      	b.n	8002c36 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002a4e:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f023 0203 	bic.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	492c      	ldr	r1, [pc, #176]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a60:	f7fe fa48 	bl	8000ef4 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d112      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a70:	f7fe fa40 	bl	8000ef4 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e0d7      	b.n	8002c36 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a86:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 0318 	and.w	r3, r3, #24
 8002a8e:	2b18      	cmp	r3, #24
 8002a90:	d1ee      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x18c>
 8002a92:	e043      	b.n	8002b1c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d112      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9e:	f7fe fa29 	bl	8000ef4 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e0c0      	b.n	8002c36 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab4:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f003 0318 	and.w	r3, r3, #24
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d1ee      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x1ba>
 8002ac0:	e02c      	b.n	8002b1c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d122      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002acc:	f7fe fa12 	bl	8000ef4 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e0a9      	b.n	8002c36 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <HAL_RCC_ClockConfig+0x228>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f003 0318 	and.w	r3, r3, #24
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d1ee      	bne.n	8002acc <HAL_RCC_ClockConfig+0x1e8>
 8002aee:	e015      	b.n	8002b1c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7fe fa00 	bl	8000ef4 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d906      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e097      	b.n	8002c36 <HAL_RCC_ClockConfig+0x352>
 8002b06:	bf00      	nop
 8002b08:	40022000 	.word	0x40022000
 8002b0c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b10:	4b4b      	ldr	r3, [pc, #300]	; (8002c40 <HAL_RCC_ClockConfig+0x35c>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f003 0318 	and.w	r3, r3, #24
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1e9      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d010      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	4b44      	ldr	r3, [pc, #272]	; (8002c40 <HAL_RCC_ClockConfig+0x35c>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d208      	bcs.n	8002b4a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002b38:	4b41      	ldr	r3, [pc, #260]	; (8002c40 <HAL_RCC_ClockConfig+0x35c>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f023 020f 	bic.w	r2, r3, #15
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	493e      	ldr	r1, [pc, #248]	; (8002c40 <HAL_RCC_ClockConfig+0x35c>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4a:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <HAL_RCC_ClockConfig+0x360>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d210      	bcs.n	8002b7a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b58:	4b3a      	ldr	r3, [pc, #232]	; (8002c44 <HAL_RCC_ClockConfig+0x360>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 020f 	bic.w	r2, r3, #15
 8002b60:	4938      	ldr	r1, [pc, #224]	; (8002c44 <HAL_RCC_ClockConfig+0x360>)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b68:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <HAL_RCC_ClockConfig+0x360>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e05d      	b.n	8002c36 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d010      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <HAL_RCC_ClockConfig+0x35c>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d208      	bcs.n	8002ba8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002b96:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <HAL_RCC_ClockConfig+0x35c>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4927      	ldr	r1, [pc, #156]	; (8002c40 <HAL_RCC_ClockConfig+0x35c>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d012      	beq.n	8002bda <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <HAL_RCC_ClockConfig+0x35c>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d209      	bcs.n	8002bda <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <HAL_RCC_ClockConfig+0x35c>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	491a      	ldr	r1, [pc, #104]	; (8002c40 <HAL_RCC_ClockConfig+0x35c>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d012      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <HAL_RCC_ClockConfig+0x35c>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d209      	bcs.n	8002c0c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_RCC_ClockConfig+0x35c>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	490e      	ldr	r1, [pc, #56]	; (8002c40 <HAL_RCC_ClockConfig+0x35c>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c0c:	f000 f822 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_ClockConfig+0x35c>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	490b      	ldr	r1, [pc, #44]	; (8002c48 <HAL_RCC_ClockConfig+0x364>)
 8002c1c:	5ccb      	ldrb	r3, [r1, r3]
 8002c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x368>)
 8002c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_RCC_ClockConfig+0x36c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe f918 	bl	8000e60 <HAL_InitTick>
 8002c30:	4603      	mov	r3, r0
 8002c32:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002c34:	7afb      	ldrb	r3, [r7, #11]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	44020c00 	.word	0x44020c00
 8002c44:	40022000 	.word	0x40022000
 8002c48:	08009b9c 	.word	0x08009b9c
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	20000004 	.word	0x20000004

08002c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002c5a:	4b8c      	ldr	r3, [pc, #560]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 0318 	and.w	r3, r3, #24
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d102      	bne.n	8002c6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002c66:	4b8a      	ldr	r3, [pc, #552]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	e107      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c6c:	4b87      	ldr	r3, [pc, #540]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f003 0318 	and.w	r3, r3, #24
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d112      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002c78:	4b84      	ldr	r3, [pc, #528]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d009      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002c84:	4b81      	ldr	r3, [pc, #516]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	08db      	lsrs	r3, r3, #3
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	4a81      	ldr	r2, [pc, #516]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	e0f1      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002c98:	4b7e      	ldr	r3, [pc, #504]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	e0ee      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c9e:	4b7b      	ldr	r3, [pc, #492]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 0318 	and.w	r3, r3, #24
 8002ca6:	2b10      	cmp	r3, #16
 8002ca8:	d102      	bne.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002caa:	4b7b      	ldr	r3, [pc, #492]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x244>)
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	e0e5      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb0:	4b76      	ldr	r3, [pc, #472]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	f003 0318 	and.w	r3, r3, #24
 8002cb8:	2b18      	cmp	r3, #24
 8002cba:	f040 80dd 	bne.w	8002e78 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002cbe:	4b73      	ldr	r3, [pc, #460]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002cc8:	4b70      	ldr	r3, [pc, #448]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002cd4:	4b6d      	ldr	r3, [pc, #436]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002ce0:	4b6a      	ldr	r3, [pc, #424]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002ce4:	08db      	lsrs	r3, r3, #3
 8002ce6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	fb02 f303 	mul.w	r3, r2, r3
 8002cf0:	ee07 3a90 	vmov	s15, r3
 8002cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80b7 	beq.w	8002e72 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0xbe>
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d056      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0x16a>
 8002d10:	e077      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002d12:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d02d      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d1e:	4b5b      	ldr	r3, [pc, #364]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	08db      	lsrs	r3, r3, #3
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	4a5a      	ldr	r2, [pc, #360]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	ee07 3a90 	vmov	s15, r3
 8002d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d48:	4b50      	ldr	r3, [pc, #320]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d50:	ee07 3a90 	vmov	s15, r3
 8002d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d58:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d5c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002e9c <HAL_RCC_GetSysClockFreq+0x248>
 8002d60:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d74:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002d78:	e065      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	ee07 3a90 	vmov	s15, r3
 8002d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d84:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002ea0 <HAL_RCC_GetSysClockFreq+0x24c>
 8002d88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d8c:	4b3f      	ldr	r3, [pc, #252]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d94:	ee07 3a90 	vmov	s15, r3
 8002d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002da0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002e9c <HAL_RCC_GetSysClockFreq+0x248>
 8002da4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002da8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002db0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002dbc:	e043      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc8:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002ea4 <HAL_RCC_GetSysClockFreq+0x250>
 8002dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd0:	4b2e      	ldr	r3, [pc, #184]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002de0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002de4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002e9c <HAL_RCC_GetSysClockFreq+0x248>
 8002de8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfc:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002e00:	e021      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	ee07 3a90 	vmov	s15, r3
 8002e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0c:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ea8 <HAL_RCC_GetSysClockFreq+0x254>
 8002e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e14:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e24:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e28:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002e9c <HAL_RCC_GetSysClockFreq+0x248>
 8002e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e40:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002e44:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002e46:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4a:	0a5b      	lsrs	r3, r3, #9
 8002e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e50:	3301      	adds	r3, #1
 8002e52:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	ee07 3a90 	vmov	s15, r3
 8002e5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e5e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e6a:	ee17 3a90 	vmov	r3, s15
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	e004      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	e001      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e7a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3724      	adds	r7, #36	; 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	44020c00 	.word	0x44020c00
 8002e90:	003d0900 	.word	0x003d0900
 8002e94:	03d09000 	.word	0x03d09000
 8002e98:	017d7840 	.word	0x017d7840
 8002e9c:	46000000 	.word	0x46000000
 8002ea0:	4c742400 	.word	0x4c742400
 8002ea4:	4bbebc20 	.word	0x4bbebc20
 8002ea8:	4a742400 	.word	0x4a742400

08002eac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002eb0:	f7ff fed0 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002eba:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002ebe:	4907      	ldr	r1, [pc, #28]	; (8002edc <HAL_RCC_GetHCLKFreq+0x30>)
 8002ec0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002ec2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	4a05      	ldr	r2, [pc, #20]	; (8002ee0 <HAL_RCC_GetHCLKFreq+0x34>)
 8002ecc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <HAL_RCC_GetHCLKFreq+0x34>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	44020c00 	.word	0x44020c00
 8002edc:	08009b9c 	.word	0x08009b9c
 8002ee0:	20000000 	.word	0x20000000

08002ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002ee8:	f7ff ffe0 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4904      	ldr	r1, [pc, #16]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	44020c00 	.word	0x44020c00
 8002f0c:	08009bac 	.word	0x08009bac

08002f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002f14:	f7ff ffca 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	0a1b      	lsrs	r3, r3, #8
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	4904      	ldr	r1, [pc, #16]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f26:	5ccb      	ldrb	r3, [r1, r3]
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	44020c00 	.word	0x44020c00
 8002f38:	08009bac 	.word	0x08009bac

08002f3c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002f40:	f7ff ffb4 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	0b1b      	lsrs	r3, r3, #12
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4904      	ldr	r1, [pc, #16]	; (8002f64 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	44020c00 	.word	0x44020c00
 8002f64:	08009bac 	.word	0x08009bac

08002f68 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f6c:	b0d6      	sub	sp, #344	; 0x158
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f80:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002f8c:	2500      	movs	r5, #0
 8002f8e:	ea54 0305 	orrs.w	r3, r4, r5
 8002f92:	d00b      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002f94:	4bcd      	ldr	r3, [pc, #820]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f9a:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8002f9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	4ac9      	ldr	r2, [pc, #804]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fac:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f002 0801 	and.w	r8, r2, #1
 8002fb8:	f04f 0900 	mov.w	r9, #0
 8002fbc:	ea58 0309 	orrs.w	r3, r8, r9
 8002fc0:	d042      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002fc2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d823      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002fcc:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	0800301d 	.word	0x0800301d
 8002fd8:	08002fed 	.word	0x08002fed
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	0800301d 	.word	0x0800301d
 8002fe4:	0800301d 	.word	0x0800301d
 8002fe8:	0800301d 	.word	0x0800301d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f004 fe62 	bl	8007cbc <RCCEx_PLL2_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 8002ffe:	e00e      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003000:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003004:	3330      	adds	r3, #48	; 0x30
 8003006:	4618      	mov	r0, r3
 8003008:	f004 fef0 	bl	8007dec <RCCEx_PLL3_Config>
 800300c:	4603      	mov	r3, r0
 800300e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 8003012:	e004      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 800301a:	e000      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800301c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800301e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10c      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003026:	4ba9      	ldr	r3, [pc, #676]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800302c:	f023 0107 	bic.w	r1, r3, #7
 8003030:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003036:	4aa5      	ldr	r2, [pc, #660]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003038:	430b      	orrs	r3, r1
 800303a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800303e:	e003      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003044:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003048:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	f002 0a02 	and.w	sl, r2, #2
 8003054:	f04f 0b00 	mov.w	fp, #0
 8003058:	ea5a 030b 	orrs.w	r3, sl, fp
 800305c:	f000 8088 	beq.w	8003170 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003060:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003066:	2b28      	cmp	r3, #40	; 0x28
 8003068:	d868      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800306a:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003070:	08003145 	.word	0x08003145
 8003074:	0800313d 	.word	0x0800313d
 8003078:	0800313d 	.word	0x0800313d
 800307c:	0800313d 	.word	0x0800313d
 8003080:	0800313d 	.word	0x0800313d
 8003084:	0800313d 	.word	0x0800313d
 8003088:	0800313d 	.word	0x0800313d
 800308c:	0800313d 	.word	0x0800313d
 8003090:	08003115 	.word	0x08003115
 8003094:	0800313d 	.word	0x0800313d
 8003098:	0800313d 	.word	0x0800313d
 800309c:	0800313d 	.word	0x0800313d
 80030a0:	0800313d 	.word	0x0800313d
 80030a4:	0800313d 	.word	0x0800313d
 80030a8:	0800313d 	.word	0x0800313d
 80030ac:	0800313d 	.word	0x0800313d
 80030b0:	08003129 	.word	0x08003129
 80030b4:	0800313d 	.word	0x0800313d
 80030b8:	0800313d 	.word	0x0800313d
 80030bc:	0800313d 	.word	0x0800313d
 80030c0:	0800313d 	.word	0x0800313d
 80030c4:	0800313d 	.word	0x0800313d
 80030c8:	0800313d 	.word	0x0800313d
 80030cc:	0800313d 	.word	0x0800313d
 80030d0:	08003145 	.word	0x08003145
 80030d4:	0800313d 	.word	0x0800313d
 80030d8:	0800313d 	.word	0x0800313d
 80030dc:	0800313d 	.word	0x0800313d
 80030e0:	0800313d 	.word	0x0800313d
 80030e4:	0800313d 	.word	0x0800313d
 80030e8:	0800313d 	.word	0x0800313d
 80030ec:	0800313d 	.word	0x0800313d
 80030f0:	08003145 	.word	0x08003145
 80030f4:	0800313d 	.word	0x0800313d
 80030f8:	0800313d 	.word	0x0800313d
 80030fc:	0800313d 	.word	0x0800313d
 8003100:	0800313d 	.word	0x0800313d
 8003104:	0800313d 	.word	0x0800313d
 8003108:	0800313d 	.word	0x0800313d
 800310c:	0800313d 	.word	0x0800313d
 8003110:	08003145 	.word	0x08003145
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003114:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003118:	3308      	adds	r3, #8
 800311a:	4618      	mov	r0, r3
 800311c:	f004 fdce 	bl	8007cbc <RCCEx_PLL2_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 8003126:	e00e      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003128:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800312c:	3330      	adds	r3, #48	; 0x30
 800312e:	4618      	mov	r0, r3
 8003130:	f004 fe5c 	bl	8007dec <RCCEx_PLL3_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 800313a:	e004      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003142:	e000      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003146:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10c      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800314e:	4b5f      	ldr	r3, [pc, #380]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003154:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003158:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800315c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315e:	4a5b      	ldr	r2, [pc, #364]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003160:	430b      	orrs	r3, r1
 8003162:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003166:	e003      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003168:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800316c:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003170:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	f002 0304 	and.w	r3, r2, #4
 800317c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003180:	2300      	movs	r3, #0
 8003182:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003186:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 800318a:	460b      	mov	r3, r1
 800318c:	4313      	orrs	r3, r2
 800318e:	d04e      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003190:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003196:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800319a:	d02c      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800319c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80031a0:	d825      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x286>
 80031a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a6:	d028      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80031a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ac:	d81f      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x286>
 80031ae:	2bc0      	cmp	r3, #192	; 0xc0
 80031b0:	d025      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x296>
 80031b2:	2bc0      	cmp	r3, #192	; 0xc0
 80031b4:	d81b      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x286>
 80031b6:	2b80      	cmp	r3, #128	; 0x80
 80031b8:	d00f      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x272>
 80031ba:	2b80      	cmp	r3, #128	; 0x80
 80031bc:	d817      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x286>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01f      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d113      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031c6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80031ca:	3308      	adds	r3, #8
 80031cc:	4618      	mov	r0, r3
 80031ce:	f004 fd75 	bl	8007cbc <RCCEx_PLL2_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 80031d8:	e014      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031da:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80031de:	3330      	adds	r3, #48	; 0x30
 80031e0:	4618      	mov	r0, r3
 80031e2:	f004 fe03 	bl	8007dec <RCCEx_PLL3_Config>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 80031ec:	e00a      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80031f4:	e006      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80031f6:	bf00      	nop
 80031f8:	e004      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80031fa:	bf00      	nop
 80031fc:	e002      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80031fe:	bf00      	nop
 8003200:	e000      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003204:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10c      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800320c:	4b2f      	ldr	r3, [pc, #188]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800320e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003212:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003216:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800321a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321c:	4a2b      	ldr	r2, [pc, #172]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800321e:	430b      	orrs	r3, r1
 8003220:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003224:	e003      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003226:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800322a:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800322e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003236:	f002 0308 	and.w	r3, r2, #8
 800323a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800323e:	2300      	movs	r3, #0
 8003240:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003244:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8003248:	460b      	mov	r3, r1
 800324a:	4313      	orrs	r3, r2
 800324c:	d056      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800324e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003254:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003258:	d031      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x356>
 800325a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800325e:	d82a      	bhi.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003264:	d02d      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326a:	d824      	bhi.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800326c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003270:	d029      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003272:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003276:	d81e      	bhi.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327c:	d011      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800327e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003282:	d818      	bhi.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d023      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328c:	d113      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800328e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003292:	3308      	adds	r3, #8
 8003294:	4618      	mov	r0, r3
 8003296:	f004 fd11 	bl	8007cbc <RCCEx_PLL2_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 80032a0:	e017      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032a2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80032a6:	3330      	adds	r3, #48	; 0x30
 80032a8:	4618      	mov	r0, r3
 80032aa:	f004 fd9f 	bl	8007dec <RCCEx_PLL3_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 80032b4:	e00d      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80032bc:	e009      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80032be:	bf00      	nop
 80032c0:	e007      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80032c2:	bf00      	nop
 80032c4:	e005      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80032c6:	bf00      	nop
 80032c8:	e003      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80032ca:	bf00      	nop
 80032cc:	44020c00 	.word	0x44020c00
        break;
 80032d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d2:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80032da:	4bbb      	ldr	r3, [pc, #748]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80032dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80032e0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80032e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80032e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ea:	4ab7      	ldr	r2, [pc, #732]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80032ec:	430b      	orrs	r3, r1
 80032ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80032f2:	e003      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f4:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80032f8:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003304:	f002 0310 	and.w	r3, r2, #16
 8003308:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800330c:	2300      	movs	r3, #0
 800330e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003312:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8003316:	460b      	mov	r3, r1
 8003318:	4313      	orrs	r3, r2
 800331a:	d053      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800331c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003322:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003326:	d031      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003328:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800332c:	d82a      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800332e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003332:	d02d      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003338:	d824      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800333a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800333e:	d029      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003340:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003344:	d81e      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334a:	d011      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800334c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003350:	d818      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d020      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335a:	d113      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800335c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003360:	3308      	adds	r3, #8
 8003362:	4618      	mov	r0, r3
 8003364:	f004 fcaa 	bl	8007cbc <RCCEx_PLL2_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 800336e:	e014      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003370:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003374:	3330      	adds	r3, #48	; 0x30
 8003376:	4618      	mov	r0, r3
 8003378:	f004 fd38 	bl	8007dec <RCCEx_PLL3_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 8003382:	e00a      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 800338a:	e006      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800338c:	bf00      	nop
 800338e:	e004      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003390:	bf00      	nop
 8003392:	e002      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003394:	bf00      	nop
 8003396:	e000      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10c      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80033a2:	4b89      	ldr	r3, [pc, #548]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80033a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033a8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80033ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80033b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b2:	4a85      	ldr	r2, [pc, #532]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80033b4:	430b      	orrs	r3, r1
 80033b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80033ba:	e003      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80033c0:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	f002 0320 	and.w	r3, r2, #32
 80033d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80033d4:	2300      	movs	r3, #0
 80033d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80033da:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80033de:	460b      	mov	r3, r1
 80033e0:	4313      	orrs	r3, r2
 80033e2:	d053      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80033e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80033ee:	d031      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80033f0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80033f4:	d82a      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80033f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033fa:	d02d      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80033fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003400:	d824      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003402:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003406:	d029      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003408:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800340c:	d81e      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800340e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003412:	d011      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d818      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d020      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800341e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003422:	d113      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003424:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003428:	3308      	adds	r3, #8
 800342a:	4618      	mov	r0, r3
 800342c:	f004 fc46 	bl	8007cbc <RCCEx_PLL2_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 8003436:	e014      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003438:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800343c:	3330      	adds	r3, #48	; 0x30
 800343e:	4618      	mov	r0, r3
 8003440:	f004 fcd4 	bl	8007dec <RCCEx_PLL3_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 800344a:	e00a      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003452:	e006      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003454:	bf00      	nop
 8003456:	e004      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003458:	bf00      	nop
 800345a:	e002      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800345c:	bf00      	nop
 800345e:	e000      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003462:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10c      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800346a:	4b57      	ldr	r3, [pc, #348]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800346c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003470:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8003474:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	4a53      	ldr	r2, [pc, #332]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800347c:	430b      	orrs	r3, r1
 800347e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003482:	e003      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003484:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003488:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800348c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003498:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80034a2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 80034a6:	460b      	mov	r3, r1
 80034a8:	4313      	orrs	r3, r2
 80034aa:	d053      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80034ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80034b6:	d031      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80034b8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80034bc:	d82a      	bhi.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80034be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c2:	d02d      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80034c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c8:	d824      	bhi.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80034ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034ce:	d029      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80034d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034d4:	d81e      	bhi.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80034d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034da:	d011      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80034dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034e0:	d818      	bhi.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d020      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034ea:	d113      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80034f0:	3308      	adds	r3, #8
 80034f2:	4618      	mov	r0, r3
 80034f4:	f004 fbe2 	bl	8007cbc <RCCEx_PLL2_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 80034fe:	e014      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003500:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003504:	3330      	adds	r3, #48	; 0x30
 8003506:	4618      	mov	r0, r3
 8003508:	f004 fc70 	bl	8007dec <RCCEx_PLL3_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 8003512:	e00a      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 800351a:	e006      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800351c:	bf00      	nop
 800351e:	e004      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003520:	bf00      	nop
 8003522:	e002      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003524:	bf00      	nop
 8003526:	e000      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800352a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10c      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003532:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003534:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003538:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 800353c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003542:	4a21      	ldr	r2, [pc, #132]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003544:	430b      	orrs	r3, r1
 8003546:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800354a:	e003      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354c:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003550:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003554:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003560:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800356a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800356e:	460b      	mov	r3, r1
 8003570:	4313      	orrs	r3, r2
 8003572:	d055      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003574:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800357a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800357e:	d033      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003580:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003584:	d82c      	bhi.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003586:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800358a:	d02f      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x684>
 800358c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003590:	d826      	bhi.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003592:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003596:	d02b      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003598:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800359c:	d820      	bhi.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800359e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a2:	d013      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80035a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a8:	d81a      	bhi.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d022      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80035ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035b2:	d115      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80035b8:	3308      	adds	r3, #8
 80035ba:	4618      	mov	r0, r3
 80035bc:	f004 fb7e 	bl	8007cbc <RCCEx_PLL2_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 80035c6:	e016      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80035c8:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80035d0:	3330      	adds	r3, #48	; 0x30
 80035d2:	4618      	mov	r0, r3
 80035d4:	f004 fc0a 	bl	8007dec <RCCEx_PLL3_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 80035de:	e00a      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80035e6:	e006      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80035e8:	bf00      	nop
 80035ea:	e004      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80035ec:	bf00      	nop
 80035ee:	e002      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80035f0:	bf00      	nop
 80035f2:	e000      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80035f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80035fe:	4bbb      	ldr	r3, [pc, #748]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003600:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003604:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003608:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800360c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800360e:	4ab7      	ldr	r2, [pc, #732]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003610:	430b      	orrs	r3, r1
 8003612:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003616:	e003      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003618:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800361c:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003620:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800362c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003630:	2300      	movs	r3, #0
 8003632:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003636:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800363a:	460b      	mov	r3, r1
 800363c:	4313      	orrs	r3, r2
 800363e:	d053      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003640:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003646:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800364a:	d031      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800364c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003650:	d82a      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003652:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003656:	d02d      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003658:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800365c:	d824      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800365e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003662:	d029      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003664:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003668:	d81e      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800366a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800366e:	d011      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003674:	d818      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d020      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x754>
 800367a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800367e:	d113      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003680:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003684:	3308      	adds	r3, #8
 8003686:	4618      	mov	r0, r3
 8003688:	f004 fb18 	bl	8007cbc <RCCEx_PLL2_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 8003692:	e014      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003694:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003698:	3330      	adds	r3, #48	; 0x30
 800369a:	4618      	mov	r0, r3
 800369c:	f004 fba6 	bl	8007dec <RCCEx_PLL3_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 80036a6:	e00a      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80036ae:	e006      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80036b0:	bf00      	nop
 80036b2:	e004      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80036b4:	bf00      	nop
 80036b6:	e002      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80036b8:	bf00      	nop
 80036ba:	e000      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80036bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036be:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80036c6:	4b89      	ldr	r3, [pc, #548]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80036c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80036cc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80036d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80036d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036d6:	4a85      	ldr	r2, [pc, #532]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80036de:	e003      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e0:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80036e4:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80036e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80036f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80036f8:	2300      	movs	r3, #0
 80036fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036fe:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003702:	460b      	mov	r3, r1
 8003704:	4313      	orrs	r3, r2
 8003706:	d055      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003708:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800370c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003710:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003714:	d031      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003716:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800371a:	d82a      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800371c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003720:	d02d      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003726:	d824      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003728:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800372c:	d029      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800372e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003732:	d81e      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003734:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003738:	d011      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800373a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800373e:	d818      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d020      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003748:	d113      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800374a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800374e:	3308      	adds	r3, #8
 8003750:	4618      	mov	r0, r3
 8003752:	f004 fab3 	bl	8007cbc <RCCEx_PLL2_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 800375c:	e014      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800375e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003762:	3330      	adds	r3, #48	; 0x30
 8003764:	4618      	mov	r0, r3
 8003766:	f004 fb41 	bl	8007dec <RCCEx_PLL3_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 8003770:	e00a      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003778:	e006      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800377a:	bf00      	nop
 800377c:	e004      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800377e:	bf00      	nop
 8003780:	e002      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003788:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10d      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003790:	4b56      	ldr	r3, [pc, #344]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003792:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003796:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 800379a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800379e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a2:	4a52      	ldr	r2, [pc, #328]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80037a4:	430b      	orrs	r3, r1
 80037a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80037aa:	e003      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80037b0:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80037b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80037c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80037ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80037ce:	460b      	mov	r3, r1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	d044      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80037d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80037d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d823      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80037e0:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80037e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e6:	bf00      	nop
 80037e8:	08003831 	.word	0x08003831
 80037ec:	08003801 	.word	0x08003801
 80037f0:	08003815 	.word	0x08003815
 80037f4:	08003831 	.word	0x08003831
 80037f8:	08003831 	.word	0x08003831
 80037fc:	08003831 	.word	0x08003831
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003800:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003804:	3308      	adds	r3, #8
 8003806:	4618      	mov	r0, r3
 8003808:	f004 fa58 	bl	8007cbc <RCCEx_PLL2_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 8003812:	e00e      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003814:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003818:	3330      	adds	r3, #48	; 0x30
 800381a:	4618      	mov	r0, r3
 800381c:	f004 fae6 	bl	8007dec <RCCEx_PLL3_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 8003826:	e004      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 800382e:	e000      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003832:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10d      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800383a:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800383c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003840:	f023 0107 	bic.w	r1, r3, #7
 8003844:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384c:	4a27      	ldr	r2, [pc, #156]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800384e:	430b      	orrs	r3, r1
 8003850:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003854:	e003      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003856:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800385a:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800385e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800386a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800386e:	2300      	movs	r3, #0
 8003870:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003874:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003878:	460b      	mov	r3, r1
 800387a:	4313      	orrs	r3, r2
 800387c:	d04f      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800387e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	2b50      	cmp	r3, #80	; 0x50
 8003888:	d029      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x976>
 800388a:	2b50      	cmp	r3, #80	; 0x50
 800388c:	d823      	bhi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800388e:	2b40      	cmp	r3, #64	; 0x40
 8003890:	d027      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003892:	2b40      	cmp	r3, #64	; 0x40
 8003894:	d81f      	bhi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003896:	2b30      	cmp	r3, #48	; 0x30
 8003898:	d025      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800389a:	2b30      	cmp	r3, #48	; 0x30
 800389c:	d81b      	bhi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d00f      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d817      	bhi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d022      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d113      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80038b2:	3308      	adds	r3, #8
 80038b4:	4618      	mov	r0, r3
 80038b6:	f004 fa01 	bl	8007cbc <RCCEx_PLL2_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 80038c0:	e017      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038c2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80038c6:	3330      	adds	r3, #48	; 0x30
 80038c8:	4618      	mov	r0, r3
 80038ca:	f004 fa8f 	bl	8007dec <RCCEx_PLL3_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 80038d4:	e00d      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80038dc:	e009      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80038de:	bf00      	nop
 80038e0:	e007      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80038e2:	bf00      	nop
 80038e4:	e005      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80038e6:	bf00      	nop
 80038e8:	e003      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80038ea:	bf00      	nop
 80038ec:	44020c00 	.word	0x44020c00
        break;
 80038f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f2:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80038fa:	4baf      	ldr	r3, [pc, #700]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80038fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003900:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003904:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	4aaa      	ldr	r2, [pc, #680]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800390e:	430b      	orrs	r3, r1
 8003910:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003914:	e003      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003916:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800391a:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800391e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800392a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800392e:	2300      	movs	r3, #0
 8003930:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003934:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003938:	460b      	mov	r3, r1
 800393a:	4313      	orrs	r3, r2
 800393c:	d055      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800393e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003946:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800394a:	d031      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800394c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003950:	d82a      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003952:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003956:	d02d      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800395c:	d824      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800395e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003962:	d029      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003964:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003968:	d81e      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800396a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800396e:	d011      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003970:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003974:	d818      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d020      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800397a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800397e:	d113      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003980:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003984:	3308      	adds	r3, #8
 8003986:	4618      	mov	r0, r3
 8003988:	f004 f998 	bl	8007cbc <RCCEx_PLL2_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003992:	e014      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003994:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003998:	3330      	adds	r3, #48	; 0x30
 800399a:	4618      	mov	r0, r3
 800399c:	f004 fa26 	bl	8007dec <RCCEx_PLL3_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80039a6:	e00a      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80039ae:	e006      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80039b0:	bf00      	nop
 80039b2:	e004      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80039b4:	bf00      	nop
 80039b6:	e002      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80039bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039be:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10d      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80039c6:	4b7c      	ldr	r3, [pc, #496]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80039c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039cc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80039d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80039d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d8:	4a77      	ldr	r2, [pc, #476]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80039da:	430b      	orrs	r3, r1
 80039dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039e0:	e003      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e2:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80039e6:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039ea:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80039f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a00:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4313      	orrs	r3, r2
 8003a08:	d03d      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003a0a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a16:	d01b      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003a18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a1c:	d814      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a22:	d017      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a28:	d80e      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d014      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a32:	d109      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a34:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003a38:	3330      	adds	r3, #48	; 0x30
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f004 f9d6 	bl	8007dec <RCCEx_PLL3_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003a46:	e008      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003a4e:	e004      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003a50:	bf00      	nop
 8003a52:	e002      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003a54:	bf00      	nop
 8003a56:	e000      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a5a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10d      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003a62:	4b55      	ldr	r3, [pc, #340]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003a68:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a6c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a74:	4a50      	ldr	r2, [pc, #320]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a76:	430b      	orrs	r3, r1
 8003a78:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003a7c:	e003      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003a82:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a86:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003a92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a96:	2300      	movs	r3, #0
 8003a98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a9c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	d03d      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003aa6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ab2:	d01b      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003ab4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ab8:	d814      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003aba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003abe:	d017      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003ac0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ac4:	d80e      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d014      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003aca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ace:	d109      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ad0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ad4:	3330      	adds	r3, #48	; 0x30
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f004 f988 	bl	8007dec <RCCEx_PLL3_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003ae2:	e008      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003aea:	e004      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003aec:	bf00      	nop
 8003aee:	e002      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003af0:	bf00      	nop
 8003af2:	e000      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10d      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003afe:	4b2e      	ldr	r3, [pc, #184]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003b04:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003b08:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b10:	4a29      	ldr	r2, [pc, #164]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b12:	430b      	orrs	r3, r1
 8003b14:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003b18:	e003      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003b1e:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b22:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003b2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b32:	2300      	movs	r3, #0
 8003b34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b38:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	d040      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003b42:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b4e:	d01b      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003b50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b54:	d814      	bhi.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b5a:	d017      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003b5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b60:	d80e      	bhi.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d014      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6a:	d109      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b6c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003b70:	3330      	adds	r3, #48	; 0x30
 8003b72:	4618      	mov	r0, r3
 8003b74:	f004 f93a 	bl	8007dec <RCCEx_PLL3_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003b7e:	e008      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003b86:	e004      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003b88:	bf00      	nop
 8003b8a:	e002      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003b8c:	bf00      	nop
 8003b8e:	e000      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b92:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d110      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ba0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ba4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bac:	4a02      	ldr	r2, [pc, #8]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003bb4:	e006      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003bb6:	bf00      	nop
 8003bb8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbc:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003bc0:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bc4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	2100      	movs	r1, #0
 8003bce:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8003bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003bde:	460b      	mov	r3, r1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	d03d      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003be4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bf0:	d01b      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003bf2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bf6:	d814      	bhi.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003bf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bfc:	d017      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003bfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c02:	d80e      	bhi.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d014      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003c08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c0c:	d109      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c0e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003c12:	3330      	adds	r3, #48	; 0x30
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 f8e9 	bl	8007dec <RCCEx_PLL3_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003c20:	e008      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003c28:	e004      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003c2a:	bf00      	nop
 8003c2c:	e002      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003c2e:	bf00      	nop
 8003c30:	e000      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c34:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10d      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003c3c:	4bbe      	ldr	r3, [pc, #760]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003c42:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003c46:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c4e:	4aba      	ldr	r2, [pc, #744]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c50:	430b      	orrs	r3, r1
 8003c52:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003c56:	e003      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c58:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003c5c:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003c60:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c68:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c70:	2300      	movs	r3, #0
 8003c72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	d035      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003c80:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003c84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c8c:	d015      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c92:	d80e      	bhi.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d012      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c9c:	d109      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ca2:	3330      	adds	r3, #48	; 0x30
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f004 f8a1 	bl	8007dec <RCCEx_PLL3_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003cb0:	e006      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003cb8:	e002      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003cba:	bf00      	nop
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc0:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003cc8:	4b9b      	ldr	r3, [pc, #620]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003cca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003cce:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8003cd2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003cd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cda:	4a97      	ldr	r2, [pc, #604]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003ce2:	e003      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003ce8:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8003cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d02:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d06:	460b      	mov	r3, r1
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	d00e      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003d0c:	4b8a      	ldr	r3, [pc, #552]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	4a89      	ldr	r2, [pc, #548]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d16:	61d3      	str	r3, [r2, #28]
 8003d18:	4b87      	ldr	r3, [pc, #540]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d1a:	69d9      	ldr	r1, [r3, #28]
 8003d1c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003d20:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d24:	4a84      	ldr	r2, [pc, #528]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d26:	430b      	orrs	r3, r1
 8003d28:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d2a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d32:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003d36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d40:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4313      	orrs	r3, r2
 8003d48:	d055      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003d4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003d4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d52:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003d56:	d031      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003d58:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003d5c:	d82a      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d62:	d02d      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d68:	d824      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d6e:	d029      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d74:	d81e      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7a:	d011      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d80:	d818      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d020      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8a:	d113      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d8c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003d90:	3308      	adds	r3, #8
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 ff92 	bl	8007cbc <RCCEx_PLL2_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003d9e:	e014      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003da0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003da4:	3330      	adds	r3, #48	; 0x30
 8003da6:	4618      	mov	r0, r3
 8003da8:	f004 f820 	bl	8007dec <RCCEx_PLL3_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003db2:	e00a      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003dba:	e006      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003dbc:	bf00      	nop
 8003dbe:	e004      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003dc0:	bf00      	nop
 8003dc2:	e002      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003dc4:	bf00      	nop
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dca:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10d      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003dd2:	4b59      	ldr	r3, [pc, #356]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003dd4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003dd8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003ddc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003de0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003de4:	4a54      	ldr	r2, [pc, #336]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003de6:	430b      	orrs	r3, r1
 8003de8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003dec:	e003      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dee:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003df2:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003df6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003e02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e06:	2300      	movs	r3, #0
 8003e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e10:	460b      	mov	r3, r1
 8003e12:	4313      	orrs	r3, r2
 8003e14:	d055      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003e16:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003e1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e1e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003e22:	d031      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003e24:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003e28:	d82a      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003e2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e2e:	d02d      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e34:	d824      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003e36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e3a:	d029      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003e3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e40:	d81e      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e46:	d011      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4c:	d818      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d020      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e56:	d113      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e58:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f003 ff2c 	bl	8007cbc <RCCEx_PLL2_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003e6a:	e014      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e6c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003e70:	3330      	adds	r3, #48	; 0x30
 8003e72:	4618      	mov	r0, r3
 8003e74:	f003 ffba 	bl	8007dec <RCCEx_PLL3_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003e86:	e006      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003e88:	bf00      	nop
 8003e8a:	e004      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003e8c:	bf00      	nop
 8003e8e:	e002      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003e90:	bf00      	nop
 8003e92:	e000      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e96:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10d      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003e9e:	4b26      	ldr	r3, [pc, #152]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ea0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003ea4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003ea8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003eac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003eb0:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003eb8:	e003      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003ebe:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003ec2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	2100      	movs	r1, #0
 8003ecc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ed8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	d057      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003ee2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ee6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003eea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eee:	d033      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ef4:	d82c      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003ef6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003efa:	d02f      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003efc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f00:	d826      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f06:	d02b      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003f08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f0c:	d820      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f12:	d013      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f18:	d81a      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d022      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8003f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f22:	d115      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f24:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003f28:	3308      	adds	r3, #8
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f003 fec6 	bl	8007cbc <RCCEx_PLL2_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003f36:	e016      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003f38:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f3c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003f40:	3330      	adds	r3, #48	; 0x30
 8003f42:	4618      	mov	r0, r3
 8003f44:	f003 ff52 	bl	8007dec <RCCEx_PLL3_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003f56:	e006      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003f58:	bf00      	nop
 8003f5a:	e004      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003f5c:	bf00      	nop
 8003f5e:	e002      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003f60:	bf00      	nop
 8003f62:	e000      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f66:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10d      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003f6e:	4bbb      	ldr	r3, [pc, #748]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003f74:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003f78:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003f7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f80:	4ab6      	ldr	r2, [pc, #728]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f82:	430b      	orrs	r3, r1
 8003f84:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003f88:	e003      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003f8e:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003f92:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fa8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003fac:	460b      	mov	r3, r1
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	d055      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8003fb2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003fb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fba:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003fbe:	d031      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003fc0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003fc4:	d82a      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fca:	d02d      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd0:	d824      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003fd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fd6:	d029      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003fd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fdc:	d81e      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fe2:	d011      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003fe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fe8:	d818      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d020      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8003fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff2:	d113      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ff4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f003 fe5e 	bl	8007cbc <RCCEx_PLL2_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004006:	e014      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004008:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800400c:	3330      	adds	r3, #48	; 0x30
 800400e:	4618      	mov	r0, r3
 8004010:	f003 feec 	bl	8007dec <RCCEx_PLL3_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800401a:	e00a      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004022:	e006      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004024:	bf00      	nop
 8004026:	e004      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004028:	bf00      	nop
 800402a:	e002      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800402c:	bf00      	nop
 800402e:	e000      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004032:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10d      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800403a:	4b88      	ldr	r3, [pc, #544]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800403c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004040:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8004044:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004048:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800404c:	4a83      	ldr	r2, [pc, #524]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800404e:	430b      	orrs	r3, r1
 8004050:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004054:	e003      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004056:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800405a:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800405e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	2100      	movs	r1, #0
 8004068:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800406c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004070:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004074:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004078:	460b      	mov	r3, r1
 800407a:	4313      	orrs	r3, r2
 800407c:	d055      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800407e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004086:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800408a:	d031      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800408c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004090:	d82a      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004092:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004096:	d02d      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8004098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800409c:	d824      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800409e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040a2:	d029      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80040a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040a8:	d81e      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80040aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040ae:	d011      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80040b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040b4:	d818      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d020      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80040ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040be:	d113      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80040c4:	3308      	adds	r3, #8
 80040c6:	4618      	mov	r0, r3
 80040c8:	f003 fdf8 	bl	8007cbc <RCCEx_PLL2_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80040d2:	e014      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80040d8:	3330      	adds	r3, #48	; 0x30
 80040da:	4618      	mov	r0, r3
 80040dc:	f003 fe86 	bl	8007dec <RCCEx_PLL3_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80040e6:	e00a      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80040ee:	e006      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80040f0:	bf00      	nop
 80040f2:	e004      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80040f4:	bf00      	nop
 80040f6:	e002      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80040f8:	bf00      	nop
 80040fa:	e000      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80040fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fe:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10d      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004106:	4b55      	ldr	r3, [pc, #340]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004108:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800410c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004110:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004114:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004118:	4a50      	ldr	r2, [pc, #320]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800411a:	430b      	orrs	r3, r1
 800411c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004120:	e003      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004126:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800412a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	2100      	movs	r1, #0
 8004134:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004140:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004144:	460b      	mov	r3, r1
 8004146:	4313      	orrs	r3, r2
 8004148:	d055      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800414a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800414e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004156:	d031      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800415c:	d82a      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d02d      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004168:	d824      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800416a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800416e:	d029      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004170:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004174:	d81e      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800417a:	d011      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800417c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004180:	d818      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d020      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800418a:	d113      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800418c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004190:	3308      	adds	r3, #8
 8004192:	4618      	mov	r0, r3
 8004194:	f003 fd92 	bl	8007cbc <RCCEx_PLL2_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800419e:	e014      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80041a4:	3330      	adds	r3, #48	; 0x30
 80041a6:	4618      	mov	r0, r3
 80041a8:	f003 fe20 	bl	8007dec <RCCEx_PLL3_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80041b2:	e00a      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80041ba:	e006      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80041bc:	bf00      	nop
 80041be:	e004      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80041c0:	bf00      	nop
 80041c2:	e002      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80041c4:	bf00      	nop
 80041c6:	e000      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80041c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ca:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10d      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80041d2:	4b22      	ldr	r3, [pc, #136]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80041d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80041d8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80041dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80041e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80041e4:	4a1d      	ldr	r2, [pc, #116]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80041e6:	430b      	orrs	r3, r1
 80041e8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80041ec:	e003      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ee:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80041f2:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041f6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004202:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004206:	2300      	movs	r3, #0
 8004208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800420c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004210:	460b      	mov	r3, r1
 8004212:	4313      	orrs	r3, r2
 8004214:	d055      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004216:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800421a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800421e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004222:	d035      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004224:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004228:	d82e      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800422a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800422e:	d031      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004230:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004234:	d828      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800423a:	d01b      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800423c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004240:	d822      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424a:	d009      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800424c:	e01c      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800424e:	4b03      	ldr	r3, [pc, #12]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	4a02      	ldr	r2, [pc, #8]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004258:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800425a:	e01c      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800425c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004260:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004264:	3308      	adds	r3, #8
 8004266:	4618      	mov	r0, r3
 8004268:	f003 fd28 	bl	8007cbc <RCCEx_PLL2_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004272:	e010      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004274:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004278:	3330      	adds	r3, #48	; 0x30
 800427a:	4618      	mov	r0, r3
 800427c:	f003 fdb6 	bl	8007dec <RCCEx_PLL3_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004286:	e006      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 800428e:	e002      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004296:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10d      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800429e:	4bc2      	ldr	r3, [pc, #776]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80042a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042a4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80042a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80042ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80042b0:	4abd      	ldr	r2, [pc, #756]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80042b2:	430b      	orrs	r3, r1
 80042b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042b8:	e003      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ba:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80042be:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80042c2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80042ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80042d0:	2300      	movs	r3, #0
 80042d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80042d8:	460b      	mov	r3, r1
 80042da:	4313      	orrs	r3, r2
 80042dc:	d051      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x141a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80042de:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80042e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80042e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042ea:	d033      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 80042ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042f0:	d82c      	bhi.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 80042f2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80042f6:	d02d      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 80042f8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80042fc:	d826      	bhi.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 80042fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004302:	d019      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x13d0>
 8004304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004308:	d820      	bhi.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x13ae>
 800430e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004312:	d007      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
 8004314:	e01a      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x13e4>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004316:	4ba4      	ldr	r3, [pc, #656]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	4aa3      	ldr	r2, [pc, #652]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800431c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004320:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004322:	e018      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004324:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004328:	3308      	adds	r3, #8
 800432a:	4618      	mov	r0, r3
 800432c:	f003 fcc6 	bl	8007cbc <RCCEx_PLL2_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004336:	e00e      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004338:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800433c:	3330      	adds	r3, #48	; 0x30
 800433e:	4618      	mov	r0, r3
 8004340:	f003 fd54 	bl	8007dec <RCCEx_PLL3_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 800434a:	e004      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x13ee>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004352:	e000      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x13ee>
        break;
 8004354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004356:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10d      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x1412>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800435e:	4b92      	ldr	r3, [pc, #584]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004364:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8004368:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800436c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004370:	4a8d      	ldr	r2, [pc, #564]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004372:	430b      	orrs	r3, r1
 8004374:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004378:	e003      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x141a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800437e:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004382:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800438e:	673b      	str	r3, [r7, #112]	; 0x70
 8004390:	2300      	movs	r3, #0
 8004392:	677b      	str	r3, [r7, #116]	; 0x74
 8004394:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004398:	460b      	mov	r3, r1
 800439a:	4313      	orrs	r3, r2
 800439c:	d032      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x149c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800439e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80043a6:	2b05      	cmp	r3, #5
 80043a8:	d80f      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1462>
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d211      	bcs.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x146a>
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d911      	bls.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d109      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1462>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043b6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043ba:	3308      	adds	r3, #8
 80043bc:	4618      	mov	r0, r3
 80043be:	f003 fc7d 	bl	8007cbc <RCCEx_PLL2_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80043c8:	e006      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80043d0:	e002      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 80043d2:	bf00      	nop
 80043d4:	e000      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 80043d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d8:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10d      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1494>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80043e0:	4b71      	ldr	r3, [pc, #452]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80043e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043e6:	f023 0107 	bic.w	r1, r3, #7
 80043ea:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043ee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80043f2:	4a6d      	ldr	r2, [pc, #436]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80043f4:	430b      	orrs	r3, r1
 80043f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043fa:	e003      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x149c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fc:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004400:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004404:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	2100      	movs	r1, #0
 800440e:	66b9      	str	r1, [r7, #104]	; 0x68
 8004410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004414:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004416:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800441a:	460b      	mov	r3, r1
 800441c:	4313      	orrs	r3, r2
 800441e:	d024      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x1502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004420:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004424:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x14d0>
 800442c:	2b08      	cmp	r3, #8
 800442e:	d005      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004436:	e002      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 8004438:	bf00      	nop
 800443a:	e000      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 800443c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800443e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10d      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x14fa>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004446:	4b58      	ldr	r3, [pc, #352]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800444c:	f023 0108 	bic.w	r1, r3, #8
 8004450:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004454:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004458:	4a53      	ldr	r2, [pc, #332]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800445a:	430b      	orrs	r3, r1
 800445c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004460:	e003      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x1502>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004462:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004466:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800446a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004476:	663b      	str	r3, [r7, #96]	; 0x60
 8004478:	2300      	movs	r3, #0
 800447a:	667b      	str	r3, [r7, #100]	; 0x64
 800447c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004480:	460b      	mov	r3, r1
 8004482:	4313      	orrs	r3, r2
 8004484:	f000 80b9 	beq.w	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1692>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004488:	4b48      	ldr	r3, [pc, #288]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	4a47      	ldr	r2, [pc, #284]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004494:	f7fc fd2e 	bl	8000ef4 <HAL_GetTick>
 8004498:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800449c:	e00b      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x154e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449e:	f7fc fd29 	bl	8000ef4 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d903      	bls.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x154e>
      {
        ret = HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80044b4:	e005      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x155a>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80044b6:	4b3d      	ldr	r3, [pc, #244]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0ed      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1536>
      }
    }

    if (ret == HAL_OK)
 80044c2:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f040 8093 	bne.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x168a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044cc:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80044ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80044da:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d023      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x15c2>
 80044e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80044e6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80044ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01b      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x15c2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044f2:	4b2d      	ldr	r3, [pc, #180]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80044f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004500:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004506:	4a28      	ldr	r2, [pc, #160]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004516:	4a24      	ldr	r2, [pc, #144]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004520:	4a21      	ldr	r2, [pc, #132]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004522:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004526:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800452a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d019      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1602>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7fc fcdd 	bl	8000ef4 <HAL_GetTick>
 800453a:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453e:	e00d      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x15f4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fc fcd8 	bl	8000ef4 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800454a:	1ad2      	subs	r2, r2, r3
 800454c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004550:	429a      	cmp	r2, r3
 8004552:	d903      	bls.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x15f4>
          {
            ret = HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
            break;
 800455a:	e006      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1602>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455c:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800455e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0ea      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x15d8>
          }
        }
      }

      if (ret == HAL_OK)
 800456a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800456e:	2b00      	cmp	r3, #0
 8004570:	d13a      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1680>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004572:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800457a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004582:	d115      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1648>
 8004584:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800458c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800459a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800459e:	4a02      	ldr	r2, [pc, #8]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80045a0:	430b      	orrs	r3, r1
 80045a2:	61d3      	str	r3, [r2, #28]
 80045a4:	e00a      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x1654>
 80045a6:	bf00      	nop
 80045a8:	44020c00 	.word	0x44020c00
 80045ac:	44020800 	.word	0x44020800
 80045b0:	4bc6      	ldr	r3, [pc, #792]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	4ac5      	ldr	r2, [pc, #788]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80045b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045ba:	61d3      	str	r3, [r2, #28]
 80045bc:	4bc3      	ldr	r3, [pc, #780]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80045be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045c2:	4ac2      	ldr	r2, [pc, #776]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80045c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045cc:	4bbf      	ldr	r3, [pc, #764]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80045ce:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80045d2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80045d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045de:	4abb      	ldr	r2, [pc, #748]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80045e0:	430b      	orrs	r3, r1
 80045e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045e6:	e008      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045e8:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80045ec:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
 80045f0:	e003      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f2:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80045f6:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004606:	65bb      	str	r3, [r7, #88]	; 0x58
 8004608:	2300      	movs	r3, #0
 800460a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800460c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004610:	460b      	mov	r3, r1
 8004612:	4313      	orrs	r3, r2
 8004614:	d035      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x171a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004616:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800461a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800461e:	2b30      	cmp	r3, #48	; 0x30
 8004620:	d014      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x16e4>
 8004622:	2b30      	cmp	r3, #48	; 0x30
 8004624:	d80e      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 8004626:	2b20      	cmp	r3, #32
 8004628:	d012      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800462a:	2b20      	cmp	r3, #32
 800462c:	d80a      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 800462e:	2b00      	cmp	r3, #0
 8004630:	d010      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004632:	2b10      	cmp	r3, #16
 8004634:	d106      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004636:	4ba5      	ldr	r3, [pc, #660]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	4aa4      	ldr	r2, [pc, #656]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800463c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004640:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004642:	e008      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x16ee>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 800464a:	e004      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 800464c:	bf00      	nop
 800464e:	e002      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8004650:	bf00      	nop
 8004652:	e000      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8004654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004656:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10d      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x1712>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800465e:	4b9b      	ldr	r3, [pc, #620]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004664:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004668:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800466c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004670:	4a96      	ldr	r2, [pc, #600]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004672:	430b      	orrs	r3, r1
 8004674:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004678:	e003      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x171a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800467e:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004682:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800468e:	653b      	str	r3, [r7, #80]	; 0x50
 8004690:	2300      	movs	r3, #0
 8004692:	657b      	str	r3, [r7, #84]	; 0x54
 8004694:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004698:	460b      	mov	r3, r1
 800469a:	4313      	orrs	r3, r2
 800469c:	d033      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x179e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800469e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80046a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1748>
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d007      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1756>
 80046ae:	e010      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x176a>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b0:	4b86      	ldr	r3, [pc, #536]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	4a85      	ldr	r2, [pc, #532]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80046b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ba:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80046bc:	e00d      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1772>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046be:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80046c2:	3308      	adds	r3, #8
 80046c4:	4618      	mov	r0, r3
 80046c6:	f003 faf9 	bl	8007cbc <RCCEx_PLL2_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80046d0:	e003      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1772>

      default:
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80046d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046da:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10d      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1796>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80046e2:	4b7a      	ldr	r3, [pc, #488]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80046e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80046e8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80046ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80046f0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80046f4:	4a75      	ldr	r2, [pc, #468]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80046f6:	430b      	orrs	r3, r1
 80046f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80046fc:	e003      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x179e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fe:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004702:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004706:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004712:	64bb      	str	r3, [r7, #72]	; 0x48
 8004714:	2300      	movs	r3, #0
 8004716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004718:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800471c:	460b      	mov	r3, r1
 800471e:	4313      	orrs	r3, r2
 8004720:	d048      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x184c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004722:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004726:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800472a:	2b04      	cmp	r3, #4
 800472c:	d827      	bhi.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1816>
 800472e:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <HAL_RCCEx_PeriphCLKConfig+0x17cc>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004749 	.word	0x08004749
 8004738:	08004757 	.word	0x08004757
 800473c:	0800476b 	.word	0x0800476b
 8004740:	08004787 	.word	0x08004787
 8004744:	08004787 	.word	0x08004787
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004748:	4b60      	ldr	r3, [pc, #384]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	4a5f      	ldr	r2, [pc, #380]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800474e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004752:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004754:	e018      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1820>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004756:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800475a:	3308      	adds	r3, #8
 800475c:	4618      	mov	r0, r3
 800475e:	f003 faad 	bl	8007cbc <RCCEx_PLL2_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004768:	e00e      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1820>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800476a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800476e:	3330      	adds	r3, #48	; 0x30
 8004770:	4618      	mov	r0, r3
 8004772:	f003 fb3b 	bl	8007dec <RCCEx_PLL3_Config>
 8004776:	4603      	mov	r3, r0
 8004778:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800477c:	e004      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1820>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004784:	e000      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1820>
        break;
 8004786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004788:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10d      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1844>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004790:	4b4e      	ldr	r3, [pc, #312]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004796:	f023 0107 	bic.w	r1, r3, #7
 800479a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800479e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80047a2:	4a4a      	ldr	r2, [pc, #296]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80047a4:	430b      	orrs	r3, r1
 80047a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047aa:	e003      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ac:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80047b0:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80047b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80047c0:	643b      	str	r3, [r7, #64]	; 0x40
 80047c2:	2300      	movs	r3, #0
 80047c4:	647b      	str	r3, [r7, #68]	; 0x44
 80047c6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80047ca:	460b      	mov	r3, r1
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f000 8083 	beq.w	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1970>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80047d2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80047d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d85f      	bhi.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1936>
 80047de:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <HAL_RCCEx_PeriphCLKConfig+0x187c>)
 80047e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e4:	08004869 	.word	0x08004869
 80047e8:	0800489f 	.word	0x0800489f
 80047ec:	0800489f 	.word	0x0800489f
 80047f0:	0800489f 	.word	0x0800489f
 80047f4:	0800489f 	.word	0x0800489f
 80047f8:	0800489f 	.word	0x0800489f
 80047fc:	0800489f 	.word	0x0800489f
 8004800:	0800489f 	.word	0x0800489f
 8004804:	08004877 	.word	0x08004877
 8004808:	0800489f 	.word	0x0800489f
 800480c:	0800489f 	.word	0x0800489f
 8004810:	0800489f 	.word	0x0800489f
 8004814:	0800489f 	.word	0x0800489f
 8004818:	0800489f 	.word	0x0800489f
 800481c:	0800489f 	.word	0x0800489f
 8004820:	0800489f 	.word	0x0800489f
 8004824:	0800488b 	.word	0x0800488b
 8004828:	0800489f 	.word	0x0800489f
 800482c:	0800489f 	.word	0x0800489f
 8004830:	0800489f 	.word	0x0800489f
 8004834:	0800489f 	.word	0x0800489f
 8004838:	0800489f 	.word	0x0800489f
 800483c:	0800489f 	.word	0x0800489f
 8004840:	0800489f 	.word	0x0800489f
 8004844:	080048a7 	.word	0x080048a7
 8004848:	0800489f 	.word	0x0800489f
 800484c:	0800489f 	.word	0x0800489f
 8004850:	0800489f 	.word	0x0800489f
 8004854:	0800489f 	.word	0x0800489f
 8004858:	0800489f 	.word	0x0800489f
 800485c:	0800489f 	.word	0x0800489f
 8004860:	0800489f 	.word	0x0800489f
 8004864:	080048a7 	.word	0x080048a7
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004868:	4b18      	ldr	r3, [pc, #96]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	4a17      	ldr	r2, [pc, #92]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800486e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004872:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004874:	e018      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1940>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004876:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800487a:	3308      	adds	r3, #8
 800487c:	4618      	mov	r0, r3
 800487e:	f003 fa1d 	bl	8007cbc <RCCEx_PLL2_Config>
 8004882:	4603      	mov	r3, r0
 8004884:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004888:	e00e      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1940>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800488a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800488e:	3330      	adds	r3, #48	; 0x30
 8004890:	4618      	mov	r0, r3
 8004892:	f003 faab 	bl	8007dec <RCCEx_PLL3_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800489c:	e004      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1940>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80048a4:	e000      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1940>
        break;
 80048a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a8:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10f      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1968>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80048b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048b6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80048ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80048be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048c2:	4a02      	ldr	r2, [pc, #8]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80048c4:	430b      	orrs	r3, r1
 80048c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048ca:	e005      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1970>
 80048cc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d0:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80048d4:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80048d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80048e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80048e6:	2300      	movs	r3, #0
 80048e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80048ee:	460b      	mov	r3, r1
 80048f0:	4313      	orrs	r3, r2
 80048f2:	d04e      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80048f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80048f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80048fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004900:	d02e      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
 8004902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004906:	d827      	bhi.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 8004908:	2bc0      	cmp	r3, #192	; 0xc0
 800490a:	d02b      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
 800490c:	2bc0      	cmp	r3, #192	; 0xc0
 800490e:	d823      	bhi.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 8004910:	2b80      	cmp	r3, #128	; 0x80
 8004912:	d017      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
 8004914:	2b80      	cmp	r3, #128	; 0x80
 8004916:	d81f      	bhi.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x19ba>
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d007      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x19c8>
 8004920:	e01a      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004922:	4bb0      	ldr	r3, [pc, #704]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	4aaf      	ldr	r2, [pc, #700]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800492c:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800492e:	e01a      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x19fe>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004930:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004934:	3308      	adds	r3, #8
 8004936:	4618      	mov	r0, r3
 8004938:	f003 f9c0 	bl	8007cbc <RCCEx_PLL2_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004942:	e010      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x19fe>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004944:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004948:	3330      	adds	r3, #48	; 0x30
 800494a:	4618      	mov	r0, r3
 800494c:	f003 fa4e 	bl	8007dec <RCCEx_PLL3_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004956:	e006      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 800495e:	e002      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 8004960:	bf00      	nop
 8004962:	e000      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 8004964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004966:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10d      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1a22>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800496e:	4b9d      	ldr	r3, [pc, #628]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004974:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004978:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800497c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004980:	4a98      	ldr	r2, [pc, #608]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004982:	430b      	orrs	r3, r1
 8004984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004988:	e003      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800498e:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004992:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800499e:	633b      	str	r3, [r7, #48]	; 0x30
 80049a0:	2300      	movs	r3, #0
 80049a2:	637b      	str	r3, [r7, #52]	; 0x34
 80049a4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80049a8:	460b      	mov	r3, r1
 80049aa:	4313      	orrs	r3, r2
 80049ac:	d055      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1af2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80049ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80049b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049b6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80049ba:	d031      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>
 80049bc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80049c0:	d82a      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80049c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c6:	d02d      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1abc>
 80049c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049cc:	d824      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80049ce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80049d2:	d029      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
 80049d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80049d8:	d81e      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80049da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049de:	d011      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e4:	d818      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d020      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1ac4>
 80049ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ee:	d113      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80049f4:	3308      	adds	r3, #8
 80049f6:	4618      	mov	r0, r3
 80049f8:	f003 f960 	bl	8007cbc <RCCEx_PLL2_Config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004a02:	e014      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a04:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004a08:	3330      	adds	r3, #48	; 0x30
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f003 f9ee 	bl	8007dec <RCCEx_PLL3_Config>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004a16:	e00a      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004a1e:	e006      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8004a20:	bf00      	nop
 8004a22:	e004      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8004a24:	bf00      	nop
 8004a26:	e002      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8004a28:	bf00      	nop
 8004a2a:	e000      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8004a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10d      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004a36:	4b6b      	ldr	r3, [pc, #428]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a3c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004a40:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004a44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a48:	4a66      	ldr	r2, [pc, #408]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a50:	e003      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1af2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a52:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004a56:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004a5a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a62:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a68:	2300      	movs	r3, #0
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a6c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004a70:	460b      	mov	r3, r1
 8004a72:	4313      	orrs	r3, r2
 8004a74:	d055      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1bba>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004a76:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004a7a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004a7e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004a82:	d031      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1b80>
 8004a84:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004a88:	d82a      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8004a8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a8e:	d02d      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1b84>
 8004a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a94:	d824      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8004a96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a9a:	d029      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
 8004a9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004aa0:	d81e      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa6:	d011      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x1b64>
 8004aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aac:	d818      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d020      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8c>
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab6:	d113      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ab8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004abc:	3308      	adds	r3, #8
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f003 f8fc 	bl	8007cbc <RCCEx_PLL2_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004aca:	e014      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004acc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004ad0:	3330      	adds	r3, #48	; 0x30
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f003 f98a 	bl	8007dec <RCCEx_PLL3_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004ade:	e00a      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004ae6:	e006      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8004ae8:	bf00      	nop
 8004aea:	e004      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8004aec:	bf00      	nop
 8004aee:	e002      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8004af0:	bf00      	nop
 8004af2:	e000      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8004af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10d      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004afe:	4b39      	ldr	r3, [pc, #228]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b04:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004b08:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004b0c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004b10:	4934      	ldr	r1, [pc, #208]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004b18:	e003      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1bba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004b1e:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b22:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	6239      	str	r1, [r7, #32]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
 8004b34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	d058      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004b3e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b46:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004b4a:	d031      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004b4c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004b50:	d82a      	bhi.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8004b52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b56:	d02d      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4c>
 8004b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b5c:	d824      	bhi.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8004b5e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004b62:	d029      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1c50>
 8004b64:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004b68:	d81e      	bhi.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8004b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6e:	d011      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1c2c>
 8004b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b74:	d818      	bhi.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d020      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1c54>
 8004b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7e:	d113      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b80:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004b84:	3308      	adds	r3, #8
 8004b86:	4618      	mov	r0, r3
 8004b88:	f003 f898 	bl	8007cbc <RCCEx_PLL2_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b92:	e014      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1c56>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b94:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004b98:	3330      	adds	r3, #48	; 0x30
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f003 f926 	bl	8007dec <RCCEx_PLL3_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ba6:	e00a      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004bae:	e006      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8004bb0:	bf00      	nop
 8004bb2:	e004      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8004bb4:	bf00      	nop
 8004bb6:	e002      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8004bb8:	bf00      	nop
 8004bba:	e000      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8004bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbe:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d110      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1c80>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004bc6:	4b07      	ldr	r3, [pc, #28]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bcc:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8004bd0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004bd8:	4902      	ldr	r1, [pc, #8]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004be0:	e006      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
 8004be2:	bf00      	nop
 8004be4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be8:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004bec:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004bf0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	61b9      	str	r1, [r7, #24]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c06:	460b      	mov	r3, r1
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	d03d      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004c0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d81c      	bhi.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1cb8>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c5b 	.word	0x08004c5b
 8004c24:	08004c31 	.word	0x08004c31
 8004c28:	08004c3f 	.word	0x08004c3f
 8004c2c:	08004c5b 	.word	0x08004c5b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c30:	4b6f      	ldr	r3, [pc, #444]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	4a6e      	ldr	r2, [pc, #440]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c3a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004c3c:	e00e      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1cf4>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c3e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c42:	3308      	adds	r3, #8
 8004c44:	4618      	mov	r0, r3
 8004c46:	f003 f839 	bl	8007cbc <RCCEx_PLL2_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004c50:	e004      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004c58:	e000      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
        break;
 8004c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c5c:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10d      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1d18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004c64:	4b62      	ldr	r3, [pc, #392]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004c66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c6a:	f023 0203 	bic.w	r2, r3, #3
 8004c6e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c76:	495e      	ldr	r1, [pc, #376]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004c7e:	e003      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c80:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004c84:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c88:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	2100      	movs	r1, #0
 8004c92:	6139      	str	r1, [r7, #16]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	d03a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1db2>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004ca4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004ca8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb0:	d00e      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
 8004cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb6:	d815      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d017      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x1d84>
 8004cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc0:	d110      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc2:	4b4b      	ldr	r3, [pc, #300]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	4a4a      	ldr	r2, [pc, #296]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ccc:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004cce:	e00e      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cd0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f002 fff0 	bl	8007cbc <RCCEx_PLL2_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004ce2:	e004      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      default:
        ret = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004cea:	e000      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1d86>
        break;
 8004cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cee:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10d      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1daa>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004cf6:	4b3e      	ldr	r3, [pc, #248]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d00:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004d04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004d08:	4939      	ldr	r1, [pc, #228]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004d10:	e003      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1db2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d12:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004d16:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d1a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d22:	2100      	movs	r1, #0
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d30:	460b      	mov	r3, r1
 8004d32:	4313      	orrs	r3, r2
 8004d34:	d038      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1e40>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004d36:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004d3a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004d3e:	2b30      	cmp	r3, #48	; 0x30
 8004d40:	d01b      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1e12>
 8004d42:	2b30      	cmp	r3, #48	; 0x30
 8004d44:	d815      	bhi.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
 8004d46:	2b10      	cmp	r3, #16
 8004d48:	d002      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1de8>
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d007      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x1df6>
 8004d4e:	e010      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d50:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	4a26      	ldr	r2, [pc, #152]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d5a:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d5c:	e00e      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1e14>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d5e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004d62:	3330      	adds	r3, #48	; 0x30
 8004d64:	4618      	mov	r0, r3
 8004d66:	f003 f841 	bl	8007dec <RCCEx_PLL3_Config>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004d70:	e004      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004d78:	e000      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        break;
 8004d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d7c:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10d      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004d84:	4b1a      	ldr	r3, [pc, #104]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004d86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d8e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004d92:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004d96:	4916      	ldr	r1, [pc, #88]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004d9e:	e003      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1e40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da0:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004da4:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004da8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	2100      	movs	r1, #0
 8004db2:	6039      	str	r1, [r7, #0]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	607b      	str	r3, [r7, #4]
 8004dba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	d00c      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1e76>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004dc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dce:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004dd2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004dd6:	4906      	ldr	r1, [pc, #24]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8004dde:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8004de8:	46bd      	mov	sp, r7
 8004dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dee:	bf00      	nop
 8004df0:	44020c00 	.word	0x44020c00

08004df4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b08b      	sub	sp, #44	; 0x2c
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004dfc:	4bad      	ldr	r3, [pc, #692]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e04:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004e06:	4bab      	ldr	r3, [pc, #684]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004e10:	4ba8      	ldr	r3, [pc, #672]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e1a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004e1c:	4ba5      	ldr	r3, [pc, #660]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e26:	4ba3      	ldr	r3, [pc, #652]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	08db      	lsrs	r3, r3, #3
 8004e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8126 	beq.w	8005096 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d053      	beq.n	8004ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d86f      	bhi.n	8004f36 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d003      	beq.n	8004e64 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d02b      	beq.n	8004eba <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8004e62:	e068      	b.n	8004f36 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e64:	4b93      	ldr	r3, [pc, #588]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	08db      	lsrs	r3, r3, #3
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	4a92      	ldr	r2, [pc, #584]	; (80050b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
 8004e74:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	ee07 3a90 	vmov	s15, r3
 8004e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	ee07 3a90 	vmov	s15, r3
 8004e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e98:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e9c:	eddf 5a87 	vldr	s11, [pc, #540]	; 80050bc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004ea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004eb8:	e068      	b.n	8004f8c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	ee07 3a90 	vmov	s15, r3
 8004ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80050c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed6:	ed97 6a04 	vldr	s12, [r7, #16]
 8004eda:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050bc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004ef6:	e049      	b.n	8004f8c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f02:	eddf 6a70 	vldr	s13, [pc, #448]	; 80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f14:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f18:	eddf 5a68 	vldr	s11, [pc, #416]	; 80050bc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f30:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004f34:	e02a      	b.n	8004f8c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f36:	4b5f      	ldr	r3, [pc, #380]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	08db      	lsrs	r3, r3, #3
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	4a5d      	ldr	r2, [pc, #372]	; (80050b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004f42:	fa22 f303 	lsr.w	r3, r2, r3
 8004f46:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	ee07 3a90 	vmov	s15, r3
 8004f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f6e:	eddf 5a53 	vldr	s11, [pc, #332]	; 80050bc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f86:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004f8a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f8c:	4b49      	ldr	r3, [pc, #292]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f98:	d121      	bne.n	8004fde <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004f9a:	4b46      	ldr	r3, [pc, #280]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d017      	beq.n	8004fd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004fa6:	4b43      	ldr	r3, [pc, #268]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004faa:	0a5b      	lsrs	r3, r3, #9
 8004fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb0:	ee07 3a90 	vmov	s15, r3
 8004fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8004fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fbc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004fc0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fcc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e006      	b.n	8004fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e002      	b.n	8004fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fe4:	4b33      	ldr	r3, [pc, #204]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ff0:	d121      	bne.n	8005036 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004ff2:	4b30      	ldr	r3, [pc, #192]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d017      	beq.n	800502e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004ffe:	4b2d      	ldr	r3, [pc, #180]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005002:	0c1b      	lsrs	r3, r3, #16
 8005004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005008:	ee07 3a90 	vmov	s15, r3
 800500c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005014:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005018:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800501c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005024:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	605a      	str	r2, [r3, #4]
 800502c:	e006      	b.n	800503c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	605a      	str	r2, [r3, #4]
 8005034:	e002      	b.n	800503c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800503c:	4b1d      	ldr	r3, [pc, #116]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005048:	d121      	bne.n	800508e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d017      	beq.n	8005086 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005056:	4b17      	ldr	r3, [pc, #92]	; (80050b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505a:	0e1b      	lsrs	r3, r3, #24
 800505c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005060:	ee07 3a90 	vmov	s15, r3
 8005064:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800506c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005070:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800507c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005084:	e010      	b.n	80050a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	e00c      	b.n	80050a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	609a      	str	r2, [r3, #8]
}
 8005094:	e008      	b.n	80050a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	609a      	str	r2, [r3, #8]
}
 80050a8:	bf00      	nop
 80050aa:	372c      	adds	r7, #44	; 0x2c
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	44020c00 	.word	0x44020c00
 80050b8:	03d09000 	.word	0x03d09000
 80050bc:	46000000 	.word	0x46000000
 80050c0:	4a742400 	.word	0x4a742400
 80050c4:	4bbebc20 	.word	0x4bbebc20

080050c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b08b      	sub	sp, #44	; 0x2c
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80050d0:	4bad      	ldr	r3, [pc, #692]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80050d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80050da:	4bab      	ldr	r3, [pc, #684]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80050e4:	4ba8      	ldr	r3, [pc, #672]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	0a1b      	lsrs	r3, r3, #8
 80050ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ee:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80050f0:	4ba5      	ldr	r3, [pc, #660]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80050fa:	4ba3      	ldr	r3, [pc, #652]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	08db      	lsrs	r3, r3, #3
 8005100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	fb02 f303 	mul.w	r3, r2, r3
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8126 	beq.w	800536a <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	2b03      	cmp	r3, #3
 8005122:	d053      	beq.n	80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	2b03      	cmp	r3, #3
 8005128:	d86f      	bhi.n	800520a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d003      	beq.n	8005138 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d02b      	beq.n	800518e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8005136:	e068      	b.n	800520a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005138:	4b93      	ldr	r3, [pc, #588]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	08db      	lsrs	r3, r3, #3
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	4a92      	ldr	r2, [pc, #584]	; (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
 8005148:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	ee07 3a90 	vmov	s15, r3
 8005150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	ee07 3a90 	vmov	s15, r3
 8005168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005170:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005390 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005174:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005178:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005180:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005188:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800518c:	e068      	b.n	8005260 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	ee07 3a90 	vmov	s15, r3
 8005194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005198:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005394 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800519c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80051ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005390 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80051b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80051ca:	e049      	b.n	8005260 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005398 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80051da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	ee07 3a90 	vmov	s15, r3
 80051e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80051ec:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005390 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80051f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005204:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005208:	e02a      	b.n	8005260 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800520a:	4b5f      	ldr	r3, [pc, #380]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	08db      	lsrs	r3, r3, #3
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	4a5d      	ldr	r2, [pc, #372]	; (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005216:	fa22 f303 	lsr.w	r3, r2, r3
 800521a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	ee07 3a90 	vmov	s15, r3
 800522c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005242:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005390 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800524e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800525e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005260:	4b49      	ldr	r3, [pc, #292]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800526c:	d121      	bne.n	80052b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800526e:	4b46      	ldr	r3, [pc, #280]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d017      	beq.n	80052aa <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800527a:	4b43      	ldr	r3, [pc, #268]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	0a5b      	lsrs	r3, r3, #9
 8005280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005284:	ee07 3a90 	vmov	s15, r3
 8005288:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800528c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005290:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005294:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	e006      	b.n	80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	e002      	b.n	80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052b8:	4b33      	ldr	r3, [pc, #204]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c4:	d121      	bne.n	800530a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80052c6:	4b30      	ldr	r3, [pc, #192]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d017      	beq.n	8005302 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80052d2:	4b2d      	ldr	r3, [pc, #180]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80052d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d6:	0c1b      	lsrs	r3, r3, #16
 80052d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052dc:	ee07 3a90 	vmov	s15, r3
 80052e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80052e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052e8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80052ec:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80052f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	605a      	str	r2, [r3, #4]
 8005300:	e006      	b.n	8005310 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	605a      	str	r2, [r3, #4]
 8005308:	e002      	b.n	8005310 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005310:	4b1d      	ldr	r3, [pc, #116]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800531c:	d121      	bne.n	8005362 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800531e:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d017      	beq.n	800535a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800532a:	4b17      	ldr	r3, [pc, #92]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532e:	0e1b      	lsrs	r3, r3, #24
 8005330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005334:	ee07 3a90 	vmov	s15, r3
 8005338:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800533c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005340:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005344:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800534c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005350:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005358:	e010      	b.n	800537c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	609a      	str	r2, [r3, #8]
}
 8005360:	e00c      	b.n	800537c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	609a      	str	r2, [r3, #8]
}
 8005368:	e008      	b.n	800537c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	609a      	str	r2, [r3, #8]
}
 800537c:	bf00      	nop
 800537e:	372c      	adds	r7, #44	; 0x2c
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	44020c00 	.word	0x44020c00
 800538c:	03d09000 	.word	0x03d09000
 8005390:	46000000 	.word	0x46000000
 8005394:	4a742400 	.word	0x4a742400
 8005398:	4bbebc20 	.word	0x4bbebc20

0800539c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800539c:	b480      	push	{r7}
 800539e:	b08b      	sub	sp, #44	; 0x2c
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80053a4:	4bad      	ldr	r3, [pc, #692]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80053a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ac:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80053ae:	4bab      	ldr	r3, [pc, #684]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80053b8:	4ba8      	ldr	r3, [pc, #672]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	0a1b      	lsrs	r3, r3, #8
 80053be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053c2:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80053c4:	4ba5      	ldr	r3, [pc, #660]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80053ce:	4ba3      	ldr	r3, [pc, #652]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80053d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d2:	08db      	lsrs	r3, r3, #3
 80053d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	fb02 f303 	mul.w	r3, r2, r3
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 8126 	beq.w	800563e <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d053      	beq.n	80054a0 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d86f      	bhi.n	80054de <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d003      	beq.n	800540c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d02b      	beq.n	8005462 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800540a:	e068      	b.n	80054de <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800540c:	4b93      	ldr	r3, [pc, #588]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	08db      	lsrs	r3, r3, #3
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	4a92      	ldr	r2, [pc, #584]	; (8005660 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
 800541c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	ee07 3a90 	vmov	s15, r3
 8005424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	ee07 3a90 	vmov	s15, r3
 800543c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005440:	ed97 6a04 	vldr	s12, [r7, #16]
 8005444:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005664 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005448:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800544c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005454:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005460:	e068      	b.n	8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	ee07 3a90 	vmov	s15, r3
 8005468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800547e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005482:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005664 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800548a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800549e:	e049      	b.n	8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054aa:	eddf 6a70 	vldr	s13, [pc, #448]	; 800566c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80054ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	ee07 3a90 	vmov	s15, r3
 80054b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054bc:	ed97 6a04 	vldr	s12, [r7, #16]
 80054c0:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005664 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80054c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80054dc:	e02a      	b.n	8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054de:	4b5f      	ldr	r3, [pc, #380]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	08db      	lsrs	r3, r3, #3
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	4a5d      	ldr	r2, [pc, #372]	; (8005660 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80054ea:	fa22 f303 	lsr.w	r3, r2, r3
 80054ee:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	ee07 3a90 	vmov	s15, r3
 8005500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005512:	ed97 6a04 	vldr	s12, [r7, #16]
 8005516:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005664 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800551a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800551e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800552a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005532:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005534:	4b49      	ldr	r3, [pc, #292]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800553c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005540:	d121      	bne.n	8005586 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005542:	4b46      	ldr	r3, [pc, #280]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d017      	beq.n	800557e <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800554e:	4b43      	ldr	r3, [pc, #268]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	0a5b      	lsrs	r3, r3, #9
 8005554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005558:	ee07 3a90 	vmov	s15, r3
 800555c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005564:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005568:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800556c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005574:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	e006      	b.n	800558c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e002      	b.n	800558c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800558c:	4b33      	ldr	r3, [pc, #204]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005598:	d121      	bne.n	80055de <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800559a:	4b30      	ldr	r3, [pc, #192]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d017      	beq.n	80055d6 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80055a6:	4b2d      	ldr	r3, [pc, #180]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	0c1b      	lsrs	r3, r3, #16
 80055ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b0:	ee07 3a90 	vmov	s15, r3
 80055b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80055b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055bc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80055c0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80055c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055cc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	605a      	str	r2, [r3, #4]
 80055d4:	e006      	b.n	80055e4 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	e002      	b.n	80055e4 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055e4:	4b1d      	ldr	r3, [pc, #116]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055f0:	d121      	bne.n	8005636 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80055f2:	4b1a      	ldr	r3, [pc, #104]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d017      	beq.n	800562e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80055fe:	4b17      	ldr	r3, [pc, #92]	; (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	0e1b      	lsrs	r3, r3, #24
 8005604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005608:	ee07 3a90 	vmov	s15, r3
 800560c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005614:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005618:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800561c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005624:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800562c:	e010      	b.n	8005650 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	609a      	str	r2, [r3, #8]
}
 8005634:	e00c      	b.n	8005650 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	609a      	str	r2, [r3, #8]
}
 800563c:	e008      	b.n	8005650 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	609a      	str	r2, [r3, #8]
}
 8005650:	bf00      	nop
 8005652:	372c      	adds	r7, #44	; 0x2c
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	44020c00 	.word	0x44020c00
 8005660:	03d09000 	.word	0x03d09000
 8005664:	46000000 	.word	0x46000000
 8005668:	4a742400 	.word	0x4a742400
 800566c:	4bbebc20 	.word	0x4bbebc20

08005670 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005670:	b590      	push	{r4, r7, lr}
 8005672:	b08f      	sub	sp, #60	; 0x3c
 8005674:	af00      	add	r7, sp, #0
 8005676:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800567a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800567e:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8005682:	4321      	orrs	r1, r4
 8005684:	d150      	bne.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005686:	4b26      	ldr	r3, [pc, #152]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800568c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005690:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005692:	4b23      	ldr	r3, [pc, #140]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b02      	cmp	r3, #2
 800569e:	d108      	bne.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a6:	d104      	bne.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80056a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34
 80056ae:	f002 baf6 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80056b2:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056c0:	d108      	bne.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c8:	d104      	bne.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80056ca:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80056ce:	637b      	str	r3, [r7, #52]	; 0x34
 80056d0:	f002 bae5 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80056d4:	4b12      	ldr	r3, [pc, #72]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056e0:	d119      	bne.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056e8:	d115      	bne.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80056ea:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80056f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f6:	d30a      	bcc.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80056f8:	4b09      	ldr	r3, [pc, #36]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	0a1b      	lsrs	r3, r3, #8
 80056fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005702:	4a08      	ldr	r2, [pc, #32]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005704:	fbb2 f3f3 	udiv	r3, r2, r3
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800570a:	f002 bac8 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
      }
      else
      {
        frequency = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005712:	f002 bac4 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	637b      	str	r3, [r7, #52]	; 0x34
 800571a:	f002 bac0 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800571e:	bf00      	nop
 8005720:	44020c00 	.word	0x44020c00
 8005724:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800572c:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8005730:	ea50 0104 	orrs.w	r1, r0, r4
 8005734:	f001 8242 	beq.w	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x154c>
 8005738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800573c:	2801      	cmp	r0, #1
 800573e:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8005742:	f082 82a9 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005746:	e9d7 0100 	ldrd	r0, r1, [r7]
 800574a:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800574e:	ea50 0104 	orrs.w	r1, r0, r4
 8005752:	f001 8139 	beq.w	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 8005756:	e9d7 0100 	ldrd	r0, r1, [r7]
 800575a:	2801      	cmp	r0, #1
 800575c:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8005760:	f082 829a 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005764:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005768:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 800576c:	ea50 0104 	orrs.w	r1, r0, r4
 8005770:	f001 85ce 	beq.w	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca0>
 8005774:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005778:	2801      	cmp	r0, #1
 800577a:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800577e:	f082 828b 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005782:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005786:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800578a:	ea50 0104 	orrs.w	r1, r0, r4
 800578e:	f001 8518 	beq.w	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b52>
 8005792:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005796:	2801      	cmp	r0, #1
 8005798:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800579c:	f082 827c 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80057a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057a4:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 80057a8:	ea50 0104 	orrs.w	r1, r0, r4
 80057ac:	f001 846a 	beq.w	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x1a14>
 80057b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057b4:	2801      	cmp	r0, #1
 80057b6:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 80057ba:	f082 826d 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80057be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057c2:	f1a1 0420 	sub.w	r4, r1, #32
 80057c6:	ea50 0104 	orrs.w	r1, r0, r4
 80057ca:	f001 83b4 	beq.w	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x18c6>
 80057ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057d2:	2801      	cmp	r0, #1
 80057d4:	f171 0120 	sbcs.w	r1, r1, #32
 80057d8:	f082 825e 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80057dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057e0:	f1a1 0410 	sub.w	r4, r1, #16
 80057e4:	ea50 0104 	orrs.w	r1, r0, r4
 80057e8:	f002 8222 	beq.w	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x25c0>
 80057ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057f0:	2801      	cmp	r0, #1
 80057f2:	f171 0110 	sbcs.w	r1, r1, #16
 80057f6:	f082 824f 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80057fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057fe:	f1a1 0408 	sub.w	r4, r1, #8
 8005802:	ea50 0104 	orrs.w	r1, r0, r4
 8005806:	f002 8198 	beq.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x24ca>
 800580a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800580e:	2801      	cmp	r0, #1
 8005810:	f171 0108 	sbcs.w	r1, r1, #8
 8005814:	f082 8240 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005818:	e9d7 0100 	ldrd	r0, r1, [r7]
 800581c:	1f0c      	subs	r4, r1, #4
 800581e:	ea50 0104 	orrs.w	r1, r0, r4
 8005822:	f001 8614 	beq.w	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x1dde>
 8005826:	e9d7 0100 	ldrd	r0, r1, [r7]
 800582a:	2801      	cmp	r0, #1
 800582c:	f171 0104 	sbcs.w	r1, r1, #4
 8005830:	f082 8232 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005834:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005838:	1e8c      	subs	r4, r1, #2
 800583a:	ea50 0104 	orrs.w	r1, r0, r4
 800583e:	f002 810f 	beq.w	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8005842:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005846:	2801      	cmp	r0, #1
 8005848:	f171 0102 	sbcs.w	r1, r1, #2
 800584c:	f082 8224 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005850:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005854:	1e4c      	subs	r4, r1, #1
 8005856:	ea50 0104 	orrs.w	r1, r0, r4
 800585a:	f002 809a 	beq.w	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800585e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005862:	2801      	cmp	r0, #1
 8005864:	f171 0101 	sbcs.w	r1, r1, #1
 8005868:	f082 8216 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800586c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005870:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8005874:	4321      	orrs	r1, r4
 8005876:	f002 8025 	beq.w	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800587a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800587e:	4cd6      	ldr	r4, [pc, #856]	; (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x568>)
 8005880:	42a0      	cmp	r0, r4
 8005882:	f171 0100 	sbcs.w	r1, r1, #0
 8005886:	f082 8207 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800588a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800588e:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8005892:	4321      	orrs	r1, r4
 8005894:	f001 87a5 	beq.w	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2172>
 8005898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800589c:	4ccf      	ldr	r4, [pc, #828]	; (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800589e:	42a0      	cmp	r0, r4
 80058a0:	f171 0100 	sbcs.w	r1, r1, #0
 80058a4:	f082 81f8 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80058a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058ac:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 80058b0:	4321      	orrs	r1, r4
 80058b2:	f001 871d 	beq.w	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2080>
 80058b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058ba:	4cc9      	ldr	r4, [pc, #804]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80058bc:	42a0      	cmp	r0, r4
 80058be:	f171 0100 	sbcs.w	r1, r1, #0
 80058c2:	f082 81e9 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80058c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058ca:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 80058ce:	4321      	orrs	r1, r4
 80058d0:	f001 8666 	beq.w	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f30>
 80058d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058d8:	4cc2      	ldr	r4, [pc, #776]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80058da:	42a0      	cmp	r0, r4
 80058dc:	f171 0100 	sbcs.w	r1, r1, #0
 80058e0:	f082 81da 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80058e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058e8:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 80058ec:	4321      	orrs	r1, r4
 80058ee:	f001 85de 	beq.w	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e3e>
 80058f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058f6:	4cbc      	ldr	r4, [pc, #752]	; (8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80058f8:	42a0      	cmp	r0, r4
 80058fa:	f171 0100 	sbcs.w	r1, r1, #0
 80058fe:	f082 81cb 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005902:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005906:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800590a:	4321      	orrs	r1, r4
 800590c:	f002 814a 	beq.w	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2534>
 8005910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005914:	4cb5      	ldr	r4, [pc, #724]	; (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005916:	42a0      	cmp	r0, r4
 8005918:	f171 0100 	sbcs.w	r1, r1, #0
 800591c:	f082 81bc 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005924:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8005928:	4321      	orrs	r1, r4
 800592a:	f000 826b 	beq.w	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800592e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005932:	4caf      	ldr	r4, [pc, #700]	; (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005934:	42a0      	cmp	r0, r4
 8005936:	f171 0100 	sbcs.w	r1, r1, #0
 800593a:	f082 81ad 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800593e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005942:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8005946:	4321      	orrs	r1, r4
 8005948:	f000 87e9 	beq.w	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 800594c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005950:	4ca8      	ldr	r4, [pc, #672]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005952:	42a0      	cmp	r0, r4
 8005954:	f171 0100 	sbcs.w	r1, r1, #0
 8005958:	f082 819e 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800595c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005960:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8005964:	4321      	orrs	r1, r4
 8005966:	f000 81ce 	beq.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800596a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800596e:	4ca2      	ldr	r4, [pc, #648]	; (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005970:	42a0      	cmp	r0, r4
 8005972:	f171 0100 	sbcs.w	r1, r1, #0
 8005976:	f082 818f 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800597a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800597e:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8005982:	4321      	orrs	r1, r4
 8005984:	f000 8140 	beq.w	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800598c:	4c9b      	ldr	r4, [pc, #620]	; (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800598e:	42a0      	cmp	r0, r4
 8005990:	f171 0100 	sbcs.w	r1, r1, #0
 8005994:	f082 8180 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005998:	e9d7 0100 	ldrd	r0, r1, [r7]
 800599c:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 80059a0:	4321      	orrs	r1, r4
 80059a2:	f001 8229 	beq.w	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>
 80059a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059aa:	4c95      	ldr	r4, [pc, #596]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059ac:	42a0      	cmp	r0, r4
 80059ae:	f171 0100 	sbcs.w	r1, r1, #0
 80059b2:	f082 8171 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80059b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ba:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 80059be:	4321      	orrs	r1, r4
 80059c0:	f001 8173 	beq.w	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x163a>
 80059c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059c8:	4c8e      	ldr	r4, [pc, #568]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80059ca:	42a0      	cmp	r0, r4
 80059cc:	f171 0100 	sbcs.w	r1, r1, #0
 80059d0:	f082 8162 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80059d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059d8:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 80059dc:	4321      	orrs	r1, r4
 80059de:	f001 8130 	beq.w	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 80059e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059e6:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 80059ea:	f171 0100 	sbcs.w	r1, r1, #0
 80059ee:	f082 8153 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80059f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059f6:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 80059fa:	4321      	orrs	r1, r4
 80059fc:	f001 8093 	beq.w	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x14b6>
 8005a00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a04:	f248 0401 	movw	r4, #32769	; 0x8001
 8005a08:	42a0      	cmp	r0, r4
 8005a0a:	f171 0100 	sbcs.w	r1, r1, #0
 8005a0e:	f082 8143 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005a12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a16:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8005a1a:	4321      	orrs	r1, r4
 8005a1c:	f001 8040 	beq.w	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1430>
 8005a20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a24:	f244 0401 	movw	r4, #16385	; 0x4001
 8005a28:	42a0      	cmp	r0, r4
 8005a2a:	f171 0100 	sbcs.w	r1, r1, #0
 8005a2e:	f082 8133 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005a32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a36:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8005a3a:	4321      	orrs	r1, r4
 8005a3c:	f000 87ed 	beq.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
 8005a40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a44:	f242 0401 	movw	r4, #8193	; 0x2001
 8005a48:	42a0      	cmp	r0, r4
 8005a4a:	f171 0100 	sbcs.w	r1, r1, #0
 8005a4e:	f082 8123 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005a52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a56:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8005a5a:	4321      	orrs	r1, r4
 8005a5c:	f000 86f9 	beq.w	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8005a60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a64:	f241 0401 	movw	r4, #4097	; 0x1001
 8005a68:	42a0      	cmp	r0, r4
 8005a6a:	f171 0100 	sbcs.w	r1, r1, #0
 8005a6e:	f082 8113 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005a72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a76:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8005a7a:	4321      	orrs	r1, r4
 8005a7c:	f000 8683 	beq.w	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8005a80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a84:	f640 0401 	movw	r4, #2049	; 0x801
 8005a88:	42a0      	cmp	r0, r4
 8005a8a:	f171 0100 	sbcs.w	r1, r1, #0
 8005a8e:	f082 8103 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005a92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a96:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8005a9a:	4321      	orrs	r1, r4
 8005a9c:	f000 860d 	beq.w	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x104a>
 8005aa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aa4:	f240 4401 	movw	r4, #1025	; 0x401
 8005aa8:	42a0      	cmp	r0, r4
 8005aaa:	f171 0100 	sbcs.w	r1, r1, #0
 8005aae:	f082 80f3 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005ab2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ab6:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8005aba:	4321      	orrs	r1, r4
 8005abc:	f000 858b 	beq.w	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 8005ac0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ac4:	f240 2401 	movw	r4, #513	; 0x201
 8005ac8:	42a0      	cmp	r0, r4
 8005aca:	f171 0100 	sbcs.w	r1, r1, #0
 8005ace:	f082 80e3 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005ad2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ad6:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8005ada:	4321      	orrs	r1, r4
 8005adc:	f000 8510 	beq.w	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8005ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ae4:	f240 1401 	movw	r4, #257	; 0x101
 8005ae8:	42a0      	cmp	r0, r4
 8005aea:	f171 0100 	sbcs.w	r1, r1, #0
 8005aee:	f082 80d3 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005af6:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8005afa:	4321      	orrs	r1, r4
 8005afc:	f000 8495 	beq.w	800642a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005b00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b04:	2881      	cmp	r0, #129	; 0x81
 8005b06:	f171 0100 	sbcs.w	r1, r1, #0
 8005b0a:	f082 80c5 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b12:	2821      	cmp	r0, #33	; 0x21
 8005b14:	f171 0100 	sbcs.w	r1, r1, #0
 8005b18:	d254      	bcs.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8005b1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b1e:	4301      	orrs	r1, r0
 8005b20:	f002 80ba 	beq.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b28:	1e42      	subs	r2, r0, #1
 8005b2a:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005b2e:	2a20      	cmp	r2, #32
 8005b30:	f173 0100 	sbcs.w	r1, r3, #0
 8005b34:	f082 80b0 	bcs.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b38:	2a1f      	cmp	r2, #31
 8005b3a:	f202 80ad 	bhi.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b3e:	a101      	add	r1, pc, #4	; (adr r1, 8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8005b40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b44:	08005e49 	.word	0x08005e49
 8005b48:	08005f29 	.word	0x08005f29
 8005b4c:	08007c99 	.word	0x08007c99
 8005b50:	08005fe9 	.word	0x08005fe9
 8005b54:	08007c99 	.word	0x08007c99
 8005b58:	08007c99 	.word	0x08007c99
 8005b5c:	08007c99 	.word	0x08007c99
 8005b60:	080060b9 	.word	0x080060b9
 8005b64:	08007c99 	.word	0x08007c99
 8005b68:	08007c99 	.word	0x08007c99
 8005b6c:	08007c99 	.word	0x08007c99
 8005b70:	08007c99 	.word	0x08007c99
 8005b74:	08007c99 	.word	0x08007c99
 8005b78:	08007c99 	.word	0x08007c99
 8005b7c:	08007c99 	.word	0x08007c99
 8005b80:	0800619b 	.word	0x0800619b
 8005b84:	08007c99 	.word	0x08007c99
 8005b88:	08007c99 	.word	0x08007c99
 8005b8c:	08007c99 	.word	0x08007c99
 8005b90:	08007c99 	.word	0x08007c99
 8005b94:	08007c99 	.word	0x08007c99
 8005b98:	08007c99 	.word	0x08007c99
 8005b9c:	08007c99 	.word	0x08007c99
 8005ba0:	08007c99 	.word	0x08007c99
 8005ba4:	08007c99 	.word	0x08007c99
 8005ba8:	08007c99 	.word	0x08007c99
 8005bac:	08007c99 	.word	0x08007c99
 8005bb0:	08007c99 	.word	0x08007c99
 8005bb4:	08007c99 	.word	0x08007c99
 8005bb8:	08007c99 	.word	0x08007c99
 8005bbc:	08007c99 	.word	0x08007c99
 8005bc0:	08006271 	.word	0x08006271
 8005bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bc8:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	f000 83ba 	beq.w	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0xcd6>
 8005bd2:	f002 b861 	b.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005bd6:	bf00      	nop
 8005bd8:	80000001 	.word	0x80000001
 8005bdc:	40000001 	.word	0x40000001
 8005be0:	20000001 	.word	0x20000001
 8005be4:	10000001 	.word	0x10000001
 8005be8:	08000001 	.word	0x08000001
 8005bec:	04000001 	.word	0x04000001
 8005bf0:	00400001 	.word	0x00400001
 8005bf4:	00200001 	.word	0x00200001
 8005bf8:	00100001 	.word	0x00100001
 8005bfc:	00080001 	.word	0x00080001
 8005c00:	00040001 	.word	0x00040001
 8005c04:	00020001 	.word	0x00020001
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005c08:	4b9f      	ldr	r3, [pc, #636]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c0e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005c12:	633b      	str	r3, [r7, #48]	; 0x30
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c1a:	d036      	beq.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c22:	d86b      	bhi.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c2a:	d02b      	beq.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c32:	d863      	bhi.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c3a:	d01b      	beq.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c42:	d85b      	bhi.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d004      	beq.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c50:	d008      	beq.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
 8005c52:	e053      	b.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c54:	f107 0320 	add.w	r3, r7, #32
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff f8cb 	bl	8004df4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c62:	e04e      	b.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c64:	f107 0314 	add.w	r3, r7, #20
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff fa2d 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c72:	e046      	b.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c74:	f107 0308 	add.w	r3, r7, #8
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff fb8f 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c82:	e03e      	b.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005c84:	4b81      	ldr	r3, [pc, #516]	; (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005c86:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c88:	e03b      	b.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c8a:	4b7f      	ldr	r3, [pc, #508]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c90:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005c94:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c96:	4b7c      	ldr	r3, [pc, #496]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d10c      	bne.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ca8:	4b77      	ldr	r3, [pc, #476]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	08db      	lsrs	r3, r3, #3
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	4a77      	ldr	r2, [pc, #476]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cba:	e01e      	b.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cbc:	4b72      	ldr	r3, [pc, #456]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cc8:	d106      	bne.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd0:	d102      	bne.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005cd2:	4b70      	ldr	r3, [pc, #448]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd6:	e010      	b.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005cd8:	4b6b      	ldr	r3, [pc, #428]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ce4:	d106      	bne.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cec:	d102      	bne.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005cee:	4b6a      	ldr	r3, [pc, #424]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf2:	e002      	b.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005cf8:	e003      	b.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8005cfa:	e002      	b.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          default :
          {
            frequency = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d00:	bf00      	nop
          }
        }
        break;
 8005d02:	f001 bfcc 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005d06:	4b60      	ldr	r3, [pc, #384]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d0c:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005d10:	633b      	str	r3, [r7, #48]	; 0x30
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d18:	d036      	beq.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d20:	d86b      	bhi.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005d28:	d02b      	beq.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005d30:	d863      	bhi.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d38:	d01b      	beq.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d40:	d85b      	bhi.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d4e:	d008      	beq.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
 8005d50:	e053      	b.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x78a>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d52:	f107 0320 	add.w	r3, r7, #32
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff f84c 	bl	8004df4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d60:	e04e      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d62:	f107 0314 	add.w	r3, r7, #20
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff f9ae 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d70:	e046      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d72:	f107 0308 	add.w	r3, r7, #8
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fb10 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d80:	e03e      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005d82:	4b42      	ldr	r3, [pc, #264]	; (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d86:	e03b      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d88:	4b3f      	ldr	r3, [pc, #252]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005d8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d8e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d94:	4b3c      	ldr	r3, [pc, #240]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d10c      	bne.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005da6:	4b38      	ldr	r3, [pc, #224]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	08db      	lsrs	r3, r3, #3
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	4a37      	ldr	r2, [pc, #220]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005db2:	fa22 f303 	lsr.w	r3, r2, r3
 8005db6:	637b      	str	r3, [r7, #52]	; 0x34
 8005db8:	e01e      	b.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005dba:	4b33      	ldr	r3, [pc, #204]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc6:	d106      	bne.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dce:	d102      	bne.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005dd0:	4b30      	ldr	r3, [pc, #192]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd4:	e010      	b.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005dd6:	4b2c      	ldr	r3, [pc, #176]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005de2:	d106      	bne.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dea:	d102      	bne.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005dec:	4b2a      	ldr	r3, [pc, #168]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005dee:	637b      	str	r3, [r7, #52]	; 0x34
 8005df0:	e002      	b.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005df6:	e003      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
 8005df8:	e002      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          default :
          {
            frequency = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005dfe:	bf00      	nop
          }
        }
        break;
 8005e00:	f001 bf4d 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005e04:	4b20      	ldr	r3, [pc, #128]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0e:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d108      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e16:	f107 0320 	add.w	r3, r7, #32
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fe ffea 	bl	8004df4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e24:	f001 bf3b 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d108      	bne.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e2e:	f107 0314 	add.w	r3, r7, #20
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff f948 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e3c:	f001 bf2f 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e44:	f001 bf2b 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005e48:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d104      	bne.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005e5a:	f7fd f859 	bl	8002f10 <HAL_RCC_GetPCLK2Freq>
 8005e5e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005e60:	f001 bf1d 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005e64:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e70:	d114      	bne.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d111      	bne.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e78:	f107 0314 	add.w	r3, r7, #20
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff f923 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	637b      	str	r3, [r7, #52]	; 0x34
 8005e86:	e04d      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 8005e88:	44020c00 	.word	0x44020c00
 8005e8c:	00bb8000 	.word	0x00bb8000
 8005e90:	03d09000 	.word	0x03d09000
 8005e94:	003d0900 	.word	0x003d0900
 8005e98:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005e9c:	4ba0      	ldr	r3, [pc, #640]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ea8:	d10a      	bne.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d107      	bne.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eb0:	f107 0308 	add.w	r3, r7, #8
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fa71 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ebe:	e031      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005ec0:	4b97      	ldr	r3, [pc, #604]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d10c      	bne.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d109      	bne.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ed2:	4b93      	ldr	r3, [pc, #588]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	08db      	lsrs	r3, r3, #3
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	4a91      	ldr	r2, [pc, #580]	; (8006124 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005ede:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ee4:	e01e      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005ee6:	4b8e      	ldr	r3, [pc, #568]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef2:	d105      	bne.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d102      	bne.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = CSI_VALUE;
 8005efa:	4b8b      	ldr	r3, [pc, #556]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005efc:	637b      	str	r3, [r7, #52]	; 0x34
 8005efe:	e011      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005f00:	4b87      	ldr	r3, [pc, #540]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d106      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	2b05      	cmp	r3, #5
 8005f12:	d103      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          frequency = LSE_VALUE;
 8005f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f18:	637b      	str	r3, [r7, #52]	; 0x34
 8005f1a:	e003      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f20:	f001 bebd 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8005f24:	f001 bebb 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005f28:	4b7d      	ldr	r3, [pc, #500]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f32:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d104      	bne.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f3a:	f7fc ffd3 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8005f3e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f40:	f001 bead 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005f44:	4b76      	ldr	r3, [pc, #472]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f50:	d10a      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d107      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f58:	f107 0314 	add.w	r3, r7, #20
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff f8b3 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	637b      	str	r3, [r7, #52]	; 0x34
 8005f66:	e03d      	b.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	2b10      	cmp	r3, #16
 8005f6c:	d108      	bne.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f6e:	f107 0308 	add.w	r3, r7, #8
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff fa12 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f7c:	f001 be8f 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005f80:	4b67      	ldr	r3, [pc, #412]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d10c      	bne.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	2b18      	cmp	r3, #24
 8005f90:	d109      	bne.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f92:	4b63      	ldr	r3, [pc, #396]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	08db      	lsrs	r3, r3, #3
 8005f98:	f003 0303 	and.w	r3, r3, #3
 8005f9c:	4a61      	ldr	r2, [pc, #388]	; (8006124 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa4:	e01e      	b.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005fa6:	4b5e      	ldr	r3, [pc, #376]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb2:	d105      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d102      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
          frequency = CSI_VALUE;
 8005fba:	4b5b      	ldr	r3, [pc, #364]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fbe:	e011      	b.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005fc0:	4b57      	ldr	r3, [pc, #348]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d106      	bne.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	2b28      	cmp	r3, #40	; 0x28
 8005fd2:	d103      	bne.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = LSE_VALUE;
 8005fd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005fda:	e003      	b.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fe0:	f001 be5d 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8005fe4:	f001 be5b 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005fe8:	4b4d      	ldr	r3, [pc, #308]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005fee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005ff2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ffa:	f7fc ff73 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8005ffe:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006000:	f001 be4d 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006004:	4b46      	ldr	r3, [pc, #280]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800600c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006010:	d10a      	bne.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	2b40      	cmp	r3, #64	; 0x40
 8006016:	d107      	bne.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006018:	f107 0314 	add.w	r3, r7, #20
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff f853 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
 8006026:	e045      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006028:	4b3d      	ldr	r3, [pc, #244]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006034:	d10a      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	2b80      	cmp	r3, #128	; 0x80
 800603a:	d107      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800603c:	f107 0308 	add.w	r3, r7, #8
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff f9ab 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	637b      	str	r3, [r7, #52]	; 0x34
 800604a:	e033      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800604c:	4b34      	ldr	r3, [pc, #208]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b02      	cmp	r3, #2
 8006056:	d10c      	bne.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	2bc0      	cmp	r3, #192	; 0xc0
 800605c:	d109      	bne.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800605e:	4b30      	ldr	r3, [pc, #192]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	08db      	lsrs	r3, r3, #3
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	4a2e      	ldr	r2, [pc, #184]	; (8006124 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800606a:	fa22 f303 	lsr.w	r3, r2, r3
 800606e:	637b      	str	r3, [r7, #52]	; 0x34
 8006070:	e020      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006072:	4b2b      	ldr	r3, [pc, #172]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800607a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607e:	d106      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006086:	d102      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          frequency = CSI_VALUE;
 8006088:	4b27      	ldr	r3, [pc, #156]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
 800608c:	e012      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800608e:	4b24      	ldr	r3, [pc, #144]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b02      	cmp	r3, #2
 800609a:	d107      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80060a2:	d103      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
          frequency = LSE_VALUE;
 80060a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a8:	637b      	str	r3, [r7, #52]	; 0x34
 80060aa:	e003      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          frequency = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060b0:	f001 bdf5 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80060b4:	f001 bdf3 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80060b8:	4b19      	ldr	r3, [pc, #100]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80060ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80060be:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80060c2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80060ca:	f7fc ff0b 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 80060ce:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80060d0:	f001 bde5 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80060d4:	4b12      	ldr	r3, [pc, #72]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060e0:	d10b      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e8:	d107      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ea:	f107 0314 	add.w	r3, r7, #20
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe ffea 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	637b      	str	r3, [r7, #52]	; 0x34
 80060f8:	e04d      	b.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80060fa:	4b09      	ldr	r3, [pc, #36]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006106:	d111      	bne.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610e:	d10d      	bne.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006110:	f107 0308 	add.w	r3, r7, #8
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff f941 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
 800611e:	e03a      	b.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
 8006120:	44020c00 	.word	0x44020c00
 8006124:	03d09000 	.word	0x03d09000
 8006128:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800612c:	4ba0      	ldr	r3, [pc, #640]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b02      	cmp	r3, #2
 8006136:	d10d      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800613e:	d109      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006140:	4b9b      	ldr	r3, [pc, #620]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	08db      	lsrs	r3, r3, #3
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	4a9a      	ldr	r2, [pc, #616]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
 8006152:	e020      	b.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006154:	4b96      	ldr	r3, [pc, #600]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800615c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006160:	d106      	bne.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006168:	d102      	bne.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = CSI_VALUE;
 800616a:	4b93      	ldr	r3, [pc, #588]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800616c:	637b      	str	r3, [r7, #52]	; 0x34
 800616e:	e012      	b.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006170:	4b8f      	ldr	r3, [pc, #572]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b02      	cmp	r3, #2
 800617c:	d107      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006184:	d103      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          frequency = LSE_VALUE;
 8006186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
 800618c:	e003      	b.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
          frequency = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006192:	f001 bd84 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006196:	f001 bd82 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800619a:	4b85      	ldr	r3, [pc, #532]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800619c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80061a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80061a4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d104      	bne.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80061ac:	f7fc fe9a 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 80061b0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80061b2:	f001 bd74 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80061b6:	4b7e      	ldr	r3, [pc, #504]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061c2:	d10b      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80061c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ca:	d107      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061cc:	f107 0314 	add.w	r3, r7, #20
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe ff79 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
 80061da:	e047      	b.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80061dc:	4b74      	ldr	r3, [pc, #464]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061e8:	d10b      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f0:	d107      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061f2:	f107 0308 	add.w	r3, r7, #8
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff f8d0 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006200:	e034      	b.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006202:	4b6b      	ldr	r3, [pc, #428]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b02      	cmp	r3, #2
 800620c:	d10d      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006214:	d109      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006216:	4b66      	ldr	r3, [pc, #408]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	08db      	lsrs	r3, r3, #3
 800621c:	f003 0303 	and.w	r3, r3, #3
 8006220:	4a64      	ldr	r2, [pc, #400]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006222:	fa22 f303 	lsr.w	r3, r2, r3
 8006226:	637b      	str	r3, [r7, #52]	; 0x34
 8006228:	e020      	b.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800622a:	4b61      	ldr	r3, [pc, #388]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006236:	d106      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800623e:	d102      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
          frequency = CSI_VALUE;
 8006240:	4b5d      	ldr	r3, [pc, #372]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006242:	637b      	str	r3, [r7, #52]	; 0x34
 8006244:	e012      	b.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006246:	4b5a      	ldr	r3, [pc, #360]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b02      	cmp	r3, #2
 8006252:	d107      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800625a:	d103      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
          frequency = LSE_VALUE;
 800625c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
 8006262:	e003      	b.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
          frequency = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006268:	f001 bd19 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800626c:	f001 bd17 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006270:	4b4f      	ldr	r3, [pc, #316]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006272:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006276:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800627a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	2b00      	cmp	r3, #0
 8006280:	d104      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006282:	f7fc fe2f 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8006286:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006288:	f001 bd09 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800628c:	4b48      	ldr	r3, [pc, #288]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006298:	d10b      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a0:	d107      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062a2:	f107 0314 	add.w	r3, r7, #20
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe ff0e 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	637b      	str	r3, [r7, #52]	; 0x34
 80062b0:	e047      	b.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80062b2:	4b3f      	ldr	r3, [pc, #252]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062be:	d10b      	bne.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c6:	d107      	bne.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062c8:	f107 0308 	add.w	r3, r7, #8
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff f865 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	637b      	str	r3, [r7, #52]	; 0x34
 80062d6:	e034      	b.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80062d8:	4b35      	ldr	r3, [pc, #212]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d10d      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80062ea:	d109      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062ec:	4b30      	ldr	r3, [pc, #192]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	08db      	lsrs	r3, r3, #3
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	4a2f      	ldr	r2, [pc, #188]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
 80062fc:	637b      	str	r3, [r7, #52]	; 0x34
 80062fe:	e020      	b.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006300:	4b2b      	ldr	r3, [pc, #172]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800630c:	d106      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006314:	d102      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
          frequency = CSI_VALUE;
 8006316:	4b28      	ldr	r3, [pc, #160]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
 800631a:	e012      	b.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800631c:	4b24      	ldr	r3, [pc, #144]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800631e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b02      	cmp	r3, #2
 8006328:	d107      	bne.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006330:	d103      	bne.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
          frequency = LSE_VALUE;
 8006332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006336:	637b      	str	r3, [r7, #52]	; 0x34
 8006338:	e003      	b.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
          frequency = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800633e:	f001 bcae 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006342:	f001 bcac 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8006346:	4b1a      	ldr	r3, [pc, #104]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006348:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800634c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8006350:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	2b00      	cmp	r3, #0
 8006356:	d104      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006358:	f7fc fdc4 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 800635c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800635e:	f001 bc9e 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8006362:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800636a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800636e:	d10b      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006376:	d107      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006378:	f107 0314 	add.w	r3, r7, #20
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe fea3 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
 8006386:	e04e      	b.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8006388:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006394:	d112      	bne.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800639c:	d10e      	bne.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800639e:	f107 0308 	add.w	r3, r7, #8
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fffa 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	637b      	str	r3, [r7, #52]	; 0x34
 80063ac:	e03b      	b.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 80063ae:	bf00      	nop
 80063b0:	44020c00 	.word	0x44020c00
 80063b4:	03d09000 	.word	0x03d09000
 80063b8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80063bc:	4ba0      	ldr	r3, [pc, #640]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d10d      	bne.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80063ce:	d109      	bne.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063d0:	4b9b      	ldr	r3, [pc, #620]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	08db      	lsrs	r3, r3, #3
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	4a9a      	ldr	r2, [pc, #616]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 80063dc:	fa22 f303 	lsr.w	r3, r2, r3
 80063e0:	637b      	str	r3, [r7, #52]	; 0x34
 80063e2:	e020      	b.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80063e4:	4b96      	ldr	r3, [pc, #600]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f0:	d106      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063f8:	d102      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
          frequency = CSI_VALUE;
 80063fa:	4b93      	ldr	r3, [pc, #588]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 80063fc:	637b      	str	r3, [r7, #52]	; 0x34
 80063fe:	e012      	b.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8006400:	4b8f      	ldr	r3, [pc, #572]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006402:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b02      	cmp	r3, #2
 800640c:	d107      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006414:	d103      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
          frequency = LSE_VALUE;
 8006416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641a:	637b      	str	r3, [r7, #52]	; 0x34
 800641c:	e003      	b.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
          frequency = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006422:	f001 bc3c 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006426:	f001 bc3a 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800642a:	4b85      	ldr	r3, [pc, #532]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800642c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006430:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006434:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800643c:	f7fc fd52 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8006440:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8006442:	f001 bc2c 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8006446:	4b7e      	ldr	r3, [pc, #504]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800644e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006452:	d10b      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800645a:	d107      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800645c:	f107 0314 	add.w	r3, r7, #20
 8006460:	4618      	mov	r0, r3
 8006462:	f7fe fe31 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	637b      	str	r3, [r7, #52]	; 0x34
 800646a:	e047      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800646c:	4b74      	ldr	r3, [pc, #464]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006478:	d10b      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006480:	d107      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006482:	f107 0308 	add.w	r3, r7, #8
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe ff88 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	637b      	str	r3, [r7, #52]	; 0x34
 8006490:	e034      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8006492:	4b6b      	ldr	r3, [pc, #428]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b02      	cmp	r3, #2
 800649c:	d10d      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064a4:	d109      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064a6:	4b66      	ldr	r3, [pc, #408]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	08db      	lsrs	r3, r3, #3
 80064ac:	f003 0303 	and.w	r3, r3, #3
 80064b0:	4a64      	ldr	r2, [pc, #400]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 80064b2:	fa22 f303 	lsr.w	r3, r2, r3
 80064b6:	637b      	str	r3, [r7, #52]	; 0x34
 80064b8:	e020      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80064ba:	4b61      	ldr	r3, [pc, #388]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c6:	d106      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064ce:	d102      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
          frequency = CSI_VALUE;
 80064d0:	4b5d      	ldr	r3, [pc, #372]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 80064d2:	637b      	str	r3, [r7, #52]	; 0x34
 80064d4:	e012      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80064d6:	4b5a      	ldr	r3, [pc, #360]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80064d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d107      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80064ea:	d103      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
          frequency = LSE_VALUE;
 80064ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f0:	637b      	str	r3, [r7, #52]	; 0x34
 80064f2:	e003      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
          frequency = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064f8:	f001 bbd1 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80064fc:	f001 bbcf 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8006500:	4b4f      	ldr	r3, [pc, #316]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006502:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006506:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800650a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	2b00      	cmp	r3, #0
 8006510:	d104      	bne.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006512:	f7fc fce7 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8006516:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8006518:	f001 bbc1 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800651c:	4b48      	ldr	r3, [pc, #288]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006528:	d10b      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006530:	d107      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006532:	f107 0314 	add.w	r3, r7, #20
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe fdc6 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	637b      	str	r3, [r7, #52]	; 0x34
 8006540:	e047      	b.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8006542:	4b3f      	ldr	r3, [pc, #252]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800654a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800654e:	d10b      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006556:	d107      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006558:	f107 0308 	add.w	r3, r7, #8
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe ff1d 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
 8006566:	e034      	b.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8006568:	4b35      	ldr	r3, [pc, #212]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b02      	cmp	r3, #2
 8006572:	d10d      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800657a:	d109      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800657c:	4b30      	ldr	r3, [pc, #192]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	08db      	lsrs	r3, r3, #3
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	4a2f      	ldr	r2, [pc, #188]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
 800658e:	e020      	b.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8006590:	4b2b      	ldr	r3, [pc, #172]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800659c:	d106      	bne.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065a4:	d102      	bne.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
          frequency = CSI_VALUE;
 80065a6:	4b28      	ldr	r3, [pc, #160]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 80065a8:	637b      	str	r3, [r7, #52]	; 0x34
 80065aa:	e012      	b.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80065ac:	4b24      	ldr	r3, [pc, #144]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80065ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d107      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80065c0:	d103      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
          frequency = LSE_VALUE;
 80065c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c6:	637b      	str	r3, [r7, #52]	; 0x34
 80065c8:	e003      	b.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
          frequency = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065ce:	f001 bb66 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80065d2:	f001 bb64 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80065d6:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80065d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80065dc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80065e0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d104      	bne.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065e8:	f7fc fc7c 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 80065ec:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80065ee:	f001 bb56 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80065f2:	4b13      	ldr	r3, [pc, #76]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065fe:	d10b      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006606:	d107      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006608:	f107 0314 	add.w	r3, r7, #20
 800660c:	4618      	mov	r0, r3
 800660e:	f7fe fd5b 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
 8006616:	e04e      	b.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8006618:	4b09      	ldr	r3, [pc, #36]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006624:	d112      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800662c:	d10e      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800662e:	f107 0308 	add.w	r3, r7, #8
 8006632:	4618      	mov	r0, r3
 8006634:	f7fe feb2 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
 800663c:	e03b      	b.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
 800663e:	bf00      	nop
 8006640:	44020c00 	.word	0x44020c00
 8006644:	03d09000 	.word	0x03d09000
 8006648:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800664c:	4b9f      	ldr	r3, [pc, #636]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b02      	cmp	r3, #2
 8006656:	d10d      	bne.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
 8006658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800665e:	d109      	bne.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006660:	4b9a      	ldr	r3, [pc, #616]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	08db      	lsrs	r3, r3, #3
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	4a99      	ldr	r2, [pc, #612]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 800666c:	fa22 f303 	lsr.w	r3, r2, r3
 8006670:	637b      	str	r3, [r7, #52]	; 0x34
 8006672:	e020      	b.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8006674:	4b95      	ldr	r3, [pc, #596]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800667c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006680:	d106      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006688:	d102      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
          frequency = CSI_VALUE;
 800668a:	4b92      	ldr	r3, [pc, #584]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 800668c:	637b      	str	r3, [r7, #52]	; 0x34
 800668e:	e012      	b.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8006690:	4b8e      	ldr	r3, [pc, #568]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006692:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b02      	cmp	r3, #2
 800669c:	d107      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80066a4:	d103      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
          frequency = LSE_VALUE;
 80066a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066aa:	637b      	str	r3, [r7, #52]	; 0x34
 80066ac:	e003      	b.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
          frequency = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066b2:	f001 baf4 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80066b6:	f001 baf2 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80066ba:	4b84      	ldr	r3, [pc, #528]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80066bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d104      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066cc:	f7fc fc0a 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 80066d0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80066d2:	f001 bae4 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80066d6:	4b7d      	ldr	r3, [pc, #500]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066e2:	d10a      	bne.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d107      	bne.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ea:	f107 0314 	add.w	r3, r7, #20
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fe fcea 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	637b      	str	r3, [r7, #52]	; 0x34
 80066f8:	e043      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80066fa:	4b74      	ldr	r3, [pc, #464]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006706:	d10a      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	2b02      	cmp	r3, #2
 800670c:	d107      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800670e:	f107 0308 	add.w	r3, r7, #8
 8006712:	4618      	mov	r0, r3
 8006714:	f7fe fe42 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	637b      	str	r3, [r7, #52]	; 0x34
 800671c:	e031      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800671e:	4b6b      	ldr	r3, [pc, #428]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b02      	cmp	r3, #2
 8006728:	d10c      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	2b03      	cmp	r3, #3
 800672e:	d109      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006730:	4b66      	ldr	r3, [pc, #408]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	08db      	lsrs	r3, r3, #3
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	4a65      	ldr	r2, [pc, #404]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 800673c:	fa22 f303 	lsr.w	r3, r2, r3
 8006740:	637b      	str	r3, [r7, #52]	; 0x34
 8006742:	e01e      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006744:	4b61      	ldr	r3, [pc, #388]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800674c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006750:	d105      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	2b04      	cmp	r3, #4
 8006756:	d102      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
          frequency = CSI_VALUE;
 8006758:	4b5e      	ldr	r3, [pc, #376]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 800675a:	637b      	str	r3, [r7, #52]	; 0x34
 800675c:	e011      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800675e:	4b5b      	ldr	r3, [pc, #364]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b02      	cmp	r3, #2
 800676a:	d106      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	2b05      	cmp	r3, #5
 8006770:	d103      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
          frequency = LSE_VALUE;
 8006772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
 8006778:	e003      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
          frequency = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800677e:	f001 ba8e 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006782:	f001 ba8c 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006786:	4b51      	ldr	r3, [pc, #324]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006788:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800678c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006790:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	2b00      	cmp	r3, #0
 8006796:	d104      	bne.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006798:	f7fc fba4 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 800679c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800679e:	f001 ba7e 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80067a2:	4b4a      	ldr	r3, [pc, #296]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ae:	d10a      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	2b10      	cmp	r3, #16
 80067b4:	d107      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067b6:	f107 0314 	add.w	r3, r7, #20
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fc84 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	637b      	str	r3, [r7, #52]	; 0x34
 80067c4:	e043      	b.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80067c6:	4b41      	ldr	r3, [pc, #260]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067d2:	d10a      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	2b20      	cmp	r3, #32
 80067d8:	d107      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067da:	f107 0308 	add.w	r3, r7, #8
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fe fddc 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	637b      	str	r3, [r7, #52]	; 0x34
 80067e8:	e031      	b.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80067ea:	4b38      	ldr	r3, [pc, #224]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d10c      	bne.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	2b30      	cmp	r3, #48	; 0x30
 80067fa:	d109      	bne.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067fc:	4b33      	ldr	r3, [pc, #204]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	08db      	lsrs	r3, r3, #3
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	4a32      	ldr	r2, [pc, #200]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
 800680c:	637b      	str	r3, [r7, #52]	; 0x34
 800680e:	e01e      	b.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006810:	4b2e      	ldr	r3, [pc, #184]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800681c:	d105      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d102      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
          frequency = CSI_VALUE;
 8006824:	4b2b      	ldr	r3, [pc, #172]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 8006826:	637b      	str	r3, [r7, #52]	; 0x34
 8006828:	e011      	b.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800682a:	4b28      	ldr	r3, [pc, #160]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800682c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b02      	cmp	r3, #2
 8006836:	d106      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	2b50      	cmp	r3, #80	; 0x50
 800683c:	d103      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = LSE_VALUE;
 800683e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006842:	637b      	str	r3, [r7, #52]	; 0x34
 8006844:	e003      	b.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
          frequency = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800684a:	f001 ba28 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800684e:	f001 ba26 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006852:	4b1e      	ldr	r3, [pc, #120]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006858:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800685c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006864:	f7fc fb6a 	bl	8002f3c <HAL_RCC_GetPCLK3Freq>
 8006868:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800686a:	f001 ba18 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006874:	d108      	bne.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006876:	f107 0314 	add.w	r3, r7, #20
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fc24 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006884:	f001 ba0b 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800688e:	d108      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006890:	f107 0308 	add.w	r3, r7, #8
 8006894:	4618      	mov	r0, r3
 8006896:	f7fe fd81 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800689e:	f001 b9fe 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80068a2:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d114      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068b4:	d110      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068b6:	4b05      	ldr	r3, [pc, #20]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	08db      	lsrs	r3, r3, #3
 80068bc:	f003 0303 	and.w	r3, r3, #3
 80068c0:	4a03      	ldr	r2, [pc, #12]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 80068c2:	fa22 f303 	lsr.w	r3, r2, r3
 80068c6:	637b      	str	r3, [r7, #52]	; 0x34
 80068c8:	e027      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
 80068ca:	bf00      	nop
 80068cc:	44020c00 	.word	0x44020c00
 80068d0:	03d09000 	.word	0x03d09000
 80068d4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80068d8:	4ba0      	ldr	r3, [pc, #640]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e4:	d106      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068ec:	d102      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
          frequency = CSI_VALUE;
 80068ee:	4b9c      	ldr	r3, [pc, #624]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
 80068f2:	e012      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80068f4:	4b99      	ldr	r3, [pc, #612]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80068f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d107      	bne.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006908:	d103      	bne.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
          frequency = LSE_VALUE;
 800690a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800690e:	637b      	str	r3, [r7, #52]	; 0x34
 8006910:	e003      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
          frequency = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006916:	f001 b9c2 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800691a:	f001 b9c0 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800691e:	4b8f      	ldr	r3, [pc, #572]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	2b00      	cmp	r3, #0
 800692e:	d104      	bne.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006930:	f7fc fabc 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8006934:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006936:	f001 b9b2 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	2b01      	cmp	r3, #1
 800693e:	d104      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
          frequency = HAL_RCC_GetSysClockFreq();
 8006940:	f7fc f988 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8006944:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006946:	f001 b9aa 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	2b02      	cmp	r3, #2
 800694e:	d108      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006950:	f107 0314 	add.w	r3, r7, #20
 8006954:	4618      	mov	r0, r3
 8006956:	f7fe fbb7 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800695e:	f001 b99e 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006962:	4b7e      	ldr	r3, [pc, #504]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800696e:	d105      	bne.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	2b03      	cmp	r3, #3
 8006974:	d102      	bne.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
          frequency = HSE_VALUE;
 8006976:	4b7b      	ldr	r3, [pc, #492]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>)
 8006978:	637b      	str	r3, [r7, #52]	; 0x34
 800697a:	e023      	b.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800697c:	4b77      	ldr	r3, [pc, #476]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b02      	cmp	r3, #2
 8006986:	d10c      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
 8006988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698a:	2b04      	cmp	r3, #4
 800698c:	d109      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800698e:	4b73      	ldr	r3, [pc, #460]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	08db      	lsrs	r3, r3, #3
 8006994:	f003 0303 	and.w	r3, r3, #3
 8006998:	4a73      	ldr	r2, [pc, #460]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 800699a:	fa22 f303 	lsr.w	r3, r2, r3
 800699e:	637b      	str	r3, [r7, #52]	; 0x34
 80069a0:	e010      	b.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80069a2:	4b6e      	ldr	r3, [pc, #440]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ae:	d105      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	2b05      	cmp	r3, #5
 80069b4:	d102      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
          frequency = CSI_VALUE;
 80069b6:	4b6a      	ldr	r3, [pc, #424]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 80069b8:	637b      	str	r3, [r7, #52]	; 0x34
 80069ba:	e003      	b.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
          frequency = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069c0:	f001 b96d 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80069c4:	f001 b96b 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80069c8:	4b64      	ldr	r3, [pc, #400]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80069ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80069d4:	4b61      	ldr	r3, [pc, #388]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80069d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d106      	bne.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d103      	bne.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
        {
          frequency = LSE_VALUE;
 80069e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
 80069ee:	e012      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80069f0:	4b5a      	ldr	r3, [pc, #360]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80069f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069fe:	d106      	bne.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d103      	bne.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
        {
          frequency = LSI_VALUE;
 8006a06:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0c:	e003      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006a12:	f001 b944 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006a16:	f001 b942 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006a1a:	4b50      	ldr	r3, [pc, #320]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006a1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a24:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a2c:	f7fc fa5a 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8006a30:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a32:	f001 b934 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a3c:	d108      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a3e:	f107 0308 	add.w	r3, r7, #8
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fcaa 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a4c:	f001 b927 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006a50:	4b42      	ldr	r3, [pc, #264]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d10d      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a62:	d109      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a64:	4b3d      	ldr	r3, [pc, #244]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	08db      	lsrs	r3, r3, #3
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	4a3e      	ldr	r2, [pc, #248]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 8006a70:	fa22 f303 	lsr.w	r3, r2, r3
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
 8006a76:	e011      	b.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006a78:	4b38      	ldr	r3, [pc, #224]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a84:	d106      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a8c:	d102      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
          frequency = CSI_VALUE;
 8006a8e:	4b34      	ldr	r3, [pc, #208]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8006a90:	637b      	str	r3, [r7, #52]	; 0x34
 8006a92:	e003      	b.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
          frequency = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a98:	f001 b901 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006a9c:	f001 b8ff 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006aa0:	4b2e      	ldr	r3, [pc, #184]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006aa2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006aa6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006aaa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x144c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ab2:	f7fc fa17 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8006ab6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ab8:	f001 b8f1 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ac2:	d108      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x1466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ac4:	f107 0308 	add.w	r3, r7, #8
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe fc67 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ad2:	f001 b8e4 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006ad6:	4b21      	ldr	r3, [pc, #132]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d10d      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ae8:	d109      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006aea:	4b1c      	ldr	r3, [pc, #112]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	08db      	lsrs	r3, r3, #3
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	4a1c      	ldr	r2, [pc, #112]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 8006af6:	fa22 f303 	lsr.w	r3, r2, r3
 8006afa:	637b      	str	r3, [r7, #52]	; 0x34
 8006afc:	e011      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006afe:	4b17      	ldr	r3, [pc, #92]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b0a:	d106      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b12:	d102      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
          frequency = CSI_VALUE;
 8006b14:	4b12      	ldr	r3, [pc, #72]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
 8006b18:	e003      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
          frequency = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b1e:	f001 b8be 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006b22:	f001 b8bc 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006b26:	4b0d      	ldr	r3, [pc, #52]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006b28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b2c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006b30:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x14d2>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006b38:	f7fc fa00 	bl	8002f3c <HAL_RCC_GetPCLK3Freq>
 8006b3c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b3e:	f001 b8ae 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b48:	d110      	bne.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x14fc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b4a:	f107 0308 	add.w	r3, r7, #8
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fc24 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b58:	f001 b8a1 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006b5c:	44020c00 	.word	0x44020c00
 8006b60:	003d0900 	.word	0x003d0900
 8006b64:	017d7840 	.word	0x017d7840
 8006b68:	03d09000 	.word	0x03d09000
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006b6c:	4b9e      	ldr	r3, [pc, #632]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d10d      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
 8006b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b7e:	d109      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b80:	4b99      	ldr	r3, [pc, #612]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	08db      	lsrs	r3, r3, #3
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	4a98      	ldr	r2, [pc, #608]	; (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
 8006b92:	e011      	b.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006b94:	4b94      	ldr	r3, [pc, #592]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ba0:	d106      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ba8:	d102      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
          frequency = CSI_VALUE;
 8006baa:	4b91      	ldr	r3, [pc, #580]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 8006bac:	637b      	str	r3, [r7, #52]	; 0x34
 8006bae:	e003      	b.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
          frequency = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bb4:	f001 b873 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006bb8:	f001 b871 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006bbc:	4b8a      	ldr	r3, [pc, #552]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006bbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bc2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006bc6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d104      	bne.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006bce:	f7fc f9b5 	bl	8002f3c <HAL_RCC_GetPCLK3Freq>
 8006bd2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006bd4:	f001 b863 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bde:	d108      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1582>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006be0:	f107 0308 	add.w	r3, r7, #8
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fe fbd9 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bee:	f001 b856 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006bf2:	4b7d      	ldr	r3, [pc, #500]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d10d      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c04:	d109      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c06:	4b78      	ldr	r3, [pc, #480]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	08db      	lsrs	r3, r3, #3
 8006c0c:	f003 0303 	and.w	r3, r3, #3
 8006c10:	4a76      	ldr	r2, [pc, #472]	; (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8006c12:	fa22 f303 	lsr.w	r3, r2, r3
 8006c16:	637b      	str	r3, [r7, #52]	; 0x34
 8006c18:	e011      	b.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006c1a:	4b73      	ldr	r3, [pc, #460]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c26:	d106      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c2e:	d102      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
          frequency = CSI_VALUE;
 8006c30:	4b6f      	ldr	r3, [pc, #444]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34
 8006c34:	e003      	b.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
          frequency = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c3a:	f001 b830 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006c3e:	f001 b82e 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006c42:	4b69      	ldr	r3, [pc, #420]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006c44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c48:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006c4c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c54:	f7fc f946 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8006c58:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c5a:	f001 b820 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c64:	d108      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c66:	f107 0308 	add.w	r3, r7, #8
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe fb96 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c74:	f001 b813 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006c78:	4b5b      	ldr	r3, [pc, #364]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d10e      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c8a:	d10a      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c8c:	4b56      	ldr	r3, [pc, #344]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	08db      	lsrs	r3, r3, #3
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	4a55      	ldr	r2, [pc, #340]	; (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8006c98:	fa22 f303 	lsr.w	r3, r2, r3
 8006c9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c9e:	f000 bffe 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ca6:	f000 bffa 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006caa:	4b4f      	ldr	r3, [pc, #316]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006cac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006cb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006cbc:	d056      	beq.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006cc4:	f200 808b 	bhi.w	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cce:	d03e      	beq.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x16de>
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd6:	f200 8082 	bhi.w	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce0:	d027      	beq.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16c2>
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce8:	d879      	bhi.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf0:	d017      	beq.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x16b2>
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf8:	d871      	bhi.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d004      	beq.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d06:	d004      	beq.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
 8006d08:	e069      	b.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x176e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006d0a:	f7fc f917 	bl	8002f3c <HAL_RCC_GetPCLK3Freq>
 8006d0e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006d10:	e068      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d12:	f107 0314 	add.w	r3, r7, #20
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe f9d6 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d20:	e060      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d22:	f107 0308 	add.w	r3, r7, #8
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fb38 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d30:	e058      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d32:	4b2d      	ldr	r3, [pc, #180]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d103      	bne.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x16d8>
            {
              frequency = LSE_VALUE;
 8006d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d44:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006d46:	e04d      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d4c:	e04a      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006d4e:	4b26      	ldr	r3, [pc, #152]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d5c:	d103      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            {
              frequency = LSI_VALUE;
 8006d5e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006d62:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006d64:	e03e      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d6a:	e03b      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d6c:	4b1e      	ldr	r3, [pc, #120]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006d6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d72:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d78:	4b1b      	ldr	r3, [pc, #108]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d10c      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d8a:	4b17      	ldr	r3, [pc, #92]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	08db      	lsrs	r3, r3, #3
 8006d90:	f003 0303 	and.w	r3, r3, #3
 8006d94:	4a15      	ldr	r2, [pc, #84]	; (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8006d96:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d9c:	e01e      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d9e:	4b12      	ldr	r3, [pc, #72]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006daa:	d106      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db2:	d102      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006db4:	4b0e      	ldr	r3, [pc, #56]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
 8006db8:	e010      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006dba:	4b0b      	ldr	r3, [pc, #44]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc6:	d106      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
 8006dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dce:	d102      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006dd0:	4b08      	ldr	r3, [pc, #32]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1784>)
 8006dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd4:	e002      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006dda:	e003      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
 8006ddc:	e002      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          default :
          {
            frequency = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006de2:	bf00      	nop
          }
        }
        break;
 8006de4:	f000 bf5b 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006de8:	44020c00 	.word	0x44020c00
 8006dec:	03d09000 	.word	0x03d09000
 8006df0:	003d0900 	.word	0x003d0900
 8006df4:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006df8:	4b9e      	ldr	r3, [pc, #632]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8006dfa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006dfe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006e02:	633b      	str	r3, [r7, #48]	; 0x30
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006e0a:	d056      	beq.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x184a>
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006e12:	f200 808b 	bhi.w	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e1c:	d03e      	beq.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x182c>
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e24:	f200 8082 	bhi.w	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e2e:	d027      	beq.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1810>
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e36:	d879      	bhi.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e3e:	d017      	beq.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1800>
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e46:	d871      	bhi.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8006e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d004      	beq.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e54:	d004      	beq.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8006e56:	e069      	b.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006e58:	f7fc f844 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8006e5c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006e5e:	e068      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e60:	f107 0314 	add.w	r3, r7, #20
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fe f92f 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e6e:	e060      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e70:	f107 0308 	add.w	r3, r7, #8
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fe fa91 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e7e:	e058      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e80:	4b7c      	ldr	r3, [pc, #496]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8006e82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d103      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x1826>
            {
              frequency = LSE_VALUE;
 8006e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e92:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006e94:	e04d      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e9a:	e04a      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006e9c:	4b75      	ldr	r3, [pc, #468]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8006e9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ea6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eaa:	d103      	bne.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1844>
            {
              frequency = LSI_VALUE;
 8006eac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006eb2:	e03e      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006eb8:	e03b      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006eba:	4b6e      	ldr	r3, [pc, #440]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8006ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ec0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006ec4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ec6:	4b6b      	ldr	r3, [pc, #428]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d10c      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
 8006ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d109      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ed8:	4b66      	ldr	r3, [pc, #408]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	08db      	lsrs	r3, r3, #3
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	4a65      	ldr	r2, [pc, #404]	; (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eea:	e01e      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eec:	4b61      	ldr	r3, [pc, #388]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ef8:	d106      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
 8006efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f00:	d102      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f02:	4b5e      	ldr	r3, [pc, #376]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 8006f04:	637b      	str	r3, [r7, #52]	; 0x34
 8006f06:	e010      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f08:	4b5a      	ldr	r3, [pc, #360]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f14:	d106      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
 8006f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1c:	d102      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006f1e:	4b58      	ldr	r3, [pc, #352]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 8006f20:	637b      	str	r3, [r7, #52]	; 0x34
 8006f22:	e002      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006f24:	2300      	movs	r3, #0
 8006f26:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006f28:	e003      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
 8006f2a:	e002      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          default :
          {
            frequency = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f30:	bf00      	nop
          }
        }
        break;
 8006f32:	f000 beb4 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8006f36:	4b4f      	ldr	r3, [pc, #316]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8006f38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006f3c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006f40:	633b      	str	r3, [r7, #48]	; 0x30
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f48:	d056      	beq.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1988>
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f50:	f200 808b 	bhi.w	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f5a:	d03e      	beq.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x196a>
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f62:	f200 8082 	bhi.w	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f6c:	d027      	beq.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x194e>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f74:	d879      	bhi.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f7c:	d017      	beq.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x193e>
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f84:	d871      	bhi.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1926>
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f92:	d004      	beq.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8006f94:	e069      	b.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006f96:	f7fb ffd1 	bl	8002f3c <HAL_RCC_GetPCLK3Freq>
 8006f9a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006f9c:	e068      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f9e:	f107 0314 	add.w	r3, r7, #20
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe f890 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fac:	e060      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fae:	f107 0308 	add.w	r3, r7, #8
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe f9f2 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fbc:	e058      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006fbe:	4b2d      	ldr	r3, [pc, #180]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8006fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d103      	bne.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1964>
            {
              frequency = LSE_VALUE;
 8006fcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006fd2:	e04d      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fd8:	e04a      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006fda:	4b26      	ldr	r3, [pc, #152]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8006fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fe8:	d103      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1982>
            {
              frequency = LSI_VALUE;
 8006fea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006fee:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006ff0:	e03e      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ff6:	e03b      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ff8:	4b1e      	ldr	r3, [pc, #120]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8006ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ffe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007004:	4b1b      	ldr	r3, [pc, #108]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b02      	cmp	r3, #2
 800700e:	d10c      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
 8007010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007016:	4b17      	ldr	r3, [pc, #92]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	08db      	lsrs	r3, r3, #3
 800701c:	f003 0303 	and.w	r3, r3, #3
 8007020:	4a15      	ldr	r2, [pc, #84]	; (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 8007022:	fa22 f303 	lsr.w	r3, r2, r3
 8007026:	637b      	str	r3, [r7, #52]	; 0x34
 8007028:	e01e      	b.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800702a:	4b12      	ldr	r3, [pc, #72]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007036:	d106      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800703e:	d102      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007040:	4b0e      	ldr	r3, [pc, #56]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 8007042:	637b      	str	r3, [r7, #52]	; 0x34
 8007044:	e010      	b.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007046:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800704e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007052:	d106      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
 8007054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800705a:	d102      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800705c:	4b08      	ldr	r3, [pc, #32]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 800705e:	637b      	str	r3, [r7, #52]	; 0x34
 8007060:	e002      	b.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007066:	e003      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
 8007068:	e002      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          default :
          {
            frequency = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800706e:	bf00      	nop
          }
        }
        break;
 8007070:	f000 be15 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007074:	44020c00 	.word	0x44020c00
 8007078:	03d09000 	.word	0x03d09000
 800707c:	003d0900 	.word	0x003d0900
 8007080:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007084:	4b9e      	ldr	r3, [pc, #632]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007086:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800708a:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800708e:	633b      	str	r3, [r7, #48]	; 0x30
 8007090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007092:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007096:	d056      	beq.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x1ad6>
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800709e:	f200 808b 	bhi.w	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070a8:	d03e      	beq.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x1ab8>
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070b0:	f200 8082 	bhi.w	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070ba:	d027      	beq.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x1a9c>
 80070bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070c2:	d879      	bhi.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070ca:	d017      	beq.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8c>
 80070cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070d2:	d871      	bhi.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d004      	beq.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070e0:	d004      	beq.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80070e2:	e069      	b.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80070e4:	f7fb ff2a 	bl	8002f3c <HAL_RCC_GetPCLK3Freq>
 80070e8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80070ea:	e068      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ec:	f107 0314 	add.w	r3, r7, #20
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fd ffe9 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070fa:	e060      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070fc:	f107 0308 	add.w	r3, r7, #8
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe f94b 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800710a:	e058      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800710c:	4b7c      	ldr	r3, [pc, #496]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800710e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b02      	cmp	r3, #2
 8007118:	d103      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x1ab2>
            {
              frequency = LSE_VALUE;
 800711a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800711e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007120:	e04d      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007126:	e04a      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007128:	4b75      	ldr	r3, [pc, #468]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800712a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800712e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007136:	d103      	bne.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x1ad0>
            {
              frequency = LSI_VALUE;
 8007138:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800713c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800713e:	e03e      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007144:	e03b      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007146:	4b6e      	ldr	r3, [pc, #440]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800714c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007150:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007152:	4b6b      	ldr	r3, [pc, #428]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b02      	cmp	r3, #2
 800715c:	d10c      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	2b00      	cmp	r3, #0
 8007162:	d109      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007164:	4b66      	ldr	r3, [pc, #408]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	08db      	lsrs	r3, r3, #3
 800716a:	f003 0303 	and.w	r3, r3, #3
 800716e:	4a65      	ldr	r2, [pc, #404]	; (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 8007170:	fa22 f303 	lsr.w	r3, r2, r3
 8007174:	637b      	str	r3, [r7, #52]	; 0x34
 8007176:	e01e      	b.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007178:	4b61      	ldr	r3, [pc, #388]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007184:	d106      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718c:	d102      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800718e:	4b5e      	ldr	r3, [pc, #376]	; (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 8007190:	637b      	str	r3, [r7, #52]	; 0x34
 8007192:	e010      	b.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007194:	4b5a      	ldr	r3, [pc, #360]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071a0:	d106      	bne.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071a8:	d102      	bne.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80071aa:	4b58      	ldr	r3, [pc, #352]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 80071ac:	637b      	str	r3, [r7, #52]	; 0x34
 80071ae:	e002      	b.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80071b4:	e003      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
 80071b6:	e002      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          default :
          {
            frequency = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071bc:	bf00      	nop
          }
        }
        break;
 80071be:	f000 bd6e 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80071c2:	4b4f      	ldr	r3, [pc, #316]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80071c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80071c8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80071cc:	633b      	str	r3, [r7, #48]	; 0x30
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80071d4:	d056      	beq.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x1c14>
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80071dc:	f200 808b 	bhi.w	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071e6:	d03e      	beq.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x1bf6>
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071ee:	f200 8082 	bhi.w	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071f8:	d027      	beq.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x1bda>
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007200:	d879      	bhi.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007208:	d017      	beq.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x1bca>
 800720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007210:	d871      	bhi.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	2b00      	cmp	r3, #0
 8007216:	d004      	beq.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb2>
 8007218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800721e:	d004      	beq.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007220:	e069      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007222:	f7fb fe8b 	bl	8002f3c <HAL_RCC_GetPCLK3Freq>
 8007226:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007228:	e068      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800722a:	f107 0314 	add.w	r3, r7, #20
 800722e:	4618      	mov	r0, r3
 8007230:	f7fd ff4a 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007238:	e060      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800723a:	f107 0308 	add.w	r3, r7, #8
 800723e:	4618      	mov	r0, r3
 8007240:	f7fe f8ac 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007248:	e058      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800724a:	4b2d      	ldr	r3, [pc, #180]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800724c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b02      	cmp	r3, #2
 8007256:	d103      	bne.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1bf0>
            {
              frequency = LSE_VALUE;
 8007258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800725c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800725e:	e04d      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007264:	e04a      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007266:	4b26      	ldr	r3, [pc, #152]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800726c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007274:	d103      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x1c0e>
            {
              frequency = LSI_VALUE;
 8007276:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800727a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800727c:	e03e      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007282:	e03b      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007284:	4b1e      	ldr	r3, [pc, #120]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007286:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800728a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800728e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007290:	4b1b      	ldr	r3, [pc, #108]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b02      	cmp	r3, #2
 800729a:	d10c      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
 800729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072a2:	4b17      	ldr	r3, [pc, #92]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	08db      	lsrs	r3, r3, #3
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	4a15      	ldr	r2, [pc, #84]	; (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 80072ae:	fa22 f303 	lsr.w	r3, r2, r3
 80072b2:	637b      	str	r3, [r7, #52]	; 0x34
 80072b4:	e01e      	b.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072b6:	4b12      	ldr	r3, [pc, #72]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c2:	d106      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ca:	d102      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80072cc:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
 80072d0:	e010      	b.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072d2:	4b0b      	ldr	r3, [pc, #44]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072de:	d106      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
 80072e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072e6:	d102      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072e8:	4b08      	ldr	r3, [pc, #32]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 80072ea:	637b      	str	r3, [r7, #52]	; 0x34
 80072ec:	e002      	b.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80072f2:	e003      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
 80072f4:	e002      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          default :
          {
            frequency = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072fa:	bf00      	nop
          }
        }
        break;
 80072fc:	f000 bccf 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007300:	44020c00 	.word	0x44020c00
 8007304:	03d09000 	.word	0x03d09000
 8007308:	003d0900 	.word	0x003d0900
 800730c:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007310:	4b9e      	ldr	r3, [pc, #632]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007312:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007316:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800731a:	633b      	str	r3, [r7, #48]	; 0x30
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007322:	d056      	beq.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d62>
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800732a:	f200 808b 	bhi.w	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007334:	d03e      	beq.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d44>
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800733c:	f200 8082 	bhi.w	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007346:	d027      	beq.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x1d28>
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800734e:	d879      	bhi.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007356:	d017      	beq.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x1d18>
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800735e:	d871      	bhi.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007362:	2b00      	cmp	r3, #0
 8007364:	d004      	beq.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800736c:	d004      	beq.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800736e:	e069      	b.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007370:	f7fb fde4 	bl	8002f3c <HAL_RCC_GetPCLK3Freq>
 8007374:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007376:	e068      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007378:	f107 0314 	add.w	r3, r7, #20
 800737c:	4618      	mov	r0, r3
 800737e:	f7fd fea3 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007386:	e060      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007388:	f107 0308 	add.w	r3, r7, #8
 800738c:	4618      	mov	r0, r3
 800738e:	f7fe f805 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007396:	e058      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007398:	4b7c      	ldr	r3, [pc, #496]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800739a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d103      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1d3e>
            {
              frequency = LSE_VALUE;
 80073a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073aa:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80073ac:	e04d      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073b2:	e04a      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80073b4:	4b75      	ldr	r3, [pc, #468]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80073b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073c2:	d103      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1d5c>
            {
              frequency = LSI_VALUE;
 80073c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80073c8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80073ca:	e03e      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073d0:	e03b      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073d2:	4b6e      	ldr	r3, [pc, #440]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80073d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80073d8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073de:	4b6b      	ldr	r3, [pc, #428]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d10c      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073f0:	4b66      	ldr	r3, [pc, #408]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	08db      	lsrs	r3, r3, #3
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	4a65      	ldr	r2, [pc, #404]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 80073fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007400:	637b      	str	r3, [r7, #52]	; 0x34
 8007402:	e01e      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007404:	4b61      	ldr	r3, [pc, #388]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800740c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007410:	d106      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
 8007412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007418:	d102      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800741a:	4b5e      	ldr	r3, [pc, #376]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
 800741e:	e010      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007420:	4b5a      	ldr	r3, [pc, #360]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800742c:	d106      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
 800742e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007434:	d102      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007436:	4b58      	ldr	r3, [pc, #352]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 8007438:	637b      	str	r3, [r7, #52]	; 0x34
 800743a:	e002      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800743c:	2300      	movs	r3, #0
 800743e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007440:	e003      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
 8007442:	e002      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          default :
          {
            frequency = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007448:	bf00      	nop
          }
        }
        break;
 800744a:	f000 bc28 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800744e:	4b4f      	ldr	r3, [pc, #316]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007458:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800745a:	4b4c      	ldr	r3, [pc, #304]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007466:	d106      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	2b00      	cmp	r3, #0
 800746c:	d103      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
        {
          frequency = HSE_VALUE;
 800746e:	4b4a      	ldr	r3, [pc, #296]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007472:	f000 bc14 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747c:	d108      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x1e20>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800747e:	f107 0320 	add.w	r3, r7, #32
 8007482:	4618      	mov	r0, r3
 8007484:	f7fd fcb6 	bl	8004df4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800748c:	f000 bc07 	b.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007496:	d107      	bne.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e38>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007498:	f107 0314 	add.w	r3, r7, #20
 800749c:	4618      	mov	r0, r3
 800749e:	f7fd fe13 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074a6:	e3fa      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074ac:	e3f7      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80074ae:	4b37      	ldr	r3, [pc, #220]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80074b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	633b      	str	r3, [r7, #48]	; 0x30
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	2b04      	cmp	r3, #4
 80074be:	d861      	bhi.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x1f14>
 80074c0:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e58>)
 80074c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c6:	bf00      	nop
 80074c8:	080074dd 	.word	0x080074dd
 80074cc:	080074ed 	.word	0x080074ed
 80074d0:	080074fd 	.word	0x080074fd
 80074d4:	0800750d 	.word	0x0800750d
 80074d8:	08007513 	.word	0x08007513
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074dc:	f107 0320 	add.w	r3, r7, #32
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fd fc87 	bl	8004df4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074ea:	e04e      	b.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ec:	f107 0314 	add.w	r3, r7, #20
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fd fde9 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074fa:	e046      	b.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074fc:	f107 0308 	add.w	r3, r7, #8
 8007500:	4618      	mov	r0, r3
 8007502:	f7fd ff4b 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800750a:	e03e      	b.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800750c:	4b23      	ldr	r3, [pc, #140]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x1f2c>)
 800750e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007510:	e03b      	b.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007512:	4b1e      	ldr	r3, [pc, #120]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007514:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007518:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800751c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800751e:	4b1b      	ldr	r3, [pc, #108]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b02      	cmp	r3, #2
 8007528:	d10c      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	2b00      	cmp	r3, #0
 800752e:	d109      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007530:	4b16      	ldr	r3, [pc, #88]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	08db      	lsrs	r3, r3, #3
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	4a15      	ldr	r2, [pc, #84]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 800753c:	fa22 f303 	lsr.w	r3, r2, r3
 8007540:	637b      	str	r3, [r7, #52]	; 0x34
 8007542:	e01e      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007544:	4b11      	ldr	r3, [pc, #68]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800754c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007550:	d106      	bne.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007558:	d102      	bne.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800755a:	4b0e      	ldr	r3, [pc, #56]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 800755c:	637b      	str	r3, [r7, #52]	; 0x34
 800755e:	e010      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007560:	4b0a      	ldr	r3, [pc, #40]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800756c:	d106      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007574:	d102      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007576:	4b08      	ldr	r3, [pc, #32]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 8007578:	637b      	str	r3, [r7, #52]	; 0x34
 800757a:	e002      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007580:	e003      	b.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
 8007582:	e002      	b.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          default:
          {
            frequency = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007588:	bf00      	nop
          }
        }
        break;
 800758a:	e388      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800758c:	44020c00 	.word	0x44020c00
 8007590:	03d09000 	.word	0x03d09000
 8007594:	003d0900 	.word	0x003d0900
 8007598:	017d7840 	.word	0x017d7840
 800759c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80075a0:	4ba9      	ldr	r3, [pc, #676]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80075a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075aa:	633b      	str	r3, [r7, #48]	; 0x30
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	2b20      	cmp	r3, #32
 80075b0:	f200 809a 	bhi.w	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2078>
 80075b4:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4c>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	08007641 	.word	0x08007641
 80075c0:	080076e9 	.word	0x080076e9
 80075c4:	080076e9 	.word	0x080076e9
 80075c8:	080076e9 	.word	0x080076e9
 80075cc:	080076e9 	.word	0x080076e9
 80075d0:	080076e9 	.word	0x080076e9
 80075d4:	080076e9 	.word	0x080076e9
 80075d8:	080076e9 	.word	0x080076e9
 80075dc:	08007651 	.word	0x08007651
 80075e0:	080076e9 	.word	0x080076e9
 80075e4:	080076e9 	.word	0x080076e9
 80075e8:	080076e9 	.word	0x080076e9
 80075ec:	080076e9 	.word	0x080076e9
 80075f0:	080076e9 	.word	0x080076e9
 80075f4:	080076e9 	.word	0x080076e9
 80075f8:	080076e9 	.word	0x080076e9
 80075fc:	08007661 	.word	0x08007661
 8007600:	080076e9 	.word	0x080076e9
 8007604:	080076e9 	.word	0x080076e9
 8007608:	080076e9 	.word	0x080076e9
 800760c:	080076e9 	.word	0x080076e9
 8007610:	080076e9 	.word	0x080076e9
 8007614:	080076e9 	.word	0x080076e9
 8007618:	080076e9 	.word	0x080076e9
 800761c:	08007671 	.word	0x08007671
 8007620:	080076e9 	.word	0x080076e9
 8007624:	080076e9 	.word	0x080076e9
 8007628:	080076e9 	.word	0x080076e9
 800762c:	080076e9 	.word	0x080076e9
 8007630:	080076e9 	.word	0x080076e9
 8007634:	080076e9 	.word	0x080076e9
 8007638:	080076e9 	.word	0x080076e9
 800763c:	08007677 	.word	0x08007677
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007640:	f107 0320 	add.w	r3, r7, #32
 8007644:	4618      	mov	r0, r3
 8007646:	f7fd fbd5 	bl	8004df4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800764e:	e04e      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007650:	f107 0314 	add.w	r3, r7, #20
 8007654:	4618      	mov	r0, r3
 8007656:	f7fd fd37 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800765e:	e046      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007660:	f107 0308 	add.w	r3, r7, #8
 8007664:	4618      	mov	r0, r3
 8007666:	f7fd fe99 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800766e:	e03e      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007670:	4b76      	ldr	r3, [pc, #472]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 8007672:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007674:	e03b      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007676:	4b74      	ldr	r3, [pc, #464]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800767c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007680:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007682:	4b71      	ldr	r3, [pc, #452]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b02      	cmp	r3, #2
 800768c:	d10c      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
 800768e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007690:	2b00      	cmp	r3, #0
 8007692:	d109      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007694:	4b6c      	ldr	r3, [pc, #432]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	08db      	lsrs	r3, r3, #3
 800769a:	f003 0303 	and.w	r3, r3, #3
 800769e:	4a6c      	ldr	r2, [pc, #432]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 80076a0:	fa22 f303 	lsr.w	r3, r2, r3
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
 80076a6:	e01e      	b.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076a8:	4b67      	ldr	r3, [pc, #412]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076b4:	d106      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
 80076b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076bc:	d102      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80076be:	4b65      	ldr	r3, [pc, #404]	; (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 80076c0:	637b      	str	r3, [r7, #52]	; 0x34
 80076c2:	e010      	b.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076c4:	4b60      	ldr	r3, [pc, #384]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076d0:	d106      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
 80076d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076d8:	d102      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80076da:	4b5f      	ldr	r3, [pc, #380]	; (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 80076dc:	637b      	str	r3, [r7, #52]	; 0x34
 80076de:	e002      	b.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80076e4:	e003      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
 80076e6:	e002      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          default:
          {
            frequency = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076ec:	bf00      	nop
          }
        }
        break;
 80076ee:	e2d6      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80076f0:	4b55      	ldr	r3, [pc, #340]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80076f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076f6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80076fa:	633b      	str	r3, [r7, #48]	; 0x30
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007702:	d031      	beq.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x20f8>
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770a:	d866      	bhi.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	2bc0      	cmp	r3, #192	; 0xc0
 8007710:	d027      	beq.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x20f2>
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	2bc0      	cmp	r3, #192	; 0xc0
 8007716:	d860      	bhi.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	2b80      	cmp	r3, #128	; 0x80
 800771c:	d019      	beq.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x20e2>
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	2b80      	cmp	r3, #128	; 0x80
 8007722:	d85a      	bhi.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x20c2>
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	2b40      	cmp	r3, #64	; 0x40
 800772e:	d008      	beq.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x20d2>
 8007730:	e053      	b.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007732:	f107 0320 	add.w	r3, r7, #32
 8007736:	4618      	mov	r0, r3
 8007738:	f7fd fb5c 	bl	8004df4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007740:	e04e      	b.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007742:	f107 0314 	add.w	r3, r7, #20
 8007746:	4618      	mov	r0, r3
 8007748:	f7fd fcbe 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007750:	e046      	b.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007752:	f107 0308 	add.w	r3, r7, #8
 8007756:	4618      	mov	r0, r3
 8007758:	f7fd fe20 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007760:	e03e      	b.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007762:	4b3a      	ldr	r3, [pc, #232]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007766:	e03b      	b.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007768:	4b37      	ldr	r3, [pc, #220]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800776a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800776e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007774:	4b34      	ldr	r3, [pc, #208]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b02      	cmp	r3, #2
 800777e:	d10c      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d109      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007786:	4b30      	ldr	r3, [pc, #192]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	08db      	lsrs	r3, r3, #3
 800778c:	f003 0303 	and.w	r3, r3, #3
 8007790:	4a2f      	ldr	r2, [pc, #188]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 8007792:	fa22 f303 	lsr.w	r3, r2, r3
 8007796:	637b      	str	r3, [r7, #52]	; 0x34
 8007798:	e01e      	b.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800779a:	4b2b      	ldr	r3, [pc, #172]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077a6:	d106      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ae:	d102      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80077b0:	4b28      	ldr	r3, [pc, #160]	; (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 80077b2:	637b      	str	r3, [r7, #52]	; 0x34
 80077b4:	e010      	b.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077b6:	4b24      	ldr	r3, [pc, #144]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077c2:	d106      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
 80077c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ca:	d102      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80077cc:	4b22      	ldr	r3, [pc, #136]	; (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 80077ce:	637b      	str	r3, [r7, #52]	; 0x34
 80077d0:	e002      	b.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80077d6:	e003      	b.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
 80077d8:	e002      	b.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          default:
          {
            frequency = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077de:	bf00      	nop
          }
        }
        break;
 80077e0:	e25d      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80077e2:	4b19      	ldr	r3, [pc, #100]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80077e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077e8:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80077ec:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d103      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x218c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80077f4:	f7fb fb8c 	bl	8002f10 <HAL_RCC_GetPCLK2Freq>
 80077f8:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80077fa:	e250      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80077fc:	4b12      	ldr	r3, [pc, #72]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007808:	d10b      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007810:	d107      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007812:	f107 0314 	add.w	r3, r7, #20
 8007816:	4618      	mov	r0, r3
 8007818:	f7fd fc56 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	637b      	str	r3, [r7, #52]	; 0x34
 8007820:	e04f      	b.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007822:	4b09      	ldr	r3, [pc, #36]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800782a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800782e:	d115      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007836:	d111      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007838:	f107 0308 	add.w	r3, r7, #8
 800783c:	4618      	mov	r0, r3
 800783e:	f7fd fdad 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	637b      	str	r3, [r7, #52]	; 0x34
 8007846:	e03c      	b.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
 8007848:	44020c00 	.word	0x44020c00
 800784c:	00bb8000 	.word	0x00bb8000
 8007850:	03d09000 	.word	0x03d09000
 8007854:	003d0900 	.word	0x003d0900
 8007858:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800785c:	4b94      	ldr	r3, [pc, #592]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b02      	cmp	r3, #2
 8007866:	d10d      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800786e:	d109      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007870:	4b8f      	ldr	r3, [pc, #572]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	08db      	lsrs	r3, r3, #3
 8007876:	f003 0303 	and.w	r3, r3, #3
 800787a:	4a8e      	ldr	r2, [pc, #568]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 800787c:	fa22 f303 	lsr.w	r3, r2, r3
 8007880:	637b      	str	r3, [r7, #52]	; 0x34
 8007882:	e01e      	b.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007884:	4b8a      	ldr	r3, [pc, #552]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800788c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007890:	d106      	bne.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007898:	d102      	bne.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
          frequency = CSI_VALUE;
 800789a:	4b87      	ldr	r3, [pc, #540]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 800789c:	637b      	str	r3, [r7, #52]	; 0x34
 800789e:	e010      	b.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80078a0:	4b83      	ldr	r3, [pc, #524]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078ac:	d106      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80078b4:	d102      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
          frequency = HSE_VALUE;
 80078b6:	4b81      	ldr	r3, [pc, #516]	; (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 80078b8:	637b      	str	r3, [r7, #52]	; 0x34
 80078ba:	e002      	b.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
          frequency = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078c0:	e1ed      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80078c2:	e1ec      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80078c4:	4b7a      	ldr	r3, [pc, #488]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80078c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078ca:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80078ce:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80078d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d103      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x226e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80078d6:	f7fb fb31 	bl	8002f3c <HAL_RCC_GetPCLK3Freq>
 80078da:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80078dc:	e1df      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80078de:	4b74      	ldr	r3, [pc, #464]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078ea:	d10b      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f2:	d107      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078f4:	f107 0314 	add.w	r3, r7, #20
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fd fbe5 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	637b      	str	r3, [r7, #52]	; 0x34
 8007902:	e045      	b.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007904:	4b6a      	ldr	r3, [pc, #424]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800790c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007910:	d10b      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007918:	d107      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800791a:	f107 0308 	add.w	r3, r7, #8
 800791e:	4618      	mov	r0, r3
 8007920:	f7fd fd3c 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	637b      	str	r3, [r7, #52]	; 0x34
 8007928:	e032      	b.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800792a:	4b61      	ldr	r3, [pc, #388]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0302 	and.w	r3, r3, #2
 8007932:	2b02      	cmp	r3, #2
 8007934:	d10d      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800793c:	d109      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800793e:	4b5c      	ldr	r3, [pc, #368]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	08db      	lsrs	r3, r3, #3
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	4a5a      	ldr	r2, [pc, #360]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 800794a:	fa22 f303 	lsr.w	r3, r2, r3
 800794e:	637b      	str	r3, [r7, #52]	; 0x34
 8007950:	e01e      	b.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007952:	4b57      	ldr	r3, [pc, #348]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800795a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800795e:	d106      	bne.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
 8007960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007962:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007966:	d102      	bne.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
          frequency = CSI_VALUE;
 8007968:	4b53      	ldr	r3, [pc, #332]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 800796a:	637b      	str	r3, [r7, #52]	; 0x34
 800796c:	e010      	b.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800796e:	4b50      	ldr	r3, [pc, #320]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007976:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800797a:	d106      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
 800797c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007982:	d102      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
          frequency = HSE_VALUE;
 8007984:	4b4d      	ldr	r3, [pc, #308]	; (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 8007986:	637b      	str	r3, [r7, #52]	; 0x34
 8007988:	e002      	b.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
          frequency = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800798e:	e186      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007990:	e185      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007992:	4b47      	ldr	r3, [pc, #284]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007998:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800799c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d103      	bne.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x233c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80079a4:	f7fb fab4 	bl	8002f10 <HAL_RCC_GetPCLK2Freq>
 80079a8:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80079aa:	e178      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 80079ac:	4b40      	ldr	r3, [pc, #256]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079b8:	d10b      	bne.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c0:	d107      	bne.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079c2:	f107 0314 	add.w	r3, r7, #20
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fd fb7e 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
 80079d0:	e045      	b.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80079d2:	4b37      	ldr	r3, [pc, #220]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079de:	d10b      	bne.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079e6:	d107      	bne.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079e8:	f107 0308 	add.w	r3, r7, #8
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fd fcd5 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	637b      	str	r3, [r7, #52]	; 0x34
 80079f6:	e032      	b.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80079f8:	4b2d      	ldr	r3, [pc, #180]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d10d      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007a0a:	d109      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a0c:	4b28      	ldr	r3, [pc, #160]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	08db      	lsrs	r3, r3, #3
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	4a27      	ldr	r2, [pc, #156]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 8007a18:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a1e:	e01e      	b.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007a20:	4b23      	ldr	r3, [pc, #140]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a2c:	d106      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a34:	d102      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
          frequency = CSI_VALUE;
 8007a36:	4b20      	ldr	r3, [pc, #128]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 8007a38:	637b      	str	r3, [r7, #52]	; 0x34
 8007a3a:	e010      	b.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007a3c:	4b1c      	ldr	r3, [pc, #112]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a48:	d106      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007a50:	d102      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
          frequency = HSE_VALUE;
 8007a52:	4b1a      	ldr	r3, [pc, #104]	; (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 8007a54:	637b      	str	r3, [r7, #52]	; 0x34
 8007a56:	e002      	b.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
          frequency = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a5c:	e11f      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007a5e:	e11e      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007a60:	4b13      	ldr	r3, [pc, #76]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007a62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d85f      	bhi.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x24c2>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2408>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007a89 	.word	0x08007a89
 8007a7c:	08007a91 	.word	0x08007a91
 8007a80:	08007aa1 	.word	0x08007aa1
 8007a84:	08007ac1 	.word	0x08007ac1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007a88:	f7fb fa10 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8007a8c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007a8e:	e053      	b.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a90:	f107 0320 	add.w	r3, r7, #32
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fd f9ad 	bl	8004df4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a9e:	e04b      	b.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aa0:	f107 0314 	add.w	r3, r7, #20
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fd fb0f 	bl	80050c8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007aae:	e043      	b.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 8007ab0:	44020c00 	.word	0x44020c00
 8007ab4:	03d09000 	.word	0x03d09000
 8007ab8:	003d0900 	.word	0x003d0900
 8007abc:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ac0:	4b79      	ldr	r3, [pc, #484]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007ac2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ac6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007aca:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007acc:	4b76      	ldr	r3, [pc, #472]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d10c      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d109      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ade:	4b72      	ldr	r3, [pc, #456]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	08db      	lsrs	r3, r3, #3
 8007ae4:	f003 0303 	and.w	r3, r3, #3
 8007ae8:	4a70      	ldr	r2, [pc, #448]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x263c>)
 8007aea:	fa22 f303 	lsr.w	r3, r2, r3
 8007aee:	637b      	str	r3, [r7, #52]	; 0x34
 8007af0:	e01e      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007af2:	4b6d      	ldr	r3, [pc, #436]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007afe:	d106      	bne.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
 8007b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b06:	d102      	bne.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007b08:	4b69      	ldr	r3, [pc, #420]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2640>)
 8007b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0c:	e010      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b0e:	4b66      	ldr	r3, [pc, #408]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b1a:	d106      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b22:	d102      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007b24:	4b63      	ldr	r3, [pc, #396]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2644>)
 8007b26:	637b      	str	r3, [r7, #52]	; 0x34
 8007b28:	e002      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007b2e:	e003      	b.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 8007b30:	e002      	b.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          default:
          {
            frequency = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b36:	bf00      	nop
          }
        }
        break;
 8007b38:	e0b1      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007b3a:	4b5b      	ldr	r3, [pc, #364]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b44:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007b46:	4b58      	ldr	r3, [pc, #352]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d106      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d103      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
        {
          frequency = LSE_VALUE;
 8007b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b60:	e01f      	b.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007b62:	4b51      	ldr	r3, [pc, #324]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b70:	d106      	bne.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	2b40      	cmp	r3, #64	; 0x40
 8007b76:	d103      	bne.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
        {
          frequency = LSI_VALUE;
 8007b78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b7e:	e010      	b.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007b80:	4b49      	ldr	r3, [pc, #292]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b8c:	d106      	bne.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	2b80      	cmp	r3, #128	; 0x80
 8007b92:	d103      	bne.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
        {
          frequency = CSI_VALUE / 122U;
 8007b94:	f248 0312 	movw	r3, #32786	; 0x8012
 8007b98:	637b      	str	r3, [r7, #52]	; 0x34
 8007b9a:	e002      	b.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007ba0:	e07d      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007ba2:	e07c      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007ba4:	4b40      	ldr	r3, [pc, #256]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007ba6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007baa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bae:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007bb0:	4b3d      	ldr	r3, [pc, #244]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bbc:	d105      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d102      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = HSI48_VALUE;
 8007bc4:	4b3c      	ldr	r3, [pc, #240]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 8007bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc8:	e031      	b.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007bca:	4b37      	ldr	r3, [pc, #220]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bd6:	d10a      	bne.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	2b10      	cmp	r3, #16
 8007bdc:	d107      	bne.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bde:	f107 0320 	add.w	r3, r7, #32
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fd f906 	bl	8004df4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
 8007bec:	e01f      	b.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007bee:	4b2e      	ldr	r3, [pc, #184]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d106      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfe:	2b20      	cmp	r3, #32
 8007c00:	d103      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        {
          frequency = LSE_VALUE;
 8007c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c06:	637b      	str	r3, [r7, #52]	; 0x34
 8007c08:	e011      	b.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007c0a:	4b27      	ldr	r3, [pc, #156]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007c0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c18:	d106      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1c:	2b30      	cmp	r3, #48	; 0x30
 8007c1e:	d103      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
        {
          frequency = LSI_VALUE;
 8007c20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
 8007c26:	e002      	b.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007c2c:	e037      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007c2e:	e036      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007c30:	4b1d      	ldr	r3, [pc, #116]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007c32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c3a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	2b10      	cmp	r3, #16
 8007c40:	d107      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x25e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c42:	f107 0320 	add.w	r3, r7, #32
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fd f8d4 	bl	8004df4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007c50:	e025      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007c52:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c5e:	d10a      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	d107      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c66:	f107 0308 	add.w	r3, r7, #8
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fd fb96 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34
 8007c74:	e00f      	b.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007c76:	4b0c      	ldr	r3, [pc, #48]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c82:	d105      	bne.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	2b30      	cmp	r3, #48	; 0x30
 8007c88:	d102      	bne.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = HSI48_VALUE;
 8007c8a:	4b0b      	ldr	r3, [pc, #44]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c8e:	e002      	b.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8007c94:	e003      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007c96:	e002      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      default:
        frequency = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c9c:	bf00      	nop
    }
  }

  return (frequency);
 8007c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	373c      	adds	r7, #60	; 0x3c
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd90      	pop	{r4, r7, pc}
 8007ca8:	44020c00 	.word	0x44020c00
 8007cac:	03d09000 	.word	0x03d09000
 8007cb0:	003d0900 	.word	0x003d0900
 8007cb4:	017d7840 	.word	0x017d7840
 8007cb8:	02dc6c00 	.word	0x02dc6c00

08007cbc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007cc4:	4b48      	ldr	r3, [pc, #288]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a47      	ldr	r2, [pc, #284]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007cca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007cd0:	f7f9 f910 	bl	8000ef4 <HAL_GetTick>
 8007cd4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cd6:	e008      	b.n	8007cea <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007cd8:	f7f9 f90c 	bl	8000ef4 <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d901      	bls.n	8007cea <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e07a      	b.n	8007de0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cea:	4b3f      	ldr	r3, [pc, #252]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1f0      	bne.n	8007cd8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007cf6:	4b3c      	ldr	r3, [pc, #240]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007cfe:	f023 0303 	bic.w	r3, r3, #3
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	6811      	ldr	r1, [r2, #0]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6852      	ldr	r2, [r2, #4]
 8007d0a:	0212      	lsls	r2, r2, #8
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	4936      	ldr	r1, [pc, #216]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	025b      	lsls	r3, r3, #9
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	431a      	orrs	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	041b      	lsls	r3, r3, #16
 8007d32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d36:	431a      	orrs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	061b      	lsls	r3, r3, #24
 8007d40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d44:	4928      	ldr	r1, [pc, #160]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007d4a:	4b27      	ldr	r3, [pc, #156]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	f023 020c 	bic.w	r2, r3, #12
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	4924      	ldr	r1, [pc, #144]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007d5c:	4b22      	ldr	r3, [pc, #136]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d60:	f023 0220 	bic.w	r2, r3, #32
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	491f      	ldr	r1, [pc, #124]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007d6e:	4b1e      	ldr	r3, [pc, #120]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	491c      	ldr	r1, [pc, #112]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007d7c:	4b1a      	ldr	r3, [pc, #104]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	4a19      	ldr	r2, [pc, #100]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007d82:	f023 0310 	bic.w	r3, r3, #16
 8007d86:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007d88:	4b17      	ldr	r3, [pc, #92]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6a12      	ldr	r2, [r2, #32]
 8007d98:	00d2      	lsls	r2, r2, #3
 8007d9a:	4913      	ldr	r1, [pc, #76]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007da0:	4b11      	ldr	r3, [pc, #68]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	4a10      	ldr	r2, [pc, #64]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007da6:	f043 0310 	orr.w	r3, r3, #16
 8007daa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007dac:	4b0e      	ldr	r3, [pc, #56]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a0d      	ldr	r2, [pc, #52]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007db2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007db6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007db8:	f7f9 f89c 	bl	8000ef4 <HAL_GetTick>
 8007dbc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007dbe:	e008      	b.n	8007dd2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007dc0:	f7f9 f898 	bl	8000ef4 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d901      	bls.n	8007dd2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e006      	b.n	8007de0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <RCCEx_PLL2_Config+0x12c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0f0      	beq.n	8007dc0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007dde:	2300      	movs	r3, #0

}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	44020c00 	.word	0x44020c00

08007dec <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007df4:	4b48      	ldr	r3, [pc, #288]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a47      	ldr	r2, [pc, #284]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dfe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e00:	f7f9 f878 	bl	8000ef4 <HAL_GetTick>
 8007e04:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e06:	e008      	b.n	8007e1a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e08:	f7f9 f874 	bl	8000ef4 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d901      	bls.n	8007e1a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e07a      	b.n	8007f10 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e1a:	4b3f      	ldr	r3, [pc, #252]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1f0      	bne.n	8007e08 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007e26:	4b3c      	ldr	r3, [pc, #240]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e2e:	f023 0303 	bic.w	r3, r3, #3
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	6811      	ldr	r1, [r2, #0]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	6852      	ldr	r2, [r2, #4]
 8007e3a:	0212      	lsls	r2, r2, #8
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	4936      	ldr	r1, [pc, #216]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	630b      	str	r3, [r1, #48]	; 0x30
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	025b      	lsls	r3, r3, #9
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	431a      	orrs	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	041b      	lsls	r3, r3, #16
 8007e62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	061b      	lsls	r3, r3, #24
 8007e70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e74:	4928      	ldr	r1, [pc, #160]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e7a:	4b27      	ldr	r3, [pc, #156]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7e:	f023 020c 	bic.w	r2, r3, #12
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	4924      	ldr	r1, [pc, #144]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007e8c:	4b22      	ldr	r3, [pc, #136]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e90:	f023 0220 	bic.w	r2, r3, #32
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	491f      	ldr	r1, [pc, #124]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007e9e:	4b1e      	ldr	r3, [pc, #120]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea6:	491c      	ldr	r1, [pc, #112]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007eac:	4b1a      	ldr	r3, [pc, #104]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb0:	4a19      	ldr	r2, [pc, #100]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007eb2:	f023 0310 	bic.w	r3, r3, #16
 8007eb6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8007eb8:	4b17      	ldr	r3, [pc, #92]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ebc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ec0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	6a12      	ldr	r2, [r2, #32]
 8007ec8:	00d2      	lsls	r2, r2, #3
 8007eca:	4913      	ldr	r1, [pc, #76]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8007ed0:	4b11      	ldr	r3, [pc, #68]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed4:	4a10      	ldr	r2, [pc, #64]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007ed6:	f043 0310 	orr.w	r3, r3, #16
 8007eda:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007edc:	4b0e      	ldr	r3, [pc, #56]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a0d      	ldr	r2, [pc, #52]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ee6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ee8:	f7f9 f804 	bl	8000ef4 <HAL_GetTick>
 8007eec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007eee:	e008      	b.n	8007f02 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ef0:	f7f9 f800 	bl	8000ef4 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d901      	bls.n	8007f02 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e006      	b.n	8007f10 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f02:	4b05      	ldr	r3, [pc, #20]	; (8007f18 <RCCEx_PLL3_Config+0x12c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0f0      	beq.n	8007ef0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	44020c00 	.word	0x44020c00

08007f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e042      	b.n	8007fb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d106      	bne.n	8007f46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7f8 fdaf 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2224      	movs	r2, #36	; 0x24
 8007f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0201 	bic.w	r2, r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fda8 	bl	8008abc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fbb7 	bl	80086e0 <UART_SetConfig>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d101      	bne.n	8007f7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e01b      	b.n	8007fb4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689a      	ldr	r2, [r3, #8]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 0201 	orr.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fe27 	bl	8008c00 <UART_CheckIdleState>
 8007fb2:	4603      	mov	r3, r0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b08a      	sub	sp, #40	; 0x28
 8007fc0:	af02      	add	r7, sp, #8
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	603b      	str	r3, [r7, #0]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd2:	2b20      	cmp	r3, #32
 8007fd4:	f040 808b 	bne.w	80080ee <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <HAL_UART_Transmit+0x28>
 8007fde:	88fb      	ldrh	r3, [r7, #6]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e083      	b.n	80080f0 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff2:	2b80      	cmp	r3, #128	; 0x80
 8007ff4:	d107      	bne.n	8008006 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008004:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2221      	movs	r2, #33	; 0x21
 8008012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008016:	f7f8 ff6d 	bl	8000ef4 <HAL_GetTick>
 800801a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	88fa      	ldrh	r2, [r7, #6]
 8008020:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	88fa      	ldrh	r2, [r7, #6]
 8008028:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008034:	d108      	bne.n	8008048 <HAL_UART_Transmit+0x8c>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d104      	bne.n	8008048 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800803e:	2300      	movs	r3, #0
 8008040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	61bb      	str	r3, [r7, #24]
 8008046:	e003      	b.n	8008050 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800804c:	2300      	movs	r3, #0
 800804e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008050:	e030      	b.n	80080b4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2200      	movs	r2, #0
 800805a:	2180      	movs	r1, #128	; 0x80
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 fe79 	bl	8008d54 <UART_WaitOnFlagUntilTimeout>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d005      	beq.n	8008074 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2220      	movs	r2, #32
 800806c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e03d      	b.n	80080f0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10b      	bne.n	8008092 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008088:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	3302      	adds	r3, #2
 800808e:	61bb      	str	r3, [r7, #24]
 8008090:	e007      	b.n	80080a2 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	781a      	ldrb	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	3301      	adds	r3, #1
 80080a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	3b01      	subs	r3, #1
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1c8      	bne.n	8008052 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2200      	movs	r2, #0
 80080c8:	2140      	movs	r1, #64	; 0x40
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 fe42 	bl	8008d54 <UART_WaitOnFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2220      	movs	r2, #32
 80080da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e006      	b.n	80080f0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	e000      	b.n	80080f0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80080ee:	2302      	movs	r3, #2
  }
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3720      	adds	r7, #32
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b0ae      	sub	sp, #184	; 0xb8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800811e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008122:	f640 030f 	movw	r3, #2063	; 0x80f
 8008126:	4013      	ands	r3, r2
 8008128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800812c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d11b      	bne.n	800816c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008134:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008138:	f003 0320 	and.w	r3, r3, #32
 800813c:	2b00      	cmp	r3, #0
 800813e:	d015      	beq.n	800816c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008140:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008144:	f003 0320 	and.w	r3, r3, #32
 8008148:	2b00      	cmp	r3, #0
 800814a:	d105      	bne.n	8008158 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800814c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d009      	beq.n	800816c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 8293 	beq.w	8008688 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	4798      	blx	r3
      }
      return;
 800816a:	e28d      	b.n	8008688 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800816c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 80fd 	beq.w	8008370 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008176:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800817a:	4b7a      	ldr	r3, [pc, #488]	; (8008364 <HAL_UART_IRQHandler+0x26c>)
 800817c:	4013      	ands	r3, r2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d106      	bne.n	8008190 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008186:	4b78      	ldr	r3, [pc, #480]	; (8008368 <HAL_UART_IRQHandler+0x270>)
 8008188:	4013      	ands	r3, r2
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 80f0 	beq.w	8008370 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008190:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	d011      	beq.n	80081c0 <HAL_UART_IRQHandler+0xc8>
 800819c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80081a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00b      	beq.n	80081c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2201      	movs	r2, #1
 80081ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081b6:	f043 0201 	orr.w	r2, r3, #1
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d011      	beq.n	80081f0 <HAL_UART_IRQHandler+0xf8>
 80081cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2202      	movs	r2, #2
 80081de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e6:	f043 0204 	orr.w	r2, r3, #4
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d011      	beq.n	8008220 <HAL_UART_IRQHandler+0x128>
 80081fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00b      	beq.n	8008220 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2204      	movs	r2, #4
 800820e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008216:	f043 0202 	orr.w	r2, r3, #2
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008220:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008224:	f003 0308 	and.w	r3, r3, #8
 8008228:	2b00      	cmp	r3, #0
 800822a:	d017      	beq.n	800825c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800822c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008230:	f003 0320 	and.w	r3, r3, #32
 8008234:	2b00      	cmp	r3, #0
 8008236:	d105      	bne.n	8008244 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008238:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800823c:	4b49      	ldr	r3, [pc, #292]	; (8008364 <HAL_UART_IRQHandler+0x26c>)
 800823e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00b      	beq.n	800825c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2208      	movs	r2, #8
 800824a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008252:	f043 0208 	orr.w	r2, r3, #8
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800825c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008264:	2b00      	cmp	r3, #0
 8008266:	d012      	beq.n	800828e <HAL_UART_IRQHandler+0x196>
 8008268:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800826c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00c      	beq.n	800828e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800827c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008284:	f043 0220 	orr.w	r2, r3, #32
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 81f9 	beq.w	800868c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800829a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800829e:	f003 0320 	and.w	r3, r3, #32
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d013      	beq.n	80082ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d105      	bne.n	80082be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d007      	beq.n	80082ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e2:	2b40      	cmp	r3, #64	; 0x40
 80082e4:	d005      	beq.n	80082f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80082ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d02e      	beq.n	8008350 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fd95 	bl	8008e22 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d120      	bne.n	8008348 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800830c:	2b00      	cmp	r3, #0
 800830e:	d017      	beq.n	8008340 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008316:	4a15      	ldr	r2, [pc, #84]	; (800836c <HAL_UART_IRQHandler+0x274>)
 8008318:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008320:	4618      	mov	r0, r3
 8008322:	f7f8 ff7e 	bl	8001222 <HAL_DMA_Abort_IT>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d019      	beq.n	8008360 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800833a:	4610      	mov	r0, r2
 800833c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800833e:	e00f      	b.n	8008360 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f9b7 	bl	80086b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008346:	e00b      	b.n	8008360 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f9b3 	bl	80086b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800834e:	e007      	b.n	8008360 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f9af 	bl	80086b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800835e:	e195      	b.n	800868c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008360:	bf00      	nop
    return;
 8008362:	e193      	b.n	800868c <HAL_UART_IRQHandler+0x594>
 8008364:	10000001 	.word	0x10000001
 8008368:	04000120 	.word	0x04000120
 800836c:	08008eef 	.word	0x08008eef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008374:	2b01      	cmp	r3, #1
 8008376:	f040 8129 	bne.w	80085cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800837a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800837e:	f003 0310 	and.w	r3, r3, #16
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 8122 	beq.w	80085cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008388:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800838c:	f003 0310 	and.w	r3, r3, #16
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 811b 	beq.w	80085cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2210      	movs	r2, #16
 800839c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a8:	2b40      	cmp	r3, #64	; 0x40
 80083aa:	f040 8091 	bne.w	80084d0 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083b8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 80083bc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 8165 	beq.w	8008690 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083cc:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80083d0:	429a      	cmp	r2, r3
 80083d2:	f080 815d 	bcs.w	8008690 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80083dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e8:	2b81      	cmp	r3, #129	; 0x81
 80083ea:	d060      	beq.n	80084ae <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083f4:	e853 3f00 	ldrex	r3, [r3]
 80083f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800840e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008412:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008414:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008416:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e2      	bne.n	80083ec <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3308      	adds	r3, #8
 800842c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008438:	f023 0301 	bic.w	r3, r3, #1
 800843c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3308      	adds	r3, #8
 8008446:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800844a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800844c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008450:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008452:	e841 2300 	strex	r3, r2, [r1]
 8008456:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1e3      	bne.n	8008426 <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2220      	movs	r2, #32
 8008462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800847a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800847c:	f023 0310 	bic.w	r3, r3, #16
 8008480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800848e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008490:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008494:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800849c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e4      	bne.n	800846c <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7f8 fe3e 	bl	800112a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2202      	movs	r2, #2
 80084b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f8fd 	bl	80086c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084ce:	e0df      	b.n	8008690 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084dc:	b29b      	uxth	r3, r3
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 80d1 	beq.w	8008694 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80084f2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 80cc 	beq.w	8008694 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800850a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800851e:	647b      	str	r3, [r7, #68]	; 0x44
 8008520:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e4      	bne.n	80084fc <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	3308      	adds	r3, #8
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	623b      	str	r3, [r7, #32]
   return(result);
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008548:	f023 0301 	bic.w	r3, r3, #1
 800854c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3308      	adds	r3, #8
 8008556:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800855a:	633a      	str	r2, [r7, #48]	; 0x30
 800855c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008562:	e841 2300 	strex	r3, r2, [r1]
 8008566:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1e1      	bne.n	8008532 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2220      	movs	r2, #32
 8008572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	e853 3f00 	ldrex	r3, [r3]
 800858e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 0310 	bic.w	r3, r3, #16
 8008596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	461a      	mov	r2, r3
 80085a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085a4:	61fb      	str	r3, [r7, #28]
 80085a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	69b9      	ldr	r1, [r7, #24]
 80085aa:	69fa      	ldr	r2, [r7, #28]
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	617b      	str	r3, [r7, #20]
   return(result);
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e4      	bne.n	8008582 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085be:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f87f 	bl	80086c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085ca:	e063      	b.n	8008694 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00e      	beq.n	80085f6 <HAL_UART_IRQHandler+0x4fe>
 80085d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d008      	beq.n	80085f6 <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fcbe 	bl	8008f70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085f4:	e051      	b.n	800869a <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d014      	beq.n	800862c <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008602:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860a:	2b00      	cmp	r3, #0
 800860c:	d105      	bne.n	800861a <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800860e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d008      	beq.n	800862c <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800861e:	2b00      	cmp	r3, #0
 8008620:	d03a      	beq.n	8008698 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	4798      	blx	r3
    }
    return;
 800862a:	e035      	b.n	8008698 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800862c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	d009      	beq.n	800864c <HAL_UART_IRQHandler+0x554>
 8008638:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800863c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fc68 	bl	8008f1a <UART_EndTransmit_IT>
    return;
 800864a:	e026      	b.n	800869a <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800864c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008650:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d009      	beq.n	800866c <HAL_UART_IRQHandler+0x574>
 8008658:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800865c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fc97 	bl	8008f98 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800866a:	e016      	b.n	800869a <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800866c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d010      	beq.n	800869a <HAL_UART_IRQHandler+0x5a2>
 8008678:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800867c:	2b00      	cmp	r3, #0
 800867e:	da0c      	bge.n	800869a <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fc7f 	bl	8008f84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008686:	e008      	b.n	800869a <HAL_UART_IRQHandler+0x5a2>
      return;
 8008688:	bf00      	nop
 800868a:	e006      	b.n	800869a <HAL_UART_IRQHandler+0x5a2>
    return;
 800868c:	bf00      	nop
 800868e:	e004      	b.n	800869a <HAL_UART_IRQHandler+0x5a2>
      return;
 8008690:	bf00      	nop
 8008692:	e002      	b.n	800869a <HAL_UART_IRQHandler+0x5a2>
      return;
 8008694:	bf00      	nop
 8008696:	e000      	b.n	800869a <HAL_UART_IRQHandler+0x5a2>
    return;
 8008698:	bf00      	nop
  }
}
 800869a:	37b8      	adds	r7, #184	; 0xb8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086e4:	b094      	sub	sp, #80	; 0x50
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80086f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	4b78      	ldr	r3, [pc, #480]	; (80088d8 <UART_SetConfig+0x1f8>)
 80086f6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	431a      	orrs	r2, r3
 8008702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	431a      	orrs	r2, r3
 8008708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	4313      	orrs	r3, r2
 800870e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4971      	ldr	r1, [pc, #452]	; (80088dc <UART_SetConfig+0x1fc>)
 8008718:	4019      	ands	r1, r3
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008720:	430b      	orrs	r3, r1
 8008722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008730:	68d9      	ldr	r1, [r3, #12]
 8008732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	ea40 0301 	orr.w	r3, r0, r1
 800873a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800873c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	4b64      	ldr	r3, [pc, #400]	; (80088d8 <UART_SetConfig+0x1f8>)
 8008748:	429a      	cmp	r2, r3
 800874a:	d009      	beq.n	8008760 <UART_SetConfig+0x80>
 800874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	4b63      	ldr	r3, [pc, #396]	; (80088e0 <UART_SetConfig+0x200>)
 8008752:	429a      	cmp	r2, r3
 8008754:	d004      	beq.n	8008760 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008758:	6a1a      	ldr	r2, [r3, #32]
 800875a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800875c:	4313      	orrs	r3, r2
 800875e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800876a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008774:	430b      	orrs	r3, r1
 8008776:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877e:	f023 000f 	bic.w	r0, r3, #15
 8008782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008784:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	ea40 0301 	orr.w	r3, r0, r1
 800878e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	4b53      	ldr	r3, [pc, #332]	; (80088e4 <UART_SetConfig+0x204>)
 8008796:	429a      	cmp	r2, r3
 8008798:	d102      	bne.n	80087a0 <UART_SetConfig+0xc0>
 800879a:	2301      	movs	r3, #1
 800879c:	64bb      	str	r3, [r7, #72]	; 0x48
 800879e:	e066      	b.n	800886e <UART_SetConfig+0x18e>
 80087a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	4b50      	ldr	r3, [pc, #320]	; (80088e8 <UART_SetConfig+0x208>)
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d102      	bne.n	80087b0 <UART_SetConfig+0xd0>
 80087aa:	2302      	movs	r3, #2
 80087ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80087ae:	e05e      	b.n	800886e <UART_SetConfig+0x18e>
 80087b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	4b4d      	ldr	r3, [pc, #308]	; (80088ec <UART_SetConfig+0x20c>)
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d102      	bne.n	80087c0 <UART_SetConfig+0xe0>
 80087ba:	2304      	movs	r3, #4
 80087bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80087be:	e056      	b.n	800886e <UART_SetConfig+0x18e>
 80087c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	4b4a      	ldr	r3, [pc, #296]	; (80088f0 <UART_SetConfig+0x210>)
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d102      	bne.n	80087d0 <UART_SetConfig+0xf0>
 80087ca:	2308      	movs	r3, #8
 80087cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80087ce:	e04e      	b.n	800886e <UART_SetConfig+0x18e>
 80087d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	4b47      	ldr	r3, [pc, #284]	; (80088f4 <UART_SetConfig+0x214>)
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d102      	bne.n	80087e0 <UART_SetConfig+0x100>
 80087da:	2310      	movs	r3, #16
 80087dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80087de:	e046      	b.n	800886e <UART_SetConfig+0x18e>
 80087e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	4b44      	ldr	r3, [pc, #272]	; (80088f8 <UART_SetConfig+0x218>)
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d102      	bne.n	80087f0 <UART_SetConfig+0x110>
 80087ea:	2320      	movs	r3, #32
 80087ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80087ee:	e03e      	b.n	800886e <UART_SetConfig+0x18e>
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	4b41      	ldr	r3, [pc, #260]	; (80088fc <UART_SetConfig+0x21c>)
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d102      	bne.n	8008800 <UART_SetConfig+0x120>
 80087fa:	2340      	movs	r3, #64	; 0x40
 80087fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80087fe:	e036      	b.n	800886e <UART_SetConfig+0x18e>
 8008800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	4b3e      	ldr	r3, [pc, #248]	; (8008900 <UART_SetConfig+0x220>)
 8008806:	429a      	cmp	r2, r3
 8008808:	d102      	bne.n	8008810 <UART_SetConfig+0x130>
 800880a:	2380      	movs	r3, #128	; 0x80
 800880c:	64bb      	str	r3, [r7, #72]	; 0x48
 800880e:	e02e      	b.n	800886e <UART_SetConfig+0x18e>
 8008810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	4b3b      	ldr	r3, [pc, #236]	; (8008904 <UART_SetConfig+0x224>)
 8008816:	429a      	cmp	r2, r3
 8008818:	d103      	bne.n	8008822 <UART_SetConfig+0x142>
 800881a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800881e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008820:	e025      	b.n	800886e <UART_SetConfig+0x18e>
 8008822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	4b38      	ldr	r3, [pc, #224]	; (8008908 <UART_SetConfig+0x228>)
 8008828:	429a      	cmp	r2, r3
 800882a:	d103      	bne.n	8008834 <UART_SetConfig+0x154>
 800882c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008830:	64bb      	str	r3, [r7, #72]	; 0x48
 8008832:	e01c      	b.n	800886e <UART_SetConfig+0x18e>
 8008834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	4b34      	ldr	r3, [pc, #208]	; (800890c <UART_SetConfig+0x22c>)
 800883a:	429a      	cmp	r2, r3
 800883c:	d103      	bne.n	8008846 <UART_SetConfig+0x166>
 800883e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008842:	64bb      	str	r3, [r7, #72]	; 0x48
 8008844:	e013      	b.n	800886e <UART_SetConfig+0x18e>
 8008846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	4b31      	ldr	r3, [pc, #196]	; (8008910 <UART_SetConfig+0x230>)
 800884c:	429a      	cmp	r2, r3
 800884e:	d103      	bne.n	8008858 <UART_SetConfig+0x178>
 8008850:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008854:	64bb      	str	r3, [r7, #72]	; 0x48
 8008856:	e00a      	b.n	800886e <UART_SetConfig+0x18e>
 8008858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	4b1e      	ldr	r3, [pc, #120]	; (80088d8 <UART_SetConfig+0x1f8>)
 800885e:	429a      	cmp	r2, r3
 8008860:	d103      	bne.n	800886a <UART_SetConfig+0x18a>
 8008862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008866:	64bb      	str	r3, [r7, #72]	; 0x48
 8008868:	e001      	b.n	800886e <UART_SetConfig+0x18e>
 800886a:	2300      	movs	r3, #0
 800886c:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800886e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	4b19      	ldr	r3, [pc, #100]	; (80088d8 <UART_SetConfig+0x1f8>)
 8008874:	429a      	cmp	r2, r3
 8008876:	d005      	beq.n	8008884 <UART_SetConfig+0x1a4>
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	4b18      	ldr	r3, [pc, #96]	; (80088e0 <UART_SetConfig+0x200>)
 800887e:	429a      	cmp	r2, r3
 8008880:	f040 8094 	bne.w	80089ac <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008886:	2200      	movs	r2, #0
 8008888:	623b      	str	r3, [r7, #32]
 800888a:	627a      	str	r2, [r7, #36]	; 0x24
 800888c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008890:	f7fc feee 	bl	8005670 <HAL_RCCEx_GetPeriphCLKFreq>
 8008894:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 80f7 	beq.w	8008a8c <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	4a1c      	ldr	r2, [pc, #112]	; (8008914 <UART_SetConfig+0x234>)
 80088a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088a8:	461a      	mov	r2, r3
 80088aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80088b0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	4613      	mov	r3, r2
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	4413      	add	r3, r2
 80088bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088be:	429a      	cmp	r2, r3
 80088c0:	d305      	bcc.n	80088ce <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d924      	bls.n	8008918 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80088d4:	e069      	b.n	80089aa <UART_SetConfig+0x2ca>
 80088d6:	bf00      	nop
 80088d8:	44002400 	.word	0x44002400
 80088dc:	cfff69f3 	.word	0xcfff69f3
 80088e0:	54002400 	.word	0x54002400
 80088e4:	40013800 	.word	0x40013800
 80088e8:	40004400 	.word	0x40004400
 80088ec:	40004800 	.word	0x40004800
 80088f0:	40004c00 	.word	0x40004c00
 80088f4:	40005000 	.word	0x40005000
 80088f8:	40006400 	.word	0x40006400
 80088fc:	40007800 	.word	0x40007800
 8008900:	40007c00 	.word	0x40007c00
 8008904:	40008000 	.word	0x40008000
 8008908:	40006800 	.word	0x40006800
 800890c:	40006c00 	.word	0x40006c00
 8008910:	40008400 	.word	0x40008400
 8008914:	08009bc4 	.word	0x08009bc4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800891a:	2200      	movs	r2, #0
 800891c:	61bb      	str	r3, [r7, #24]
 800891e:	61fa      	str	r2, [r7, #28]
 8008920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	4a64      	ldr	r2, [pc, #400]	; (8008ab8 <UART_SetConfig+0x3d8>)
 8008926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800892a:	b29b      	uxth	r3, r3
 800892c:	2200      	movs	r2, #0
 800892e:	613b      	str	r3, [r7, #16]
 8008930:	617a      	str	r2, [r7, #20]
 8008932:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008936:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800893a:	f7f7 fcaf 	bl	800029c <__aeabi_uldivmod>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4610      	mov	r0, r2
 8008944:	4619      	mov	r1, r3
 8008946:	f04f 0200 	mov.w	r2, #0
 800894a:	f04f 0300 	mov.w	r3, #0
 800894e:	020b      	lsls	r3, r1, #8
 8008950:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008954:	0202      	lsls	r2, r0, #8
 8008956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008958:	6849      	ldr	r1, [r1, #4]
 800895a:	0849      	lsrs	r1, r1, #1
 800895c:	2000      	movs	r0, #0
 800895e:	460c      	mov	r4, r1
 8008960:	4605      	mov	r5, r0
 8008962:	eb12 0804 	adds.w	r8, r2, r4
 8008966:	eb43 0905 	adc.w	r9, r3, r5
 800896a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	60bb      	str	r3, [r7, #8]
 8008972:	60fa      	str	r2, [r7, #12]
 8008974:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008978:	4640      	mov	r0, r8
 800897a:	4649      	mov	r1, r9
 800897c:	f7f7 fc8e 	bl	800029c <__aeabi_uldivmod>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4613      	mov	r3, r2
 8008986:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800898a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800898e:	d308      	bcc.n	80089a2 <UART_SetConfig+0x2c2>
 8008990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008996:	d204      	bcs.n	80089a2 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8008998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800899e:	60da      	str	r2, [r3, #12]
 80089a0:	e003      	b.n	80089aa <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80089a8:	e070      	b.n	8008a8c <UART_SetConfig+0x3ac>
 80089aa:	e06f      	b.n	8008a8c <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089b4:	d13c      	bne.n	8008a30 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80089b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089b8:	2200      	movs	r2, #0
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	607a      	str	r2, [r7, #4]
 80089be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089c2:	f7fc fe55 	bl	8005670 <HAL_RCCEx_GetPeriphCLKFreq>
 80089c6:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d05e      	beq.n	8008a8c <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d2:	4a39      	ldr	r2, [pc, #228]	; (8008ab8 <UART_SetConfig+0x3d8>)
 80089d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089d8:	461a      	mov	r2, r3
 80089da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80089e0:	005a      	lsls	r2, r3, #1
 80089e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	085b      	lsrs	r3, r3, #1
 80089e8:	441a      	add	r2, r3
 80089ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f6:	2b0f      	cmp	r3, #15
 80089f8:	d916      	bls.n	8008a28 <UART_SetConfig+0x348>
 80089fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a00:	d212      	bcs.n	8008a28 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	f023 030f 	bic.w	r3, r3, #15
 8008a0a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a0e:	085b      	lsrs	r3, r3, #1
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008a24:	60da      	str	r2, [r3, #12]
 8008a26:	e031      	b.n	8008a8c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008a2e:	e02d      	b.n	8008a8c <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a32:	2200      	movs	r2, #0
 8008a34:	469a      	mov	sl, r3
 8008a36:	4693      	mov	fp, r2
 8008a38:	4650      	mov	r0, sl
 8008a3a:	4659      	mov	r1, fp
 8008a3c:	f7fc fe18 	bl	8005670 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a40:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d021      	beq.n	8008a8c <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	4a1a      	ldr	r2, [pc, #104]	; (8008ab8 <UART_SetConfig+0x3d8>)
 8008a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a52:	461a      	mov	r2, r3
 8008a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a56:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	085b      	lsrs	r3, r3, #1
 8008a60:	441a      	add	r2, r3
 8008a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6e:	2b0f      	cmp	r3, #15
 8008a70:	d909      	bls.n	8008a86 <UART_SetConfig+0x3a6>
 8008a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a78:	d205      	bcs.n	8008a86 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	60da      	str	r2, [r3, #12]
 8008a84:	e002      	b.n	8008a8c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a96:	2201      	movs	r2, #1
 8008a98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008aa8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3750      	adds	r7, #80	; 0x50
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ab6:	bf00      	nop
 8008ab8:	08009bc4 	.word	0x08009bc4

08008abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac8:	f003 0308 	and.w	r3, r3, #8
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00a      	beq.n	8008ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00a      	beq.n	8008b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2e:	f003 0304 	and.w	r3, r3, #4
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00a      	beq.n	8008b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b50:	f003 0310 	and.w	r3, r3, #16
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00a      	beq.n	8008b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b72:	f003 0320 	and.w	r3, r3, #32
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d01a      	beq.n	8008bd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bba:	d10a      	bne.n	8008bd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00a      	beq.n	8008bf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	605a      	str	r2, [r3, #4]
  }
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b098      	sub	sp, #96	; 0x60
 8008c04:	af02      	add	r7, sp, #8
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c10:	f7f8 f970 	bl	8000ef4 <HAL_GetTick>
 8008c14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0308 	and.w	r3, r3, #8
 8008c20:	2b08      	cmp	r3, #8
 8008c22:	d12f      	bne.n	8008c84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f88e 	bl	8008d54 <UART_WaitOnFlagUntilTimeout>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d022      	beq.n	8008c84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	e853 3f00 	ldrex	r3, [r3]
 8008c4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c52:	653b      	str	r3, [r7, #80]	; 0x50
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c64:	e841 2300 	strex	r3, r2, [r1]
 8008c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1e6      	bne.n	8008c3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2220      	movs	r2, #32
 8008c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c80:	2303      	movs	r3, #3
 8008c82:	e063      	b.n	8008d4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 0304 	and.w	r3, r3, #4
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	d149      	bne.n	8008d26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f857 	bl	8008d54 <UART_WaitOnFlagUntilTimeout>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d03c      	beq.n	8008d26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	623b      	str	r3, [r7, #32]
   return(result);
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cca:	633b      	str	r3, [r7, #48]	; 0x30
 8008ccc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e6      	bne.n	8008cac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	e853 3f00 	ldrex	r3, [r3]
 8008cec:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f023 0301 	bic.w	r3, r3, #1
 8008cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3308      	adds	r3, #8
 8008cfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cfe:	61fa      	str	r2, [r7, #28]
 8008d00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	69b9      	ldr	r1, [r7, #24]
 8008d04:	69fa      	ldr	r2, [r7, #28]
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	617b      	str	r3, [r7, #20]
   return(result);
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e5      	bne.n	8008cde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2220      	movs	r2, #32
 8008d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e012      	b.n	8008d4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3758      	adds	r7, #88	; 0x58
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	4613      	mov	r3, r2
 8008d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d64:	e049      	b.n	8008dfa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6c:	d045      	beq.n	8008dfa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d6e:	f7f8 f8c1 	bl	8000ef4 <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d302      	bcc.n	8008d84 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e048      	b.n	8008e1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0304 	and.w	r3, r3, #4
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d031      	beq.n	8008dfa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	f003 0308 	and.w	r3, r3, #8
 8008da0:	2b08      	cmp	r3, #8
 8008da2:	d110      	bne.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2208      	movs	r2, #8
 8008daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f000 f838 	bl	8008e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2208      	movs	r2, #8
 8008db6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e029      	b.n	8008e1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	69db      	ldr	r3, [r3, #28]
 8008dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dd4:	d111      	bne.n	8008dfa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 f81e 	bl	8008e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2220      	movs	r2, #32
 8008dea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e00f      	b.n	8008e1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	69da      	ldr	r2, [r3, #28]
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	4013      	ands	r3, r2
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	bf0c      	ite	eq
 8008e0a:	2301      	moveq	r3, #1
 8008e0c:	2300      	movne	r3, #0
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	461a      	mov	r2, r3
 8008e12:	79fb      	ldrb	r3, [r7, #7]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d0a6      	beq.n	8008d66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b095      	sub	sp, #84	; 0x54
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e32:	e853 3f00 	ldrex	r3, [r3]
 8008e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	461a      	mov	r2, r3
 8008e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e48:	643b      	str	r3, [r7, #64]	; 0x40
 8008e4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e50:	e841 2300 	strex	r3, r2, [r1]
 8008e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e6      	bne.n	8008e2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3308      	adds	r3, #8
 8008e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	e853 3f00 	ldrex	r3, [r3]
 8008e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e72:	f023 0301 	bic.w	r3, r3, #1
 8008e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	3308      	adds	r3, #8
 8008e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e88:	e841 2300 	strex	r3, r2, [r1]
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e3      	bne.n	8008e5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d118      	bne.n	8008ece <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	e853 3f00 	ldrex	r3, [r3]
 8008ea8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	f023 0310 	bic.w	r3, r3, #16
 8008eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eba:	61bb      	str	r3, [r7, #24]
 8008ebc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebe:	6979      	ldr	r1, [r7, #20]
 8008ec0:	69ba      	ldr	r2, [r7, #24]
 8008ec2:	e841 2300 	strex	r3, r2, [r1]
 8008ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1e6      	bne.n	8008e9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008ee2:	bf00      	nop
 8008ee4:	3754      	adds	r7, #84	; 0x54
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008efa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f7ff fbd1 	bl	80086b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f12:	bf00      	nop
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b088      	sub	sp, #32
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	e853 3f00 	ldrex	r3, [r3]
 8008f2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f36:	61fb      	str	r3, [r7, #28]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	61bb      	str	r3, [r7, #24]
 8008f42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f44:	6979      	ldr	r1, [r7, #20]
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	e841 2300 	strex	r3, r2, [r1]
 8008f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1e6      	bne.n	8008f22 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2220      	movs	r2, #32
 8008f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7ff fb9c 	bl	80086a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f68:	bf00      	nop
 8008f6a:	3720      	adds	r7, #32
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d101      	bne.n	8008fc2 <HAL_UARTEx_DisableFifoMode+0x16>
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	e027      	b.n	8009012 <HAL_UARTEx_DisableFifoMode+0x66>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2224      	movs	r2, #36	; 0x24
 8008fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f022 0201 	bic.w	r2, r2, #1
 8008fe8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ff0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2220      	movs	r2, #32
 8009004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800902e:	2b01      	cmp	r3, #1
 8009030:	d101      	bne.n	8009036 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009032:	2302      	movs	r3, #2
 8009034:	e02d      	b.n	8009092 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2224      	movs	r2, #36	; 0x24
 8009042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 0201 	bic.w	r2, r2, #1
 800905c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f850 	bl	8009118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2220      	movs	r2, #32
 8009084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d101      	bne.n	80090b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090ae:	2302      	movs	r3, #2
 80090b0:	e02d      	b.n	800910e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2224      	movs	r2, #36	; 0x24
 80090be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f022 0201 	bic.w	r2, r2, #1
 80090d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f812 	bl	8009118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2220      	movs	r2, #32
 8009100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
	...

08009118 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009124:	2b00      	cmp	r3, #0
 8009126:	d108      	bne.n	800913a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009138:	e031      	b.n	800919e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800913a:	2308      	movs	r3, #8
 800913c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800913e:	2308      	movs	r3, #8
 8009140:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	0e5b      	lsrs	r3, r3, #25
 800914a:	b2db      	uxtb	r3, r3
 800914c:	f003 0307 	and.w	r3, r3, #7
 8009150:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	0f5b      	lsrs	r3, r3, #29
 800915a:	b2db      	uxtb	r3, r3
 800915c:	f003 0307 	and.w	r3, r3, #7
 8009160:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009162:	7bbb      	ldrb	r3, [r7, #14]
 8009164:	7b3a      	ldrb	r2, [r7, #12]
 8009166:	4911      	ldr	r1, [pc, #68]	; (80091ac <UARTEx_SetNbDataToProcess+0x94>)
 8009168:	5c8a      	ldrb	r2, [r1, r2]
 800916a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800916e:	7b3a      	ldrb	r2, [r7, #12]
 8009170:	490f      	ldr	r1, [pc, #60]	; (80091b0 <UARTEx_SetNbDataToProcess+0x98>)
 8009172:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009174:	fb93 f3f2 	sdiv	r3, r3, r2
 8009178:	b29a      	uxth	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	7b7a      	ldrb	r2, [r7, #13]
 8009184:	4909      	ldr	r1, [pc, #36]	; (80091ac <UARTEx_SetNbDataToProcess+0x94>)
 8009186:	5c8a      	ldrb	r2, [r1, r2]
 8009188:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800918c:	7b7a      	ldrb	r2, [r7, #13]
 800918e:	4908      	ldr	r1, [pc, #32]	; (80091b0 <UARTEx_SetNbDataToProcess+0x98>)
 8009190:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009192:	fb93 f3f2 	sdiv	r3, r3, r2
 8009196:	b29a      	uxth	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800919e:	bf00      	nop
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	08009bdc 	.word	0x08009bdc
 80091b0:	08009be4 	.word	0x08009be4

080091b4 <sniprintf>:
 80091b4:	b40c      	push	{r2, r3}
 80091b6:	4b18      	ldr	r3, [pc, #96]	; (8009218 <sniprintf+0x64>)
 80091b8:	b530      	push	{r4, r5, lr}
 80091ba:	1e0c      	subs	r4, r1, #0
 80091bc:	b09d      	sub	sp, #116	; 0x74
 80091be:	681d      	ldr	r5, [r3, #0]
 80091c0:	da08      	bge.n	80091d4 <sniprintf+0x20>
 80091c2:	238b      	movs	r3, #139	; 0x8b
 80091c4:	f04f 30ff 	mov.w	r0, #4294967295
 80091c8:	602b      	str	r3, [r5, #0]
 80091ca:	b01d      	add	sp, #116	; 0x74
 80091cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091d0:	b002      	add	sp, #8
 80091d2:	4770      	bx	lr
 80091d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80091d8:	9002      	str	r0, [sp, #8]
 80091da:	9006      	str	r0, [sp, #24]
 80091dc:	a902      	add	r1, sp, #8
 80091de:	f8ad 3014 	strh.w	r3, [sp, #20]
 80091e2:	bf14      	ite	ne
 80091e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80091e8:	4623      	moveq	r3, r4
 80091ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80091ec:	4628      	mov	r0, r5
 80091ee:	9304      	str	r3, [sp, #16]
 80091f0:	9307      	str	r3, [sp, #28]
 80091f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80091f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80091fa:	ab21      	add	r3, sp, #132	; 0x84
 80091fc:	9301      	str	r3, [sp, #4]
 80091fe:	f000 f993 	bl	8009528 <_svfiprintf_r>
 8009202:	1c43      	adds	r3, r0, #1
 8009204:	bfbc      	itt	lt
 8009206:	238b      	movlt	r3, #139	; 0x8b
 8009208:	602b      	strlt	r3, [r5, #0]
 800920a:	2c00      	cmp	r4, #0
 800920c:	d0dd      	beq.n	80091ca <sniprintf+0x16>
 800920e:	9b02      	ldr	r3, [sp, #8]
 8009210:	2200      	movs	r2, #0
 8009212:	701a      	strb	r2, [r3, #0]
 8009214:	e7d9      	b.n	80091ca <sniprintf+0x16>
 8009216:	bf00      	nop
 8009218:	20000058 	.word	0x20000058

0800921c <memset>:
 800921c:	4402      	add	r2, r0
 800921e:	4603      	mov	r3, r0
 8009220:	4293      	cmp	r3, r2
 8009222:	d100      	bne.n	8009226 <memset+0xa>
 8009224:	4770      	bx	lr
 8009226:	f803 1b01 	strb.w	r1, [r3], #1
 800922a:	e7f9      	b.n	8009220 <memset+0x4>

0800922c <__errno>:
 800922c:	4b01      	ldr	r3, [pc, #4]	; (8009234 <__errno+0x8>)
 800922e:	6818      	ldr	r0, [r3, #0]
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	20000058 	.word	0x20000058

08009238 <__libc_init_array>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	4d0d      	ldr	r5, [pc, #52]	; (8009270 <__libc_init_array+0x38>)
 800923c:	2600      	movs	r6, #0
 800923e:	4c0d      	ldr	r4, [pc, #52]	; (8009274 <__libc_init_array+0x3c>)
 8009240:	1b64      	subs	r4, r4, r5
 8009242:	10a4      	asrs	r4, r4, #2
 8009244:	42a6      	cmp	r6, r4
 8009246:	d109      	bne.n	800925c <__libc_init_array+0x24>
 8009248:	4d0b      	ldr	r5, [pc, #44]	; (8009278 <__libc_init_array+0x40>)
 800924a:	2600      	movs	r6, #0
 800924c:	4c0b      	ldr	r4, [pc, #44]	; (800927c <__libc_init_array+0x44>)
 800924e:	f000 fc77 	bl	8009b40 <_init>
 8009252:	1b64      	subs	r4, r4, r5
 8009254:	10a4      	asrs	r4, r4, #2
 8009256:	42a6      	cmp	r6, r4
 8009258:	d105      	bne.n	8009266 <__libc_init_array+0x2e>
 800925a:	bd70      	pop	{r4, r5, r6, pc}
 800925c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009260:	3601      	adds	r6, #1
 8009262:	4798      	blx	r3
 8009264:	e7ee      	b.n	8009244 <__libc_init_array+0xc>
 8009266:	f855 3b04 	ldr.w	r3, [r5], #4
 800926a:	3601      	adds	r6, #1
 800926c:	4798      	blx	r3
 800926e:	e7f2      	b.n	8009256 <__libc_init_array+0x1e>
 8009270:	08009c28 	.word	0x08009c28
 8009274:	08009c28 	.word	0x08009c28
 8009278:	08009c28 	.word	0x08009c28
 800927c:	08009c2c 	.word	0x08009c2c

08009280 <__retarget_lock_acquire_recursive>:
 8009280:	4770      	bx	lr

08009282 <__retarget_lock_release_recursive>:
 8009282:	4770      	bx	lr

08009284 <_free_r>:
 8009284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009286:	2900      	cmp	r1, #0
 8009288:	d043      	beq.n	8009312 <_free_r+0x8e>
 800928a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800928e:	1f0c      	subs	r4, r1, #4
 8009290:	9001      	str	r0, [sp, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	bfb8      	it	lt
 8009296:	18e4      	addlt	r4, r4, r3
 8009298:	f000 f8e0 	bl	800945c <__malloc_lock>
 800929c:	4a1e      	ldr	r2, [pc, #120]	; (8009318 <_free_r+0x94>)
 800929e:	9801      	ldr	r0, [sp, #4]
 80092a0:	6813      	ldr	r3, [r2, #0]
 80092a2:	b933      	cbnz	r3, 80092b2 <_free_r+0x2e>
 80092a4:	6063      	str	r3, [r4, #4]
 80092a6:	6014      	str	r4, [r2, #0]
 80092a8:	b003      	add	sp, #12
 80092aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092ae:	f000 b8db 	b.w	8009468 <__malloc_unlock>
 80092b2:	42a3      	cmp	r3, r4
 80092b4:	d908      	bls.n	80092c8 <_free_r+0x44>
 80092b6:	6825      	ldr	r5, [r4, #0]
 80092b8:	1961      	adds	r1, r4, r5
 80092ba:	428b      	cmp	r3, r1
 80092bc:	bf01      	itttt	eq
 80092be:	6819      	ldreq	r1, [r3, #0]
 80092c0:	685b      	ldreq	r3, [r3, #4]
 80092c2:	1949      	addeq	r1, r1, r5
 80092c4:	6021      	streq	r1, [r4, #0]
 80092c6:	e7ed      	b.n	80092a4 <_free_r+0x20>
 80092c8:	461a      	mov	r2, r3
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	b10b      	cbz	r3, 80092d2 <_free_r+0x4e>
 80092ce:	42a3      	cmp	r3, r4
 80092d0:	d9fa      	bls.n	80092c8 <_free_r+0x44>
 80092d2:	6811      	ldr	r1, [r2, #0]
 80092d4:	1855      	adds	r5, r2, r1
 80092d6:	42a5      	cmp	r5, r4
 80092d8:	d10b      	bne.n	80092f2 <_free_r+0x6e>
 80092da:	6824      	ldr	r4, [r4, #0]
 80092dc:	4421      	add	r1, r4
 80092de:	1854      	adds	r4, r2, r1
 80092e0:	6011      	str	r1, [r2, #0]
 80092e2:	42a3      	cmp	r3, r4
 80092e4:	d1e0      	bne.n	80092a8 <_free_r+0x24>
 80092e6:	681c      	ldr	r4, [r3, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	440c      	add	r4, r1
 80092ec:	6053      	str	r3, [r2, #4]
 80092ee:	6014      	str	r4, [r2, #0]
 80092f0:	e7da      	b.n	80092a8 <_free_r+0x24>
 80092f2:	d902      	bls.n	80092fa <_free_r+0x76>
 80092f4:	230c      	movs	r3, #12
 80092f6:	6003      	str	r3, [r0, #0]
 80092f8:	e7d6      	b.n	80092a8 <_free_r+0x24>
 80092fa:	6825      	ldr	r5, [r4, #0]
 80092fc:	1961      	adds	r1, r4, r5
 80092fe:	428b      	cmp	r3, r1
 8009300:	bf02      	ittt	eq
 8009302:	6819      	ldreq	r1, [r3, #0]
 8009304:	685b      	ldreq	r3, [r3, #4]
 8009306:	1949      	addeq	r1, r1, r5
 8009308:	6063      	str	r3, [r4, #4]
 800930a:	bf08      	it	eq
 800930c:	6021      	streq	r1, [r4, #0]
 800930e:	6054      	str	r4, [r2, #4]
 8009310:	e7ca      	b.n	80092a8 <_free_r+0x24>
 8009312:	b003      	add	sp, #12
 8009314:	bd30      	pop	{r4, r5, pc}
 8009316:	bf00      	nop
 8009318:	200002e8 	.word	0x200002e8

0800931c <sbrk_aligned>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	4e0e      	ldr	r6, [pc, #56]	; (8009358 <sbrk_aligned+0x3c>)
 8009320:	460c      	mov	r4, r1
 8009322:	4605      	mov	r5, r0
 8009324:	6831      	ldr	r1, [r6, #0]
 8009326:	b911      	cbnz	r1, 800932e <sbrk_aligned+0x12>
 8009328:	f000 fba8 	bl	8009a7c <_sbrk_r>
 800932c:	6030      	str	r0, [r6, #0]
 800932e:	4621      	mov	r1, r4
 8009330:	4628      	mov	r0, r5
 8009332:	f000 fba3 	bl	8009a7c <_sbrk_r>
 8009336:	1c43      	adds	r3, r0, #1
 8009338:	d00a      	beq.n	8009350 <sbrk_aligned+0x34>
 800933a:	1cc4      	adds	r4, r0, #3
 800933c:	f024 0403 	bic.w	r4, r4, #3
 8009340:	42a0      	cmp	r0, r4
 8009342:	d007      	beq.n	8009354 <sbrk_aligned+0x38>
 8009344:	1a21      	subs	r1, r4, r0
 8009346:	4628      	mov	r0, r5
 8009348:	f000 fb98 	bl	8009a7c <_sbrk_r>
 800934c:	3001      	adds	r0, #1
 800934e:	d101      	bne.n	8009354 <sbrk_aligned+0x38>
 8009350:	f04f 34ff 	mov.w	r4, #4294967295
 8009354:	4620      	mov	r0, r4
 8009356:	bd70      	pop	{r4, r5, r6, pc}
 8009358:	200002ec 	.word	0x200002ec

0800935c <_malloc_r>:
 800935c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009360:	1ccd      	adds	r5, r1, #3
 8009362:	4607      	mov	r7, r0
 8009364:	f025 0503 	bic.w	r5, r5, #3
 8009368:	3508      	adds	r5, #8
 800936a:	2d0c      	cmp	r5, #12
 800936c:	bf38      	it	cc
 800936e:	250c      	movcc	r5, #12
 8009370:	2d00      	cmp	r5, #0
 8009372:	db01      	blt.n	8009378 <_malloc_r+0x1c>
 8009374:	42a9      	cmp	r1, r5
 8009376:	d905      	bls.n	8009384 <_malloc_r+0x28>
 8009378:	230c      	movs	r3, #12
 800937a:	2600      	movs	r6, #0
 800937c:	603b      	str	r3, [r7, #0]
 800937e:	4630      	mov	r0, r6
 8009380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009384:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009458 <_malloc_r+0xfc>
 8009388:	f000 f868 	bl	800945c <__malloc_lock>
 800938c:	f8d8 3000 	ldr.w	r3, [r8]
 8009390:	461c      	mov	r4, r3
 8009392:	bb5c      	cbnz	r4, 80093ec <_malloc_r+0x90>
 8009394:	4629      	mov	r1, r5
 8009396:	4638      	mov	r0, r7
 8009398:	f7ff ffc0 	bl	800931c <sbrk_aligned>
 800939c:	1c43      	adds	r3, r0, #1
 800939e:	4604      	mov	r4, r0
 80093a0:	d155      	bne.n	800944e <_malloc_r+0xf2>
 80093a2:	f8d8 4000 	ldr.w	r4, [r8]
 80093a6:	4626      	mov	r6, r4
 80093a8:	2e00      	cmp	r6, #0
 80093aa:	d145      	bne.n	8009438 <_malloc_r+0xdc>
 80093ac:	2c00      	cmp	r4, #0
 80093ae:	d048      	beq.n	8009442 <_malloc_r+0xe6>
 80093b0:	6823      	ldr	r3, [r4, #0]
 80093b2:	4631      	mov	r1, r6
 80093b4:	4638      	mov	r0, r7
 80093b6:	eb04 0903 	add.w	r9, r4, r3
 80093ba:	f000 fb5f 	bl	8009a7c <_sbrk_r>
 80093be:	4581      	cmp	r9, r0
 80093c0:	d13f      	bne.n	8009442 <_malloc_r+0xe6>
 80093c2:	6821      	ldr	r1, [r4, #0]
 80093c4:	4638      	mov	r0, r7
 80093c6:	1a6d      	subs	r5, r5, r1
 80093c8:	4629      	mov	r1, r5
 80093ca:	f7ff ffa7 	bl	800931c <sbrk_aligned>
 80093ce:	3001      	adds	r0, #1
 80093d0:	d037      	beq.n	8009442 <_malloc_r+0xe6>
 80093d2:	6823      	ldr	r3, [r4, #0]
 80093d4:	442b      	add	r3, r5
 80093d6:	6023      	str	r3, [r4, #0]
 80093d8:	f8d8 3000 	ldr.w	r3, [r8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d038      	beq.n	8009452 <_malloc_r+0xf6>
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	42a2      	cmp	r2, r4
 80093e4:	d12b      	bne.n	800943e <_malloc_r+0xe2>
 80093e6:	2200      	movs	r2, #0
 80093e8:	605a      	str	r2, [r3, #4]
 80093ea:	e00f      	b.n	800940c <_malloc_r+0xb0>
 80093ec:	6822      	ldr	r2, [r4, #0]
 80093ee:	1b52      	subs	r2, r2, r5
 80093f0:	d41f      	bmi.n	8009432 <_malloc_r+0xd6>
 80093f2:	2a0b      	cmp	r2, #11
 80093f4:	d917      	bls.n	8009426 <_malloc_r+0xca>
 80093f6:	1961      	adds	r1, r4, r5
 80093f8:	42a3      	cmp	r3, r4
 80093fa:	6025      	str	r5, [r4, #0]
 80093fc:	bf18      	it	ne
 80093fe:	6059      	strne	r1, [r3, #4]
 8009400:	6863      	ldr	r3, [r4, #4]
 8009402:	bf08      	it	eq
 8009404:	f8c8 1000 	streq.w	r1, [r8]
 8009408:	5162      	str	r2, [r4, r5]
 800940a:	604b      	str	r3, [r1, #4]
 800940c:	f104 060b 	add.w	r6, r4, #11
 8009410:	4638      	mov	r0, r7
 8009412:	f000 f829 	bl	8009468 <__malloc_unlock>
 8009416:	1d23      	adds	r3, r4, #4
 8009418:	f026 0607 	bic.w	r6, r6, #7
 800941c:	1af2      	subs	r2, r6, r3
 800941e:	d0ae      	beq.n	800937e <_malloc_r+0x22>
 8009420:	1b9b      	subs	r3, r3, r6
 8009422:	50a3      	str	r3, [r4, r2]
 8009424:	e7ab      	b.n	800937e <_malloc_r+0x22>
 8009426:	42a3      	cmp	r3, r4
 8009428:	6862      	ldr	r2, [r4, #4]
 800942a:	d1dd      	bne.n	80093e8 <_malloc_r+0x8c>
 800942c:	f8c8 2000 	str.w	r2, [r8]
 8009430:	e7ec      	b.n	800940c <_malloc_r+0xb0>
 8009432:	4623      	mov	r3, r4
 8009434:	6864      	ldr	r4, [r4, #4]
 8009436:	e7ac      	b.n	8009392 <_malloc_r+0x36>
 8009438:	4634      	mov	r4, r6
 800943a:	6876      	ldr	r6, [r6, #4]
 800943c:	e7b4      	b.n	80093a8 <_malloc_r+0x4c>
 800943e:	4613      	mov	r3, r2
 8009440:	e7cc      	b.n	80093dc <_malloc_r+0x80>
 8009442:	230c      	movs	r3, #12
 8009444:	4638      	mov	r0, r7
 8009446:	603b      	str	r3, [r7, #0]
 8009448:	f000 f80e 	bl	8009468 <__malloc_unlock>
 800944c:	e797      	b.n	800937e <_malloc_r+0x22>
 800944e:	6025      	str	r5, [r4, #0]
 8009450:	e7dc      	b.n	800940c <_malloc_r+0xb0>
 8009452:	605b      	str	r3, [r3, #4]
 8009454:	deff      	udf	#255	; 0xff
 8009456:	bf00      	nop
 8009458:	200002e8 	.word	0x200002e8

0800945c <__malloc_lock>:
 800945c:	4801      	ldr	r0, [pc, #4]	; (8009464 <__malloc_lock+0x8>)
 800945e:	f7ff bf0f 	b.w	8009280 <__retarget_lock_acquire_recursive>
 8009462:	bf00      	nop
 8009464:	200002e4 	.word	0x200002e4

08009468 <__malloc_unlock>:
 8009468:	4801      	ldr	r0, [pc, #4]	; (8009470 <__malloc_unlock+0x8>)
 800946a:	f7ff bf0a 	b.w	8009282 <__retarget_lock_release_recursive>
 800946e:	bf00      	nop
 8009470:	200002e4 	.word	0x200002e4

08009474 <__ssputs_r>:
 8009474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009478:	461f      	mov	r7, r3
 800947a:	688e      	ldr	r6, [r1, #8]
 800947c:	4682      	mov	sl, r0
 800947e:	460c      	mov	r4, r1
 8009480:	42be      	cmp	r6, r7
 8009482:	4690      	mov	r8, r2
 8009484:	680b      	ldr	r3, [r1, #0]
 8009486:	d82c      	bhi.n	80094e2 <__ssputs_r+0x6e>
 8009488:	898a      	ldrh	r2, [r1, #12]
 800948a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800948e:	d026      	beq.n	80094de <__ssputs_r+0x6a>
 8009490:	6965      	ldr	r5, [r4, #20]
 8009492:	6909      	ldr	r1, [r1, #16]
 8009494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009498:	eba3 0901 	sub.w	r9, r3, r1
 800949c:	1c7b      	adds	r3, r7, #1
 800949e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094a2:	444b      	add	r3, r9
 80094a4:	106d      	asrs	r5, r5, #1
 80094a6:	429d      	cmp	r5, r3
 80094a8:	bf38      	it	cc
 80094aa:	461d      	movcc	r5, r3
 80094ac:	0553      	lsls	r3, r2, #21
 80094ae:	d527      	bpl.n	8009500 <__ssputs_r+0x8c>
 80094b0:	4629      	mov	r1, r5
 80094b2:	f7ff ff53 	bl	800935c <_malloc_r>
 80094b6:	4606      	mov	r6, r0
 80094b8:	b360      	cbz	r0, 8009514 <__ssputs_r+0xa0>
 80094ba:	464a      	mov	r2, r9
 80094bc:	6921      	ldr	r1, [r4, #16]
 80094be:	f000 fafb 	bl	8009ab8 <memcpy>
 80094c2:	89a3      	ldrh	r3, [r4, #12]
 80094c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094cc:	81a3      	strh	r3, [r4, #12]
 80094ce:	6126      	str	r6, [r4, #16]
 80094d0:	444e      	add	r6, r9
 80094d2:	6165      	str	r5, [r4, #20]
 80094d4:	eba5 0509 	sub.w	r5, r5, r9
 80094d8:	6026      	str	r6, [r4, #0]
 80094da:	463e      	mov	r6, r7
 80094dc:	60a5      	str	r5, [r4, #8]
 80094de:	42be      	cmp	r6, r7
 80094e0:	d900      	bls.n	80094e4 <__ssputs_r+0x70>
 80094e2:	463e      	mov	r6, r7
 80094e4:	4632      	mov	r2, r6
 80094e6:	4641      	mov	r1, r8
 80094e8:	6820      	ldr	r0, [r4, #0]
 80094ea:	f000 faad 	bl	8009a48 <memmove>
 80094ee:	68a3      	ldr	r3, [r4, #8]
 80094f0:	2000      	movs	r0, #0
 80094f2:	1b9b      	subs	r3, r3, r6
 80094f4:	60a3      	str	r3, [r4, #8]
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	4433      	add	r3, r6
 80094fa:	6023      	str	r3, [r4, #0]
 80094fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009500:	462a      	mov	r2, r5
 8009502:	f000 fae6 	bl	8009ad2 <_realloc_r>
 8009506:	4606      	mov	r6, r0
 8009508:	2800      	cmp	r0, #0
 800950a:	d1e0      	bne.n	80094ce <__ssputs_r+0x5a>
 800950c:	6921      	ldr	r1, [r4, #16]
 800950e:	4650      	mov	r0, sl
 8009510:	f7ff feb8 	bl	8009284 <_free_r>
 8009514:	230c      	movs	r3, #12
 8009516:	f04f 30ff 	mov.w	r0, #4294967295
 800951a:	f8ca 3000 	str.w	r3, [sl]
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009524:	81a3      	strh	r3, [r4, #12]
 8009526:	e7e9      	b.n	80094fc <__ssputs_r+0x88>

08009528 <_svfiprintf_r>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	4698      	mov	r8, r3
 800952e:	898b      	ldrh	r3, [r1, #12]
 8009530:	b09d      	sub	sp, #116	; 0x74
 8009532:	4607      	mov	r7, r0
 8009534:	061b      	lsls	r3, r3, #24
 8009536:	460d      	mov	r5, r1
 8009538:	4614      	mov	r4, r2
 800953a:	d50e      	bpl.n	800955a <_svfiprintf_r+0x32>
 800953c:	690b      	ldr	r3, [r1, #16]
 800953e:	b963      	cbnz	r3, 800955a <_svfiprintf_r+0x32>
 8009540:	2140      	movs	r1, #64	; 0x40
 8009542:	f7ff ff0b 	bl	800935c <_malloc_r>
 8009546:	6028      	str	r0, [r5, #0]
 8009548:	6128      	str	r0, [r5, #16]
 800954a:	b920      	cbnz	r0, 8009556 <_svfiprintf_r+0x2e>
 800954c:	230c      	movs	r3, #12
 800954e:	603b      	str	r3, [r7, #0]
 8009550:	f04f 30ff 	mov.w	r0, #4294967295
 8009554:	e0d0      	b.n	80096f8 <_svfiprintf_r+0x1d0>
 8009556:	2340      	movs	r3, #64	; 0x40
 8009558:	616b      	str	r3, [r5, #20]
 800955a:	2300      	movs	r3, #0
 800955c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009560:	f04f 0901 	mov.w	r9, #1
 8009564:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009710 <_svfiprintf_r+0x1e8>
 8009568:	9309      	str	r3, [sp, #36]	; 0x24
 800956a:	2320      	movs	r3, #32
 800956c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009570:	2330      	movs	r3, #48	; 0x30
 8009572:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009576:	4623      	mov	r3, r4
 8009578:	469a      	mov	sl, r3
 800957a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800957e:	b10a      	cbz	r2, 8009584 <_svfiprintf_r+0x5c>
 8009580:	2a25      	cmp	r2, #37	; 0x25
 8009582:	d1f9      	bne.n	8009578 <_svfiprintf_r+0x50>
 8009584:	ebba 0b04 	subs.w	fp, sl, r4
 8009588:	d00b      	beq.n	80095a2 <_svfiprintf_r+0x7a>
 800958a:	465b      	mov	r3, fp
 800958c:	4622      	mov	r2, r4
 800958e:	4629      	mov	r1, r5
 8009590:	4638      	mov	r0, r7
 8009592:	f7ff ff6f 	bl	8009474 <__ssputs_r>
 8009596:	3001      	adds	r0, #1
 8009598:	f000 80a9 	beq.w	80096ee <_svfiprintf_r+0x1c6>
 800959c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800959e:	445a      	add	r2, fp
 80095a0:	9209      	str	r2, [sp, #36]	; 0x24
 80095a2:	f89a 3000 	ldrb.w	r3, [sl]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 80a1 	beq.w	80096ee <_svfiprintf_r+0x1c6>
 80095ac:	2300      	movs	r3, #0
 80095ae:	f04f 32ff 	mov.w	r2, #4294967295
 80095b2:	f10a 0a01 	add.w	sl, sl, #1
 80095b6:	9304      	str	r3, [sp, #16]
 80095b8:	9307      	str	r3, [sp, #28]
 80095ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095be:	931a      	str	r3, [sp, #104]	; 0x68
 80095c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095c4:	4654      	mov	r4, sl
 80095c6:	2205      	movs	r2, #5
 80095c8:	4851      	ldr	r0, [pc, #324]	; (8009710 <_svfiprintf_r+0x1e8>)
 80095ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ce:	f000 fa65 	bl	8009a9c <memchr>
 80095d2:	9a04      	ldr	r2, [sp, #16]
 80095d4:	b9d8      	cbnz	r0, 800960e <_svfiprintf_r+0xe6>
 80095d6:	06d0      	lsls	r0, r2, #27
 80095d8:	bf44      	itt	mi
 80095da:	2320      	movmi	r3, #32
 80095dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095e0:	0711      	lsls	r1, r2, #28
 80095e2:	bf44      	itt	mi
 80095e4:	232b      	movmi	r3, #43	; 0x2b
 80095e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095ea:	f89a 3000 	ldrb.w	r3, [sl]
 80095ee:	2b2a      	cmp	r3, #42	; 0x2a
 80095f0:	d015      	beq.n	800961e <_svfiprintf_r+0xf6>
 80095f2:	9a07      	ldr	r2, [sp, #28]
 80095f4:	4654      	mov	r4, sl
 80095f6:	2000      	movs	r0, #0
 80095f8:	f04f 0c0a 	mov.w	ip, #10
 80095fc:	4621      	mov	r1, r4
 80095fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009602:	3b30      	subs	r3, #48	; 0x30
 8009604:	2b09      	cmp	r3, #9
 8009606:	d94d      	bls.n	80096a4 <_svfiprintf_r+0x17c>
 8009608:	b1b0      	cbz	r0, 8009638 <_svfiprintf_r+0x110>
 800960a:	9207      	str	r2, [sp, #28]
 800960c:	e014      	b.n	8009638 <_svfiprintf_r+0x110>
 800960e:	eba0 0308 	sub.w	r3, r0, r8
 8009612:	46a2      	mov	sl, r4
 8009614:	fa09 f303 	lsl.w	r3, r9, r3
 8009618:	4313      	orrs	r3, r2
 800961a:	9304      	str	r3, [sp, #16]
 800961c:	e7d2      	b.n	80095c4 <_svfiprintf_r+0x9c>
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	1d19      	adds	r1, r3, #4
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	9103      	str	r1, [sp, #12]
 8009628:	bfbb      	ittet	lt
 800962a:	425b      	neglt	r3, r3
 800962c:	f042 0202 	orrlt.w	r2, r2, #2
 8009630:	9307      	strge	r3, [sp, #28]
 8009632:	9307      	strlt	r3, [sp, #28]
 8009634:	bfb8      	it	lt
 8009636:	9204      	strlt	r2, [sp, #16]
 8009638:	7823      	ldrb	r3, [r4, #0]
 800963a:	2b2e      	cmp	r3, #46	; 0x2e
 800963c:	d10c      	bne.n	8009658 <_svfiprintf_r+0x130>
 800963e:	7863      	ldrb	r3, [r4, #1]
 8009640:	2b2a      	cmp	r3, #42	; 0x2a
 8009642:	d134      	bne.n	80096ae <_svfiprintf_r+0x186>
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	3402      	adds	r4, #2
 8009648:	1d1a      	adds	r2, r3, #4
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	9203      	str	r2, [sp, #12]
 8009650:	bfb8      	it	lt
 8009652:	f04f 33ff 	movlt.w	r3, #4294967295
 8009656:	9305      	str	r3, [sp, #20]
 8009658:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009720 <_svfiprintf_r+0x1f8>
 800965c:	2203      	movs	r2, #3
 800965e:	7821      	ldrb	r1, [r4, #0]
 8009660:	4650      	mov	r0, sl
 8009662:	f000 fa1b 	bl	8009a9c <memchr>
 8009666:	b138      	cbz	r0, 8009678 <_svfiprintf_r+0x150>
 8009668:	eba0 000a 	sub.w	r0, r0, sl
 800966c:	2240      	movs	r2, #64	; 0x40
 800966e:	9b04      	ldr	r3, [sp, #16]
 8009670:	3401      	adds	r4, #1
 8009672:	4082      	lsls	r2, r0
 8009674:	4313      	orrs	r3, r2
 8009676:	9304      	str	r3, [sp, #16]
 8009678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800967c:	2206      	movs	r2, #6
 800967e:	4825      	ldr	r0, [pc, #148]	; (8009714 <_svfiprintf_r+0x1ec>)
 8009680:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009684:	f000 fa0a 	bl	8009a9c <memchr>
 8009688:	2800      	cmp	r0, #0
 800968a:	d038      	beq.n	80096fe <_svfiprintf_r+0x1d6>
 800968c:	4b22      	ldr	r3, [pc, #136]	; (8009718 <_svfiprintf_r+0x1f0>)
 800968e:	bb1b      	cbnz	r3, 80096d8 <_svfiprintf_r+0x1b0>
 8009690:	9b03      	ldr	r3, [sp, #12]
 8009692:	3307      	adds	r3, #7
 8009694:	f023 0307 	bic.w	r3, r3, #7
 8009698:	3308      	adds	r3, #8
 800969a:	9303      	str	r3, [sp, #12]
 800969c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800969e:	4433      	add	r3, r6
 80096a0:	9309      	str	r3, [sp, #36]	; 0x24
 80096a2:	e768      	b.n	8009576 <_svfiprintf_r+0x4e>
 80096a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80096a8:	460c      	mov	r4, r1
 80096aa:	2001      	movs	r0, #1
 80096ac:	e7a6      	b.n	80095fc <_svfiprintf_r+0xd4>
 80096ae:	2300      	movs	r3, #0
 80096b0:	3401      	adds	r4, #1
 80096b2:	f04f 0c0a 	mov.w	ip, #10
 80096b6:	4619      	mov	r1, r3
 80096b8:	9305      	str	r3, [sp, #20]
 80096ba:	4620      	mov	r0, r4
 80096bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096c0:	3a30      	subs	r2, #48	; 0x30
 80096c2:	2a09      	cmp	r2, #9
 80096c4:	d903      	bls.n	80096ce <_svfiprintf_r+0x1a6>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0c6      	beq.n	8009658 <_svfiprintf_r+0x130>
 80096ca:	9105      	str	r1, [sp, #20]
 80096cc:	e7c4      	b.n	8009658 <_svfiprintf_r+0x130>
 80096ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80096d2:	4604      	mov	r4, r0
 80096d4:	2301      	movs	r3, #1
 80096d6:	e7f0      	b.n	80096ba <_svfiprintf_r+0x192>
 80096d8:	ab03      	add	r3, sp, #12
 80096da:	462a      	mov	r2, r5
 80096dc:	a904      	add	r1, sp, #16
 80096de:	4638      	mov	r0, r7
 80096e0:	9300      	str	r3, [sp, #0]
 80096e2:	4b0e      	ldr	r3, [pc, #56]	; (800971c <_svfiprintf_r+0x1f4>)
 80096e4:	f3af 8000 	nop.w
 80096e8:	1c42      	adds	r2, r0, #1
 80096ea:	4606      	mov	r6, r0
 80096ec:	d1d6      	bne.n	800969c <_svfiprintf_r+0x174>
 80096ee:	89ab      	ldrh	r3, [r5, #12]
 80096f0:	065b      	lsls	r3, r3, #25
 80096f2:	f53f af2d 	bmi.w	8009550 <_svfiprintf_r+0x28>
 80096f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096f8:	b01d      	add	sp, #116	; 0x74
 80096fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fe:	ab03      	add	r3, sp, #12
 8009700:	462a      	mov	r2, r5
 8009702:	a904      	add	r1, sp, #16
 8009704:	4638      	mov	r0, r7
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	4b04      	ldr	r3, [pc, #16]	; (800971c <_svfiprintf_r+0x1f4>)
 800970a:	f000 f87d 	bl	8009808 <_printf_i>
 800970e:	e7eb      	b.n	80096e8 <_svfiprintf_r+0x1c0>
 8009710:	08009bec 	.word	0x08009bec
 8009714:	08009bf6 	.word	0x08009bf6
 8009718:	00000000 	.word	0x00000000
 800971c:	08009475 	.word	0x08009475
 8009720:	08009bf2 	.word	0x08009bf2

08009724 <_printf_common>:
 8009724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009728:	4616      	mov	r6, r2
 800972a:	4699      	mov	r9, r3
 800972c:	688a      	ldr	r2, [r1, #8]
 800972e:	4607      	mov	r7, r0
 8009730:	690b      	ldr	r3, [r1, #16]
 8009732:	460c      	mov	r4, r1
 8009734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009738:	4293      	cmp	r3, r2
 800973a:	bfb8      	it	lt
 800973c:	4613      	movlt	r3, r2
 800973e:	6033      	str	r3, [r6, #0]
 8009740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009744:	b10a      	cbz	r2, 800974a <_printf_common+0x26>
 8009746:	3301      	adds	r3, #1
 8009748:	6033      	str	r3, [r6, #0]
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	0699      	lsls	r1, r3, #26
 800974e:	bf42      	ittt	mi
 8009750:	6833      	ldrmi	r3, [r6, #0]
 8009752:	3302      	addmi	r3, #2
 8009754:	6033      	strmi	r3, [r6, #0]
 8009756:	6825      	ldr	r5, [r4, #0]
 8009758:	f015 0506 	ands.w	r5, r5, #6
 800975c:	d106      	bne.n	800976c <_printf_common+0x48>
 800975e:	f104 0a19 	add.w	sl, r4, #25
 8009762:	68e3      	ldr	r3, [r4, #12]
 8009764:	6832      	ldr	r2, [r6, #0]
 8009766:	1a9b      	subs	r3, r3, r2
 8009768:	42ab      	cmp	r3, r5
 800976a:	dc2b      	bgt.n	80097c4 <_printf_common+0xa0>
 800976c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009770:	1e13      	subs	r3, r2, #0
 8009772:	6822      	ldr	r2, [r4, #0]
 8009774:	bf18      	it	ne
 8009776:	2301      	movne	r3, #1
 8009778:	0692      	lsls	r2, r2, #26
 800977a:	d430      	bmi.n	80097de <_printf_common+0xba>
 800977c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009780:	4649      	mov	r1, r9
 8009782:	4638      	mov	r0, r7
 8009784:	47c0      	blx	r8
 8009786:	3001      	adds	r0, #1
 8009788:	d023      	beq.n	80097d2 <_printf_common+0xae>
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	341a      	adds	r4, #26
 800978e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009792:	f003 0306 	and.w	r3, r3, #6
 8009796:	2b04      	cmp	r3, #4
 8009798:	bf0a      	itet	eq
 800979a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800979e:	2500      	movne	r5, #0
 80097a0:	6833      	ldreq	r3, [r6, #0]
 80097a2:	f04f 0600 	mov.w	r6, #0
 80097a6:	bf08      	it	eq
 80097a8:	1aed      	subeq	r5, r5, r3
 80097aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80097ae:	bf08      	it	eq
 80097b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097b4:	4293      	cmp	r3, r2
 80097b6:	bfc4      	itt	gt
 80097b8:	1a9b      	subgt	r3, r3, r2
 80097ba:	18ed      	addgt	r5, r5, r3
 80097bc:	42b5      	cmp	r5, r6
 80097be:	d11a      	bne.n	80097f6 <_printf_common+0xd2>
 80097c0:	2000      	movs	r0, #0
 80097c2:	e008      	b.n	80097d6 <_printf_common+0xb2>
 80097c4:	2301      	movs	r3, #1
 80097c6:	4652      	mov	r2, sl
 80097c8:	4649      	mov	r1, r9
 80097ca:	4638      	mov	r0, r7
 80097cc:	47c0      	blx	r8
 80097ce:	3001      	adds	r0, #1
 80097d0:	d103      	bne.n	80097da <_printf_common+0xb6>
 80097d2:	f04f 30ff 	mov.w	r0, #4294967295
 80097d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097da:	3501      	adds	r5, #1
 80097dc:	e7c1      	b.n	8009762 <_printf_common+0x3e>
 80097de:	18e1      	adds	r1, r4, r3
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	2030      	movs	r0, #48	; 0x30
 80097e4:	3302      	adds	r3, #2
 80097e6:	4422      	add	r2, r4
 80097e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097f4:	e7c2      	b.n	800977c <_printf_common+0x58>
 80097f6:	2301      	movs	r3, #1
 80097f8:	4622      	mov	r2, r4
 80097fa:	4649      	mov	r1, r9
 80097fc:	4638      	mov	r0, r7
 80097fe:	47c0      	blx	r8
 8009800:	3001      	adds	r0, #1
 8009802:	d0e6      	beq.n	80097d2 <_printf_common+0xae>
 8009804:	3601      	adds	r6, #1
 8009806:	e7d9      	b.n	80097bc <_printf_common+0x98>

08009808 <_printf_i>:
 8009808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800980c:	7e0f      	ldrb	r7, [r1, #24]
 800980e:	4691      	mov	r9, r2
 8009810:	4680      	mov	r8, r0
 8009812:	460c      	mov	r4, r1
 8009814:	2f78      	cmp	r7, #120	; 0x78
 8009816:	469a      	mov	sl, r3
 8009818:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800981a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800981e:	d807      	bhi.n	8009830 <_printf_i+0x28>
 8009820:	2f62      	cmp	r7, #98	; 0x62
 8009822:	d80a      	bhi.n	800983a <_printf_i+0x32>
 8009824:	2f00      	cmp	r7, #0
 8009826:	f000 80d3 	beq.w	80099d0 <_printf_i+0x1c8>
 800982a:	2f58      	cmp	r7, #88	; 0x58
 800982c:	f000 80bf 	beq.w	80099ae <_printf_i+0x1a6>
 8009830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009834:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009838:	e03a      	b.n	80098b0 <_printf_i+0xa8>
 800983a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800983e:	2b15      	cmp	r3, #21
 8009840:	d8f6      	bhi.n	8009830 <_printf_i+0x28>
 8009842:	a101      	add	r1, pc, #4	; (adr r1, 8009848 <_printf_i+0x40>)
 8009844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009848:	080098a1 	.word	0x080098a1
 800984c:	080098b5 	.word	0x080098b5
 8009850:	08009831 	.word	0x08009831
 8009854:	08009831 	.word	0x08009831
 8009858:	08009831 	.word	0x08009831
 800985c:	08009831 	.word	0x08009831
 8009860:	080098b5 	.word	0x080098b5
 8009864:	08009831 	.word	0x08009831
 8009868:	08009831 	.word	0x08009831
 800986c:	08009831 	.word	0x08009831
 8009870:	08009831 	.word	0x08009831
 8009874:	080099b7 	.word	0x080099b7
 8009878:	080098e1 	.word	0x080098e1
 800987c:	08009973 	.word	0x08009973
 8009880:	08009831 	.word	0x08009831
 8009884:	08009831 	.word	0x08009831
 8009888:	080099d9 	.word	0x080099d9
 800988c:	08009831 	.word	0x08009831
 8009890:	080098e1 	.word	0x080098e1
 8009894:	08009831 	.word	0x08009831
 8009898:	08009831 	.word	0x08009831
 800989c:	0800997b 	.word	0x0800997b
 80098a0:	682b      	ldr	r3, [r5, #0]
 80098a2:	1d1a      	adds	r2, r3, #4
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	602a      	str	r2, [r5, #0]
 80098a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098b0:	2301      	movs	r3, #1
 80098b2:	e09e      	b.n	80099f2 <_printf_i+0x1ea>
 80098b4:	6820      	ldr	r0, [r4, #0]
 80098b6:	682b      	ldr	r3, [r5, #0]
 80098b8:	0607      	lsls	r7, r0, #24
 80098ba:	f103 0104 	add.w	r1, r3, #4
 80098be:	6029      	str	r1, [r5, #0]
 80098c0:	d501      	bpl.n	80098c6 <_printf_i+0xbe>
 80098c2:	681e      	ldr	r6, [r3, #0]
 80098c4:	e003      	b.n	80098ce <_printf_i+0xc6>
 80098c6:	0646      	lsls	r6, r0, #25
 80098c8:	d5fb      	bpl.n	80098c2 <_printf_i+0xba>
 80098ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80098ce:	2e00      	cmp	r6, #0
 80098d0:	da03      	bge.n	80098da <_printf_i+0xd2>
 80098d2:	232d      	movs	r3, #45	; 0x2d
 80098d4:	4276      	negs	r6, r6
 80098d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098da:	4859      	ldr	r0, [pc, #356]	; (8009a40 <_printf_i+0x238>)
 80098dc:	230a      	movs	r3, #10
 80098de:	e012      	b.n	8009906 <_printf_i+0xfe>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	6820      	ldr	r0, [r4, #0]
 80098e4:	1d19      	adds	r1, r3, #4
 80098e6:	6029      	str	r1, [r5, #0]
 80098e8:	0605      	lsls	r5, r0, #24
 80098ea:	d501      	bpl.n	80098f0 <_printf_i+0xe8>
 80098ec:	681e      	ldr	r6, [r3, #0]
 80098ee:	e002      	b.n	80098f6 <_printf_i+0xee>
 80098f0:	0641      	lsls	r1, r0, #25
 80098f2:	d5fb      	bpl.n	80098ec <_printf_i+0xe4>
 80098f4:	881e      	ldrh	r6, [r3, #0]
 80098f6:	2f6f      	cmp	r7, #111	; 0x6f
 80098f8:	4851      	ldr	r0, [pc, #324]	; (8009a40 <_printf_i+0x238>)
 80098fa:	bf0c      	ite	eq
 80098fc:	2308      	moveq	r3, #8
 80098fe:	230a      	movne	r3, #10
 8009900:	2100      	movs	r1, #0
 8009902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009906:	6865      	ldr	r5, [r4, #4]
 8009908:	2d00      	cmp	r5, #0
 800990a:	60a5      	str	r5, [r4, #8]
 800990c:	bfa2      	ittt	ge
 800990e:	6821      	ldrge	r1, [r4, #0]
 8009910:	f021 0104 	bicge.w	r1, r1, #4
 8009914:	6021      	strge	r1, [r4, #0]
 8009916:	b90e      	cbnz	r6, 800991c <_printf_i+0x114>
 8009918:	2d00      	cmp	r5, #0
 800991a:	d04a      	beq.n	80099b2 <_printf_i+0x1aa>
 800991c:	4615      	mov	r5, r2
 800991e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009922:	fb03 6711 	mls	r7, r3, r1, r6
 8009926:	5dc7      	ldrb	r7, [r0, r7]
 8009928:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800992c:	4637      	mov	r7, r6
 800992e:	460e      	mov	r6, r1
 8009930:	42bb      	cmp	r3, r7
 8009932:	d9f4      	bls.n	800991e <_printf_i+0x116>
 8009934:	2b08      	cmp	r3, #8
 8009936:	d10b      	bne.n	8009950 <_printf_i+0x148>
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	07de      	lsls	r6, r3, #31
 800993c:	d508      	bpl.n	8009950 <_printf_i+0x148>
 800993e:	6923      	ldr	r3, [r4, #16]
 8009940:	6861      	ldr	r1, [r4, #4]
 8009942:	4299      	cmp	r1, r3
 8009944:	bfde      	ittt	le
 8009946:	2330      	movle	r3, #48	; 0x30
 8009948:	f805 3c01 	strble.w	r3, [r5, #-1]
 800994c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009950:	1b52      	subs	r2, r2, r5
 8009952:	6122      	str	r2, [r4, #16]
 8009954:	464b      	mov	r3, r9
 8009956:	aa03      	add	r2, sp, #12
 8009958:	4621      	mov	r1, r4
 800995a:	4640      	mov	r0, r8
 800995c:	f8cd a000 	str.w	sl, [sp]
 8009960:	f7ff fee0 	bl	8009724 <_printf_common>
 8009964:	3001      	adds	r0, #1
 8009966:	d149      	bne.n	80099fc <_printf_i+0x1f4>
 8009968:	f04f 30ff 	mov.w	r0, #4294967295
 800996c:	b004      	add	sp, #16
 800996e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	f043 0320 	orr.w	r3, r3, #32
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	2778      	movs	r7, #120	; 0x78
 800997c:	4831      	ldr	r0, [pc, #196]	; (8009a44 <_printf_i+0x23c>)
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009984:	061f      	lsls	r7, r3, #24
 8009986:	6829      	ldr	r1, [r5, #0]
 8009988:	f851 6b04 	ldr.w	r6, [r1], #4
 800998c:	d402      	bmi.n	8009994 <_printf_i+0x18c>
 800998e:	065f      	lsls	r7, r3, #25
 8009990:	bf48      	it	mi
 8009992:	b2b6      	uxthmi	r6, r6
 8009994:	07df      	lsls	r7, r3, #31
 8009996:	6029      	str	r1, [r5, #0]
 8009998:	bf44      	itt	mi
 800999a:	f043 0320 	orrmi.w	r3, r3, #32
 800999e:	6023      	strmi	r3, [r4, #0]
 80099a0:	b91e      	cbnz	r6, 80099aa <_printf_i+0x1a2>
 80099a2:	6823      	ldr	r3, [r4, #0]
 80099a4:	f023 0320 	bic.w	r3, r3, #32
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	2310      	movs	r3, #16
 80099ac:	e7a8      	b.n	8009900 <_printf_i+0xf8>
 80099ae:	4824      	ldr	r0, [pc, #144]	; (8009a40 <_printf_i+0x238>)
 80099b0:	e7e5      	b.n	800997e <_printf_i+0x176>
 80099b2:	4615      	mov	r5, r2
 80099b4:	e7be      	b.n	8009934 <_printf_i+0x12c>
 80099b6:	682b      	ldr	r3, [r5, #0]
 80099b8:	6826      	ldr	r6, [r4, #0]
 80099ba:	1d18      	adds	r0, r3, #4
 80099bc:	6961      	ldr	r1, [r4, #20]
 80099be:	6028      	str	r0, [r5, #0]
 80099c0:	0635      	lsls	r5, r6, #24
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	d501      	bpl.n	80099ca <_printf_i+0x1c2>
 80099c6:	6019      	str	r1, [r3, #0]
 80099c8:	e002      	b.n	80099d0 <_printf_i+0x1c8>
 80099ca:	0670      	lsls	r0, r6, #25
 80099cc:	d5fb      	bpl.n	80099c6 <_printf_i+0x1be>
 80099ce:	8019      	strh	r1, [r3, #0]
 80099d0:	2300      	movs	r3, #0
 80099d2:	4615      	mov	r5, r2
 80099d4:	6123      	str	r3, [r4, #16]
 80099d6:	e7bd      	b.n	8009954 <_printf_i+0x14c>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	2100      	movs	r1, #0
 80099dc:	1d1a      	adds	r2, r3, #4
 80099de:	602a      	str	r2, [r5, #0]
 80099e0:	681d      	ldr	r5, [r3, #0]
 80099e2:	6862      	ldr	r2, [r4, #4]
 80099e4:	4628      	mov	r0, r5
 80099e6:	f000 f859 	bl	8009a9c <memchr>
 80099ea:	b108      	cbz	r0, 80099f0 <_printf_i+0x1e8>
 80099ec:	1b40      	subs	r0, r0, r5
 80099ee:	6060      	str	r0, [r4, #4]
 80099f0:	6863      	ldr	r3, [r4, #4]
 80099f2:	6123      	str	r3, [r4, #16]
 80099f4:	2300      	movs	r3, #0
 80099f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099fa:	e7ab      	b.n	8009954 <_printf_i+0x14c>
 80099fc:	6923      	ldr	r3, [r4, #16]
 80099fe:	462a      	mov	r2, r5
 8009a00:	4649      	mov	r1, r9
 8009a02:	4640      	mov	r0, r8
 8009a04:	47d0      	blx	sl
 8009a06:	3001      	adds	r0, #1
 8009a08:	d0ae      	beq.n	8009968 <_printf_i+0x160>
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	079b      	lsls	r3, r3, #30
 8009a0e:	d413      	bmi.n	8009a38 <_printf_i+0x230>
 8009a10:	68e0      	ldr	r0, [r4, #12]
 8009a12:	9b03      	ldr	r3, [sp, #12]
 8009a14:	4298      	cmp	r0, r3
 8009a16:	bfb8      	it	lt
 8009a18:	4618      	movlt	r0, r3
 8009a1a:	e7a7      	b.n	800996c <_printf_i+0x164>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	4632      	mov	r2, r6
 8009a20:	4649      	mov	r1, r9
 8009a22:	4640      	mov	r0, r8
 8009a24:	47d0      	blx	sl
 8009a26:	3001      	adds	r0, #1
 8009a28:	d09e      	beq.n	8009968 <_printf_i+0x160>
 8009a2a:	3501      	adds	r5, #1
 8009a2c:	68e3      	ldr	r3, [r4, #12]
 8009a2e:	9903      	ldr	r1, [sp, #12]
 8009a30:	1a5b      	subs	r3, r3, r1
 8009a32:	42ab      	cmp	r3, r5
 8009a34:	dcf2      	bgt.n	8009a1c <_printf_i+0x214>
 8009a36:	e7eb      	b.n	8009a10 <_printf_i+0x208>
 8009a38:	2500      	movs	r5, #0
 8009a3a:	f104 0619 	add.w	r6, r4, #25
 8009a3e:	e7f5      	b.n	8009a2c <_printf_i+0x224>
 8009a40:	08009bfd 	.word	0x08009bfd
 8009a44:	08009c0e 	.word	0x08009c0e

08009a48 <memmove>:
 8009a48:	4288      	cmp	r0, r1
 8009a4a:	b510      	push	{r4, lr}
 8009a4c:	eb01 0402 	add.w	r4, r1, r2
 8009a50:	d902      	bls.n	8009a58 <memmove+0x10>
 8009a52:	4284      	cmp	r4, r0
 8009a54:	4623      	mov	r3, r4
 8009a56:	d807      	bhi.n	8009a68 <memmove+0x20>
 8009a58:	1e43      	subs	r3, r0, #1
 8009a5a:	42a1      	cmp	r1, r4
 8009a5c:	d008      	beq.n	8009a70 <memmove+0x28>
 8009a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a66:	e7f8      	b.n	8009a5a <memmove+0x12>
 8009a68:	4402      	add	r2, r0
 8009a6a:	4601      	mov	r1, r0
 8009a6c:	428a      	cmp	r2, r1
 8009a6e:	d100      	bne.n	8009a72 <memmove+0x2a>
 8009a70:	bd10      	pop	{r4, pc}
 8009a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a7a:	e7f7      	b.n	8009a6c <memmove+0x24>

08009a7c <_sbrk_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	2300      	movs	r3, #0
 8009a80:	4d05      	ldr	r5, [pc, #20]	; (8009a98 <_sbrk_r+0x1c>)
 8009a82:	4604      	mov	r4, r0
 8009a84:	4608      	mov	r0, r1
 8009a86:	602b      	str	r3, [r5, #0]
 8009a88:	f7f7 f8e8 	bl	8000c5c <_sbrk>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_sbrk_r+0x1a>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_sbrk_r+0x1a>
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	200002e0 	.word	0x200002e0

08009a9c <memchr>:
 8009a9c:	b2c9      	uxtb	r1, r1
 8009a9e:	4402      	add	r2, r0
 8009aa0:	b510      	push	{r4, lr}
 8009aa2:	4290      	cmp	r0, r2
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	d101      	bne.n	8009aac <memchr+0x10>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	e003      	b.n	8009ab4 <memchr+0x18>
 8009aac:	781c      	ldrb	r4, [r3, #0]
 8009aae:	3001      	adds	r0, #1
 8009ab0:	428c      	cmp	r4, r1
 8009ab2:	d1f6      	bne.n	8009aa2 <memchr+0x6>
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	bd10      	pop	{r4, pc}

08009ab8 <memcpy>:
 8009ab8:	440a      	add	r2, r1
 8009aba:	1e43      	subs	r3, r0, #1
 8009abc:	4291      	cmp	r1, r2
 8009abe:	d100      	bne.n	8009ac2 <memcpy+0xa>
 8009ac0:	4770      	bx	lr
 8009ac2:	b510      	push	{r4, lr}
 8009ac4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ac8:	4291      	cmp	r1, r2
 8009aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ace:	d1f9      	bne.n	8009ac4 <memcpy+0xc>
 8009ad0:	bd10      	pop	{r4, pc}

08009ad2 <_realloc_r>:
 8009ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad6:	4680      	mov	r8, r0
 8009ad8:	4614      	mov	r4, r2
 8009ada:	460e      	mov	r6, r1
 8009adc:	b921      	cbnz	r1, 8009ae8 <_realloc_r+0x16>
 8009ade:	4611      	mov	r1, r2
 8009ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae4:	f7ff bc3a 	b.w	800935c <_malloc_r>
 8009ae8:	b92a      	cbnz	r2, 8009af6 <_realloc_r+0x24>
 8009aea:	4625      	mov	r5, r4
 8009aec:	f7ff fbca 	bl	8009284 <_free_r>
 8009af0:	4628      	mov	r0, r5
 8009af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af6:	f000 f81b 	bl	8009b30 <_malloc_usable_size_r>
 8009afa:	4284      	cmp	r4, r0
 8009afc:	4607      	mov	r7, r0
 8009afe:	d802      	bhi.n	8009b06 <_realloc_r+0x34>
 8009b00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b04:	d812      	bhi.n	8009b2c <_realloc_r+0x5a>
 8009b06:	4621      	mov	r1, r4
 8009b08:	4640      	mov	r0, r8
 8009b0a:	f7ff fc27 	bl	800935c <_malloc_r>
 8009b0e:	4605      	mov	r5, r0
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d0ed      	beq.n	8009af0 <_realloc_r+0x1e>
 8009b14:	42bc      	cmp	r4, r7
 8009b16:	4622      	mov	r2, r4
 8009b18:	4631      	mov	r1, r6
 8009b1a:	bf28      	it	cs
 8009b1c:	463a      	movcs	r2, r7
 8009b1e:	f7ff ffcb 	bl	8009ab8 <memcpy>
 8009b22:	4631      	mov	r1, r6
 8009b24:	4640      	mov	r0, r8
 8009b26:	f7ff fbad 	bl	8009284 <_free_r>
 8009b2a:	e7e1      	b.n	8009af0 <_realloc_r+0x1e>
 8009b2c:	4635      	mov	r5, r6
 8009b2e:	e7df      	b.n	8009af0 <_realloc_r+0x1e>

08009b30 <_malloc_usable_size_r>:
 8009b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b34:	1f18      	subs	r0, r3, #4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	bfbc      	itt	lt
 8009b3a:	580b      	ldrlt	r3, [r1, r0]
 8009b3c:	18c0      	addlt	r0, r0, r3
 8009b3e:	4770      	bx	lr

08009b40 <_init>:
 8009b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b42:	bf00      	nop
 8009b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b46:	bc08      	pop	{r3}
 8009b48:	469e      	mov	lr, r3
 8009b4a:	4770      	bx	lr

08009b4c <_fini>:
 8009b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4e:	bf00      	nop
 8009b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b52:	bc08      	pop	{r3}
 8009b54:	469e      	mov	lr, r3
 8009b56:	4770      	bx	lr
